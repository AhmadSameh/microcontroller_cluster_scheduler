
prototype.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e78  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002f84  08002f84  00012f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fa8  08002fa8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002fa8  08002fa8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002fa8  08002fa8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002fa8  08002fa8  00012fa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002fac  08002fac  00012fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002fb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c8  2000000c  08002fbc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  08002fbc  000202d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a75e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e53  00000000  00000000  0002a7d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b78  00000000  00000000  0002c630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008c4  00000000  00000000  0002d1a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017111  00000000  00000000  0002da6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c6ef  00000000  00000000  00044b7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a322  00000000  00000000  0005126c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002eec  00000000  00000000  000db590  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000de47c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002f6c 	.word	0x08002f6c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002f6c 	.word	0x08002f6c

0800014c <Can_Filter_Config>:
uint32_t Can_TxMailBox[3];

static ptrVoidFunction CAN_ISR_FUNCTION = NULL;

HAL_StatusTypeDef Can_Filter_Config(CAN_HandleTypeDef *hcan,uint8_t master_or_slave)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b08c      	sub	sp, #48	; 0x30
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	460b      	mov	r3, r1
 8000156:	70fb      	strb	r3, [r7, #3]
	if(!master_or_slave)
 8000158:	78fb      	ldrb	r3, [r7, #3]
 800015a:	2b00      	cmp	r3, #0
 800015c:	d139      	bne.n	80001d2 <Can_Filter_Config+0x86>
	{

		CAN_FilterTypeDef	CANFilterConfig;
		CANFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 800015e:	2301      	movs	r3, #1
 8000160:	62bb      	str	r3, [r7, #40]	; 0x28
		CANFilterConfig.FilterBank = 10;
 8000162:	230a      	movs	r3, #10
 8000164:	61fb      	str	r3, [r7, #28]
		CANFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000166:	2300      	movs	r3, #0
 8000168:	61bb      	str	r3, [r7, #24]
		CANFilterConfig.FilterIdHigh = can_id<<5;
 800016a:	4b2f      	ldr	r3, [pc, #188]	; (8000228 <Can_Filter_Config+0xdc>)
 800016c:	681a      	ldr	r2, [r3, #0]
 800016e:	4b2f      	ldr	r3, [pc, #188]	; (800022c <Can_Filter_Config+0xe0>)
 8000170:	681b      	ldr	r3, [r3, #0]
 8000172:	405a      	eors	r2, r3
 8000174:	4b2e      	ldr	r3, [pc, #184]	; (8000230 <Can_Filter_Config+0xe4>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4053      	eors	r3, r2
 800017a:	0e1b      	lsrs	r3, r3, #24
 800017c:	015b      	lsls	r3, r3, #5
 800017e:	60bb      	str	r3, [r7, #8]
		CANFilterConfig.FilterIdLow = 0X0000;
 8000180:	2300      	movs	r3, #0
 8000182:	60fb      	str	r3, [r7, #12]
		CANFilterConfig.FilterMaskIdHigh = can_id<<5;
 8000184:	4b28      	ldr	r3, [pc, #160]	; (8000228 <Can_Filter_Config+0xdc>)
 8000186:	681a      	ldr	r2, [r3, #0]
 8000188:	4b28      	ldr	r3, [pc, #160]	; (800022c <Can_Filter_Config+0xe0>)
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	405a      	eors	r2, r3
 800018e:	4b28      	ldr	r3, [pc, #160]	; (8000230 <Can_Filter_Config+0xe4>)
 8000190:	681b      	ldr	r3, [r3, #0]
 8000192:	4053      	eors	r3, r2
 8000194:	0e1b      	lsrs	r3, r3, #24
 8000196:	015b      	lsls	r3, r3, #5
 8000198:	613b      	str	r3, [r7, #16]
		CANFilterConfig.FilterMaskIdLow = 0X0000;
 800019a:	2300      	movs	r3, #0
 800019c:	617b      	str	r3, [r7, #20]
		CANFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800019e:	2300      	movs	r3, #0
 80001a0:	623b      	str	r3, [r7, #32]
		CANFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80001a2:	2301      	movs	r3, #1
 80001a4:	627b      	str	r3, [r7, #36]	; 0x24
		CANFilterConfig.SlaveStartFilterBank = 0;
 80001a6:	2300      	movs	r3, #0
 80001a8:	62fb      	str	r3, [r7, #44]	; 0x2c
		if( HAL_CAN_ConfigFilter(hcan, &CANFilterConfig) != HAL_OK)
 80001aa:	f107 0308 	add.w	r3, r7, #8
 80001ae:	4619      	mov	r1, r3
 80001b0:	6878      	ldr	r0, [r7, #4]
 80001b2:	f001 f876 	bl	80012a2 <HAL_CAN_ConfigFilter>
 80001b6:	4603      	mov	r3, r0
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d001      	beq.n	80001c0 <Can_Filter_Config+0x74>
		{
			return HAL_ERROR;
 80001bc:	2301      	movs	r3, #1
 80001be:	e02f      	b.n	8000220 <Can_Filter_Config+0xd4>
		}
		HAL_CAN_Start(hcan);
 80001c0:	6878      	ldr	r0, [r7, #4]
 80001c2:	f001 f937 	bl	8001434 <HAL_CAN_Start>
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80001c6:	2102      	movs	r1, #2
 80001c8:	6878      	ldr	r0, [r7, #4]
 80001ca:	f001 fb67 	bl	800189c <HAL_CAN_ActivateNotification>

		return HAL_OK;
 80001ce:	2300      	movs	r3, #0
 80001d0:	e026      	b.n	8000220 <Can_Filter_Config+0xd4>
	}
	else
	{
		CAN_FilterTypeDef	CANFilterConfig;
		CANFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 80001d2:	2301      	movs	r3, #1
 80001d4:	62bb      	str	r3, [r7, #40]	; 0x28
		CANFilterConfig.FilterBank = 10;
 80001d6:	230a      	movs	r3, #10
 80001d8:	61fb      	str	r3, [r7, #28]
		CANFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80001da:	2300      	movs	r3, #0
 80001dc:	61bb      	str	r3, [r7, #24]
		CANFilterConfig.FilterIdHigh = CAN_Master_Id<<5;
 80001de:	2300      	movs	r3, #0
 80001e0:	60bb      	str	r3, [r7, #8]
		CANFilterConfig.FilterIdLow = 0X0000;
 80001e2:	2300      	movs	r3, #0
 80001e4:	60fb      	str	r3, [r7, #12]
		CANFilterConfig.FilterMaskIdHigh = CAN_Master_Id<<5;
 80001e6:	2300      	movs	r3, #0
 80001e8:	613b      	str	r3, [r7, #16]
		CANFilterConfig.FilterMaskIdLow = 0X0000;
 80001ea:	2300      	movs	r3, #0
 80001ec:	617b      	str	r3, [r7, #20]
		CANFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80001ee:	2300      	movs	r3, #0
 80001f0:	623b      	str	r3, [r7, #32]
		CANFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80001f2:	2301      	movs	r3, #1
 80001f4:	627b      	str	r3, [r7, #36]	; 0x24
		CANFilterConfig.SlaveStartFilterBank = 0;
 80001f6:	2300      	movs	r3, #0
 80001f8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( HAL_CAN_ConfigFilter(hcan, &CANFilterConfig) != HAL_OK)
 80001fa:	f107 0308 	add.w	r3, r7, #8
 80001fe:	4619      	mov	r1, r3
 8000200:	6878      	ldr	r0, [r7, #4]
 8000202:	f001 f84e 	bl	80012a2 <HAL_CAN_ConfigFilter>
 8000206:	4603      	mov	r3, r0
 8000208:	2b00      	cmp	r3, #0
 800020a:	d001      	beq.n	8000210 <Can_Filter_Config+0xc4>
		{
			return HAL_ERROR;
 800020c:	2301      	movs	r3, #1
 800020e:	e007      	b.n	8000220 <Can_Filter_Config+0xd4>
		}
		HAL_CAN_Start(hcan);
 8000210:	6878      	ldr	r0, [r7, #4]
 8000212:	f001 f90f 	bl	8001434 <HAL_CAN_Start>
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000216:	2102      	movs	r1, #2
 8000218:	6878      	ldr	r0, [r7, #4]
 800021a:	f001 fb3f 	bl	800189c <HAL_CAN_ActivateNotification>
		return HAL_OK;
 800021e:	2300      	movs	r3, #0
	}
}
 8000220:	4618      	mov	r0, r3
 8000222:	3730      	adds	r7, #48	; 0x30
 8000224:	46bd      	mov	sp, r7
 8000226:	bd80      	pop	{r7, pc}
 8000228:	1ffff7e8 	.word	0x1ffff7e8
 800022c:	1ffff7ec 	.word	0x1ffff7ec
 8000230:	1ffff7f0 	.word	0x1ffff7f0

08000234 <Can_Send>:

HAL_StatusTypeDef Can_Send(CAN_HandleTypeDef *hcan,uint8_t ID, uint8_t DLC, uint8_t* data,uint32_t* Mailbox)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af00      	add	r7, sp, #0
 800023a:	60f8      	str	r0, [r7, #12]
 800023c:	607b      	str	r3, [r7, #4]
 800023e:	460b      	mov	r3, r1
 8000240:	72fb      	strb	r3, [r7, #11]
 8000242:	4613      	mov	r3, r2
 8000244:	72bb      	strb	r3, [r7, #10]
	TxHeader.IDE = CAN_ID_STD;
 8000246:	4b0e      	ldr	r3, [pc, #56]	; (8000280 <Can_Send+0x4c>)
 8000248:	2200      	movs	r2, #0
 800024a:	609a      	str	r2, [r3, #8]
	TxHeader.StdId = ID;
 800024c:	7afb      	ldrb	r3, [r7, #11]
 800024e:	4a0c      	ldr	r2, [pc, #48]	; (8000280 <Can_Send+0x4c>)
 8000250:	6013      	str	r3, [r2, #0]
	TxHeader.RTR = CAN_RTR_DATA;
 8000252:	4b0b      	ldr	r3, [pc, #44]	; (8000280 <Can_Send+0x4c>)
 8000254:	2200      	movs	r2, #0
 8000256:	60da      	str	r2, [r3, #12]
	TxHeader.DLC = DLC;
 8000258:	7abb      	ldrb	r3, [r7, #10]
 800025a:	4a09      	ldr	r2, [pc, #36]	; (8000280 <Can_Send+0x4c>)
 800025c:	6113      	str	r3, [r2, #16]

	if ( HAL_CAN_AddTxMessage(hcan, &TxHeader, data, Mailbox) != HAL_OK)
 800025e:	69bb      	ldr	r3, [r7, #24]
 8000260:	687a      	ldr	r2, [r7, #4]
 8000262:	4907      	ldr	r1, [pc, #28]	; (8000280 <Can_Send+0x4c>)
 8000264:	68f8      	ldr	r0, [r7, #12]
 8000266:	f001 f929 	bl	80014bc <HAL_CAN_AddTxMessage>
 800026a:	4603      	mov	r3, r0
 800026c:	2b00      	cmp	r3, #0
 800026e:	d001      	beq.n	8000274 <Can_Send+0x40>
	{
		return HAL_ERROR;
 8000270:	2301      	movs	r3, #1
 8000272:	e000      	b.n	8000276 <Can_Send+0x42>
	}
	return HAL_OK;
 8000274:	2300      	movs	r3, #0
}
 8000276:	4618      	mov	r0, r3
 8000278:	3710      	adds	r7, #16
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	20000028 	.word	0x20000028

08000284 <Can_InterruptCallBack>:

void Can_InterruptCallBack(ptrVoidFunction callBackFunction){
 8000284:	b480      	push	{r7}
 8000286:	b083      	sub	sp, #12
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]

	if(callBackFunction != NULL)
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	2b00      	cmp	r3, #0
 8000290:	d002      	beq.n	8000298 <Can_InterruptCallBack+0x14>
		CAN_ISR_FUNCTION = callBackFunction;
 8000292:	4a04      	ldr	r2, [pc, #16]	; (80002a4 <Can_InterruptCallBack+0x20>)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	6013      	str	r3, [r2, #0]

}
 8000298:	bf00      	nop
 800029a:	370c      	adds	r7, #12
 800029c:	46bd      	mov	sp, r7
 800029e:	bc80      	pop	{r7}
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop
 80002a4:	20000070 	.word	0x20000070

080002a8 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b082      	sub	sp, #8
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, Can_RxData);
 80002b0:	4b06      	ldr	r3, [pc, #24]	; (80002cc <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 80002b2:	4a07      	ldr	r2, [pc, #28]	; (80002d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 80002b4:	2100      	movs	r1, #0
 80002b6:	6878      	ldr	r0, [r7, #4]
 80002b8:	f001 f9cf 	bl	800165a <HAL_CAN_GetRxMessage>

	CAN_ISR_FUNCTION();
 80002bc:	4b05      	ldr	r3, [pc, #20]	; (80002d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	4798      	blx	r3
}
 80002c2:	bf00      	nop
 80002c4:	3708      	adds	r7, #8
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	2000005c 	.word	0x2000005c
 80002d0:	20000040 	.word	0x20000040
 80002d4:	20000070 	.word	0x20000070

080002d8 <priority_queue_init>:
#include <stdint.h>

void heapify(priority_queue* queue, uint8_t index);
void swap_operations(priority_queue* queue, uint8_t index1, uint8_t index2);

void priority_queue_init(priority_queue* queue){
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
	queue->tail = 0;
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	2200      	movs	r2, #0
 80002e4:	701a      	strb	r2, [r3, #0]
}
 80002e6:	bf00      	nop
 80002e8:	370c      	adds	r7, #12
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bc80      	pop	{r7}
 80002ee:	4770      	bx	lr

080002f0 <priority_queue_push>:

void priority_queue_push(priority_queue* queue, uint8_t item, uint8_t priority){
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b084      	sub	sp, #16
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
 80002f8:	460b      	mov	r3, r1
 80002fa:	70fb      	strb	r3, [r7, #3]
 80002fc:	4613      	mov	r3, r2
 80002fe:	70bb      	strb	r3, [r7, #2]
	// TODO: add here an error state
	if(queue->tail >= MAX_ITEM_NUM)
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	2b0f      	cmp	r3, #15
 8000306:	d828      	bhi.n	800035a <priority_queue_push+0x6a>
		return;
	// add queue_item to the queue at index tail [x x x tail] <----- three elements, tail = 3, tail = number of elements
	queue->queue[queue->tail].item = item;
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	687a      	ldr	r2, [r7, #4]
 800030e:	005b      	lsls	r3, r3, #1
 8000310:	4413      	add	r3, r2
 8000312:	78fa      	ldrb	r2, [r7, #3]
 8000314:	705a      	strb	r2, [r3, #1]
	queue->queue[queue->tail].priority = priority;
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	781b      	ldrb	r3, [r3, #0]
 800031a:	687a      	ldr	r2, [r7, #4]
 800031c:	005b      	lsls	r3, r3, #1
 800031e:	4413      	add	r3, r2
 8000320:	78ba      	ldrb	r2, [r7, #2]
 8000322:	709a      	strb	r2, [r3, #2]
	// heapify the queue
	for(int i=(queue->tail-1)/2; i>=0; i--)
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	3b01      	subs	r3, #1
 800032a:	0fda      	lsrs	r2, r3, #31
 800032c:	4413      	add	r3, r2
 800032e:	105b      	asrs	r3, r3, #1
 8000330:	60fb      	str	r3, [r7, #12]
 8000332:	e008      	b.n	8000346 <priority_queue_push+0x56>
		heapify(queue, i);
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	b2db      	uxtb	r3, r3
 8000338:	4619      	mov	r1, r3
 800033a:	6878      	ldr	r0, [r7, #4]
 800033c:	f000 f843 	bl	80003c6 <heapify>
	for(int i=(queue->tail-1)/2; i>=0; i--)
 8000340:	68fb      	ldr	r3, [r7, #12]
 8000342:	3b01      	subs	r3, #1
 8000344:	60fb      	str	r3, [r7, #12]
 8000346:	68fb      	ldr	r3, [r7, #12]
 8000348:	2b00      	cmp	r3, #0
 800034a:	daf3      	bge.n	8000334 <priority_queue_push+0x44>
	// increase number of elements/tail
	queue->tail++;
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	781b      	ldrb	r3, [r3, #0]
 8000350:	3301      	adds	r3, #1
 8000352:	b2da      	uxtb	r2, r3
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	701a      	strb	r2, [r3, #0]
 8000358:	e000      	b.n	800035c <priority_queue_push+0x6c>
		return;
 800035a:	bf00      	nop
}
 800035c:	3710      	adds	r7, #16
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}

08000362 <priority_queue_pop>:

uint8_t priority_queue_pop(priority_queue* queue){
 8000362:	b580      	push	{r7, lr}
 8000364:	b082      	sub	sp, #8
 8000366:	af00      	add	r7, sp, #0
 8000368:	6078      	str	r0, [r7, #4]
	// TODO: add here an errors state
	if(queue->tail <=0)
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	781b      	ldrb	r3, [r3, #0]
 800036e:	2b00      	cmp	r3, #0
 8000370:	d101      	bne.n	8000376 <priority_queue_pop+0x14>
		return 0;
 8000372:	2300      	movs	r3, #0
 8000374:	e018      	b.n	80003a8 <priority_queue_pop+0x46>
	// swap first and last elements
	swap_operations(queue, 0, queue->tail-1);
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	3b01      	subs	r3, #1
 800037c:	b2db      	uxtb	r3, r3
 800037e:	461a      	mov	r2, r3
 8000380:	2100      	movs	r1, #0
 8000382:	6878      	ldr	r0, [r7, #4]
 8000384:	f000 f868 	bl	8000458 <swap_operations>
	// decrement tail so now, last element is out of bounds of the queue
	queue->tail--;
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	781b      	ldrb	r3, [r3, #0]
 800038c:	3b01      	subs	r3, #1
 800038e:	b2da      	uxtb	r2, r3
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	701a      	strb	r2, [r3, #0]
	// heapify the queue
	heapify(queue, 0);
 8000394:	2100      	movs	r1, #0
 8000396:	6878      	ldr	r0, [r7, #4]
 8000398:	f000 f815 	bl	80003c6 <heapify>
	// return the item of the element of the queue, which is discarded
	return queue->queue[queue->tail].item;
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	687a      	ldr	r2, [r7, #4]
 80003a2:	005b      	lsls	r3, r3, #1
 80003a4:	4413      	add	r3, r2
 80003a6:	785b      	ldrb	r3, [r3, #1]
}
 80003a8:	4618      	mov	r0, r3
 80003aa:	3708      	adds	r7, #8
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}

080003b0 <priority_queue_peak>:

uint8_t priority_queue_peak(priority_queue* queue){
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
	return queue->queue[0].item;
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	785b      	ldrb	r3, [r3, #1]
}
 80003bc:	4618      	mov	r0, r3
 80003be:	370c      	adds	r7, #12
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bc80      	pop	{r7}
 80003c4:	4770      	bx	lr

080003c6 <heapify>:

void heapify(priority_queue* queue, uint8_t index){
 80003c6:	b580      	push	{r7, lr}
 80003c8:	b084      	sub	sp, #16
 80003ca:	af00      	add	r7, sp, #0
 80003cc:	6078      	str	r0, [r7, #4]
 80003ce:	460b      	mov	r3, r1
 80003d0:	70fb      	strb	r3, [r7, #3]
	// store current node as the smallest and save left and right children
	uint8_t smallest = index;
 80003d2:	78fb      	ldrb	r3, [r7, #3]
 80003d4:	73fb      	strb	r3, [r7, #15]
	uint8_t left_child = index * 2 + 1;
 80003d6:	78fb      	ldrb	r3, [r7, #3]
 80003d8:	005b      	lsls	r3, r3, #1
 80003da:	b2db      	uxtb	r3, r3
 80003dc:	3301      	adds	r3, #1
 80003de:	73bb      	strb	r3, [r7, #14]
	uint8_t right_child = left_child + 1;
 80003e0:	7bbb      	ldrb	r3, [r7, #14]
 80003e2:	3301      	adds	r3, #1
 80003e4:	737b      	strb	r3, [r7, #13]
	// if left child is smaller than current, left child is the smallest
	if(left_child < queue->tail && queue->queue[left_child].priority < queue->queue[index].priority)
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	781b      	ldrb	r3, [r3, #0]
 80003ea:	7bba      	ldrb	r2, [r7, #14]
 80003ec:	429a      	cmp	r2, r3
 80003ee:	d20d      	bcs.n	800040c <heapify+0x46>
 80003f0:	7bbb      	ldrb	r3, [r7, #14]
 80003f2:	687a      	ldr	r2, [r7, #4]
 80003f4:	005b      	lsls	r3, r3, #1
 80003f6:	4413      	add	r3, r2
 80003f8:	789a      	ldrb	r2, [r3, #2]
 80003fa:	78fb      	ldrb	r3, [r7, #3]
 80003fc:	6879      	ldr	r1, [r7, #4]
 80003fe:	005b      	lsls	r3, r3, #1
 8000400:	440b      	add	r3, r1
 8000402:	789b      	ldrb	r3, [r3, #2]
 8000404:	429a      	cmp	r2, r3
 8000406:	d201      	bcs.n	800040c <heapify+0x46>
		smallest = left_child;
 8000408:	7bbb      	ldrb	r3, [r7, #14]
 800040a:	73fb      	strb	r3, [r7, #15]
	// if right child is smaller than current, right child is the smallest
	if(right_child < queue->tail && queue->queue[right_child].priority < queue->queue[index].priority)
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	7b7a      	ldrb	r2, [r7, #13]
 8000412:	429a      	cmp	r2, r3
 8000414:	d20d      	bcs.n	8000432 <heapify+0x6c>
 8000416:	7b7b      	ldrb	r3, [r7, #13]
 8000418:	687a      	ldr	r2, [r7, #4]
 800041a:	005b      	lsls	r3, r3, #1
 800041c:	4413      	add	r3, r2
 800041e:	789a      	ldrb	r2, [r3, #2]
 8000420:	78fb      	ldrb	r3, [r7, #3]
 8000422:	6879      	ldr	r1, [r7, #4]
 8000424:	005b      	lsls	r3, r3, #1
 8000426:	440b      	add	r3, r1
 8000428:	789b      	ldrb	r3, [r3, #2]
 800042a:	429a      	cmp	r2, r3
 800042c:	d201      	bcs.n	8000432 <heapify+0x6c>
			smallest = right_child;
 800042e:	7b7b      	ldrb	r3, [r7, #13]
 8000430:	73fb      	strb	r3, [r7, #15]
	// if the smallest is not the current, swap smallest with current then heapify again
	if(smallest != index){
 8000432:	7bfa      	ldrb	r2, [r7, #15]
 8000434:	78fb      	ldrb	r3, [r7, #3]
 8000436:	429a      	cmp	r2, r3
 8000438:	d00a      	beq.n	8000450 <heapify+0x8a>
		swap_operations(queue, smallest, index);
 800043a:	78fa      	ldrb	r2, [r7, #3]
 800043c:	7bfb      	ldrb	r3, [r7, #15]
 800043e:	4619      	mov	r1, r3
 8000440:	6878      	ldr	r0, [r7, #4]
 8000442:	f000 f809 	bl	8000458 <swap_operations>
		heapify(queue, smallest);
 8000446:	7bfb      	ldrb	r3, [r7, #15]
 8000448:	4619      	mov	r1, r3
 800044a:	6878      	ldr	r0, [r7, #4]
 800044c:	f7ff ffbb 	bl	80003c6 <heapify>
	}
}
 8000450:	bf00      	nop
 8000452:	3710      	adds	r7, #16
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}

08000458 <swap_operations>:

void swap_operations(priority_queue* queue, uint8_t index1, uint8_t index2){
 8000458:	b480      	push	{r7}
 800045a:	b085      	sub	sp, #20
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
 8000460:	460b      	mov	r3, r1
 8000462:	70fb      	strb	r3, [r7, #3]
 8000464:	4613      	mov	r3, r2
 8000466:	70bb      	strb	r3, [r7, #2]
	queue_item temp = queue->queue[index1];
 8000468:	78fb      	ldrb	r3, [r7, #3]
 800046a:	687a      	ldr	r2, [r7, #4]
 800046c:	005b      	lsls	r3, r3, #1
 800046e:	4413      	add	r3, r2
 8000470:	f107 020c 	add.w	r2, r7, #12
 8000474:	3301      	adds	r3, #1
 8000476:	881b      	ldrh	r3, [r3, #0]
 8000478:	8013      	strh	r3, [r2, #0]
	queue->queue[index1] = queue->queue[index2];
 800047a:	78bb      	ldrb	r3, [r7, #2]
 800047c:	78fa      	ldrb	r2, [r7, #3]
 800047e:	6879      	ldr	r1, [r7, #4]
 8000480:	0052      	lsls	r2, r2, #1
 8000482:	440a      	add	r2, r1
 8000484:	6879      	ldr	r1, [r7, #4]
 8000486:	005b      	lsls	r3, r3, #1
 8000488:	440b      	add	r3, r1
 800048a:	3201      	adds	r2, #1
 800048c:	3301      	adds	r3, #1
 800048e:	881b      	ldrh	r3, [r3, #0]
 8000490:	8013      	strh	r3, [r2, #0]
	queue->queue[index2] = temp;
 8000492:	78bb      	ldrb	r3, [r7, #2]
 8000494:	687a      	ldr	r2, [r7, #4]
 8000496:	005b      	lsls	r3, r3, #1
 8000498:	4413      	add	r3, r2
 800049a:	3301      	adds	r3, #1
 800049c:	f107 020c 	add.w	r2, r7, #12
 80004a0:	8812      	ldrh	r2, [r2, #0]
 80004a2:	801a      	strh	r2, [r3, #0]
}
 80004a4:	bf00      	nop
 80004a6:	3714      	adds	r7, #20
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bc80      	pop	{r7}
 80004ac:	4770      	bx	lr

080004ae <sheduler_init>:
 */

#include "sheduler.h"
#include <stdlib.h>

void sheduler_init(ROM_sheduler* sheduler){
 80004ae:	b580      	push	{r7, lr}
 80004b0:	b082      	sub	sp, #8
 80004b2:	af00      	add	r7, sp, #0
 80004b4:	6078      	str	r0, [r7, #4]
	sheduler->current_slave_in_ROM = 0;
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	2200      	movs	r2, #0
 80004ba:	f883 21db 	strb.w	r2, [r3, #475]	; 0x1db
	sheduler->number_of_slaves = 0;
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	2200      	movs	r2, #0
 80004c2:	f883 21dd 	strb.w	r2, [r3, #477]	; 0x1dd
	sheduler->number_of_available_operations = 0;
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	2200      	movs	r2, #0
 80004ca:	f883 21e1 	strb.w	r2, [r3, #481]	; 0x1e1
	sheduler->number_of_idle_slaves = 0;
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	2200      	movs	r2, #0
 80004d2:	f883 21de 	strb.w	r2, [r3, #478]	; 0x1de
	sheduler->number_of_waiting_slaves = 0;
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	2200      	movs	r2, #0
 80004da:	f883 21df 	strb.w	r2, [r3, #479]	; 0x1df
	sheduler->number_of_working_slaves = 0;
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	2200      	movs	r2, #0
 80004e2:	f883 21e0 	strb.w	r2, [r3, #480]	; 0x1e0
	sheduler->sheduler_state = INIT_STATE;
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	2201      	movs	r2, #1
 80004ea:	f883 21e2 	strb.w	r2, [r3, #482]	; 0x1e2
	sheduler->is_ROM_available = 1;
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	2201      	movs	r2, #1
 80004f2:	f883 21dc 	strb.w	r2, [r3, #476]	; 0x1dc
	sheduler->process_being_sent.operation_ID = 0x00;
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	2200      	movs	r2, #0
 80004fa:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
	priority_queue_init(&sheduler->operations);
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	f503 73dd 	add.w	r3, r3, #442	; 0x1ba
 8000504:	4618      	mov	r0, r3
 8000506:	f7ff fee7 	bl	80002d8 <priority_queue_init>
	priority_queue_init(&sheduler->waiting_slaves_queue);
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	f203 1399 	addw	r3, r3, #409	; 0x199
 8000510:	4618      	mov	r0, r3
 8000512:	f7ff fee1 	bl	80002d8 <priority_queue_init>
	stack_init(&sheduler->idle_slaves_stack);
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800051c:	4618      	mov	r0, r3
 800051e:	f000 f92e 	bl	800077e <stack_init>
}
 8000522:	bf00      	nop
 8000524:	3708      	adds	r7, #8
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}

0800052a <add_idle_slave>:

void add_idle_slave(ROM_sheduler* sheduler, uint8_t slave_id, uint8_t slave_num){
 800052a:	b580      	push	{r7, lr}
 800052c:	b082      	sub	sp, #8
 800052e:	af00      	add	r7, sp, #0
 8000530:	6078      	str	r0, [r7, #4]
 8000532:	460b      	mov	r3, r1
 8000534:	70fb      	strb	r3, [r7, #3]
 8000536:	4613      	mov	r3, r2
 8000538:	70bb      	strb	r3, [r7, #2]
	// TODO: add here an error state
	if(slave_num >= MAX_SLAVE_NUM)
 800053a:	78bb      	ldrb	r3, [r7, #2]
 800053c:	2b01      	cmp	r3, #1
 800053e:	d82f      	bhi.n	80005a0 <add_idle_slave+0x76>
		return;
	// increase number of saved slaves
	sheduler->number_of_slaves++;
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	f893 31dd 	ldrb.w	r3, [r3, #477]	; 0x1dd
 8000546:	3301      	adds	r3, #1
 8000548:	b2da      	uxtb	r2, r3
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	f883 21dd 	strb.w	r2, [r3, #477]	; 0x1dd
	// increase number of known idle slaves
	sheduler->number_of_idle_slaves++;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	f893 31de 	ldrb.w	r3, [r3, #478]	; 0x1de
 8000556:	3301      	adds	r3, #1
 8000558:	b2da      	uxtb	r2, r3
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	f883 21de 	strb.w	r2, [r3, #478]	; 0x1de
	// register slave to SCB
	sheduler->slave_blocks[slave_num].slave_ID = slave_id;
 8000560:	78ba      	ldrb	r2, [r7, #2]
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	78f9      	ldrb	r1, [r7, #3]
 8000566:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
	sheduler->slave_blocks[slave_num].slave_number = slave_num;
 800056a:	78bb      	ldrb	r3, [r7, #2]
 800056c:	687a      	ldr	r2, [r7, #4]
 800056e:	009b      	lsls	r3, r3, #2
 8000570:	4413      	add	r3, r2
 8000572:	78ba      	ldrb	r2, [r7, #2]
 8000574:	709a      	strb	r2, [r3, #2]
	sheduler->slave_blocks[slave_num].slave_state = SLAVE_IDLE;
 8000576:	78bb      	ldrb	r3, [r7, #2]
 8000578:	687a      	ldr	r2, [r7, #4]
 800057a:	009b      	lsls	r3, r3, #2
 800057c:	4413      	add	r3, r2
 800057e:	2200      	movs	r2, #0
 8000580:	705a      	strb	r2, [r3, #1]
	sheduler->slave_blocks[slave_num].current_opcode = 0x00;
 8000582:	78bb      	ldrb	r3, [r7, #2]
 8000584:	687a      	ldr	r2, [r7, #4]
 8000586:	009b      	lsls	r3, r3, #2
 8000588:	4413      	add	r3, r2
 800058a:	2200      	movs	r2, #0
 800058c:	70da      	strb	r2, [r3, #3]
	// push slave number to free slave stack
	stack_push(&sheduler->idle_slaves_stack, slave_num);
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000594:	78ba      	ldrb	r2, [r7, #2]
 8000596:	4611      	mov	r1, r2
 8000598:	4618      	mov	r0, r3
 800059a:	f000 f8fc 	bl	8000796 <stack_push>
 800059e:	e000      	b.n	80005a2 <add_idle_slave+0x78>
		return;
 80005a0:	bf00      	nop
}
 80005a2:	3708      	adds	r7, #8
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}

080005a8 <add_operation>:

// TODO: implement send_number_of_idle_slaves(uint8_t num)

void add_operation(ROM_sheduler* sheduler, operation_control_block new_operation){
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b084      	sub	sp, #16
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	60f8      	str	r0, [r7, #12]
 80005b0:	1d3b      	adds	r3, r7, #4
 80005b2:	e883 0006 	stmia.w	r3, {r1, r2}
	// TODO: add here an error state
	if(sheduler->number_of_available_operations >= MAX_OPERATIONS_NUM)
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	f893 31e1 	ldrb.w	r3, [r3, #481]	; 0x1e1
 80005bc:	2b3f      	cmp	r3, #63	; 0x3f
 80005be:	d830      	bhi.n	8000622 <add_operation+0x7a>
		return;
	// register operation to OCB
	sheduler->operation_blocks[sheduler->number_of_available_operations] = new_operation;
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	f893 31e1 	ldrb.w	r3, [r3, #481]	; 0x1e1
 80005c6:	4619      	mov	r1, r3
 80005c8:	68fa      	ldr	r2, [r7, #12]
 80005ca:	460b      	mov	r3, r1
 80005cc:	005b      	lsls	r3, r3, #1
 80005ce:	440b      	add	r3, r1
 80005d0:	005b      	lsls	r3, r3, #1
 80005d2:	4413      	add	r3, r2
 80005d4:	3308      	adds	r3, #8
 80005d6:	461a      	mov	r2, r3
 80005d8:	1d3b      	adds	r3, r7, #4
 80005da:	6818      	ldr	r0, [r3, #0]
 80005dc:	6010      	str	r0, [r2, #0]
 80005de:	889b      	ldrh	r3, [r3, #4]
 80005e0:	8093      	strh	r3, [r2, #4]
	sheduler->operation_blocks[sheduler->number_of_available_operations].number_of_working_slaves = 0x00;
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	f893 31e1 	ldrb.w	r3, [r3, #481]	; 0x1e1
 80005e8:	4619      	mov	r1, r3
 80005ea:	68fa      	ldr	r2, [r7, #12]
 80005ec:	460b      	mov	r3, r1
 80005ee:	005b      	lsls	r3, r3, #1
 80005f0:	440b      	add	r3, r1
 80005f2:	005b      	lsls	r3, r3, #1
 80005f4:	4413      	add	r3, r2
 80005f6:	330c      	adds	r3, #12
 80005f8:	2200      	movs	r2, #0
 80005fa:	701a      	strb	r2, [r3, #0]
	// push operation number to operation queue
	priority_queue_push(&sheduler->operations, sheduler->number_of_available_operations, new_operation.operation_priority);
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	f503 70dd 	add.w	r0, r3, #442	; 0x1ba
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	f893 31e1 	ldrb.w	r3, [r3, #481]	; 0x1e1
 8000608:	797a      	ldrb	r2, [r7, #5]
 800060a:	4619      	mov	r1, r3
 800060c:	f7ff fe70 	bl	80002f0 <priority_queue_push>
	// increase number of available operations
	sheduler->number_of_available_operations++;
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	f893 31e1 	ldrb.w	r3, [r3, #481]	; 0x1e1
 8000616:	3301      	adds	r3, #1
 8000618:	b2da      	uxtb	r2, r3
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	f883 21e1 	strb.w	r2, [r3, #481]	; 0x1e1
 8000620:	e000      	b.n	8000624 <add_operation+0x7c>
		return;
 8000622:	bf00      	nop
}
 8000624:	3710      	adds	r7, #16
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}

0800062a <give_slave_opcode>:

// remove slave from the idle stack then push it to the waiting queue with the opcode to be sent
void give_slave_opcode(ROM_sheduler* sheduler, operation_control_block slave_operation, uint8_t slave_recieving_number){
 800062a:	b580      	push	{r7, lr}
 800062c:	b086      	sub	sp, #24
 800062e:	af00      	add	r7, sp, #0
 8000630:	60f8      	str	r0, [r7, #12]
 8000632:	1d38      	adds	r0, r7, #4
 8000634:	e880 0006 	stmia.w	r0, {r1, r2}
 8000638:	70fb      	strb	r3, [r7, #3]
	// TODO: add here an error state
	if(sheduler->number_of_idle_slaves <= 0)
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	f893 31de 	ldrb.w	r3, [r3, #478]	; 0x1de
 8000640:	2b00      	cmp	r3, #0
 8000642:	d071      	beq.n	8000728 <give_slave_opcode+0xfe>
		return;
	// change slave state in SCB
#if SCHEDULING_TECHNIQUE == SCHEDULE_ON_NUMBERS

#else
	for(int i=0; i<slave_operation.number_of_working_slaves; i++){
 8000644:	2300      	movs	r3, #0
 8000646:	617b      	str	r3, [r7, #20]
 8000648:	e002      	b.n	8000650 <give_slave_opcode+0x26>
 800064a:	697b      	ldr	r3, [r7, #20]
 800064c:	3301      	adds	r3, #1
 800064e:	617b      	str	r3, [r7, #20]
 8000650:	7a3b      	ldrb	r3, [r7, #8]
 8000652:	461a      	mov	r2, r3
 8000654:	697b      	ldr	r3, [r7, #20]
 8000656:	4293      	cmp	r3, r2
 8000658:	dbf7      	blt.n	800064a <give_slave_opcode+0x20>

	}
	sheduler->slave_blocks[slave_recieving_number].slave_state = SLAVE_WAITING;
 800065a:	78fb      	ldrb	r3, [r7, #3]
 800065c:	68fa      	ldr	r2, [r7, #12]
 800065e:	009b      	lsls	r3, r3, #2
 8000660:	4413      	add	r3, r2
 8000662:	2201      	movs	r2, #1
 8000664:	705a      	strb	r2, [r3, #1]
	// assign slave the operation code in its SCB
	sheduler->slave_blocks[slave_recieving_number].current_opcode = slave_operation.operation_ID;
 8000666:	78fb      	ldrb	r3, [r7, #3]
 8000668:	7939      	ldrb	r1, [r7, #4]
 800066a:	68fa      	ldr	r2, [r7, #12]
 800066c:	009b      	lsls	r3, r3, #2
 800066e:	4413      	add	r3, r2
 8000670:	460a      	mov	r2, r1
 8000672:	70da      	strb	r2, [r3, #3]
	// push slave number to waiting slaves queue and use operation priority
	priority_queue_push(&sheduler->waiting_slaves_queue, slave_recieving_number, slave_operation.operation_priority);
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	f203 1399 	addw	r3, r3, #409	; 0x199
 800067a:	797a      	ldrb	r2, [r7, #5]
 800067c:	78f9      	ldrb	r1, [r7, #3]
 800067e:	4618      	mov	r0, r3
 8000680:	f7ff fe36 	bl	80002f0 <priority_queue_push>
	// increase number of waiting slaves
	sheduler->number_of_waiting_slaves++;
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	f893 31df 	ldrb.w	r3, [r3, #479]	; 0x1df
 800068a:	3301      	adds	r3, #1
 800068c:	b2da      	uxtb	r2, r3
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	f883 21df 	strb.w	r2, [r3, #479]	; 0x1df
	// reduce idle slaves number
	sheduler->number_of_idle_slaves--;
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	f893 31de 	ldrb.w	r3, [r3, #478]	; 0x1de
 800069a:	3b01      	subs	r3, #1
 800069c:	b2da      	uxtb	r2, r3
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	f883 21de 	strb.w	r2, [r3, #478]	; 0x1de
	// decrement number of slaves left
	sheduler->process_being_sent.number_of_working_slaves--;
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	f893 31e8 	ldrb.w	r3, [r3, #488]	; 0x1e8
 80006aa:	3b01      	subs	r3, #1
 80006ac:	b2da      	uxtb	r2, r3
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
	// if the operation was sent to the required slaves
	if(sheduler->process_being_sent.number_of_working_slaves == 0){
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	f893 31e8 	ldrb.w	r3, [r3, #488]	; 0x1e8
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d135      	bne.n	800072a <give_slave_opcode+0x100>
		// set process to be sent to 0 again
		sheduler->process_being_sent.operation_ID = 0x00;
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	2200      	movs	r2, #0
 80006c2:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
		// decrement number of available operations
		sheduler->number_of_available_operations--;
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	f893 31e1 	ldrb.w	r3, [r3, #481]	; 0x1e1
 80006cc:	3b01      	subs	r3, #1
 80006ce:	b2da      	uxtb	r2, r3
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	f883 21e1 	strb.w	r2, [r3, #481]	; 0x1e1
		// remove the operation from queue
		priority_queue_pop(&sheduler->operations);
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	f503 73dd 	add.w	r3, r3, #442	; 0x1ba
 80006dc:	4618      	mov	r0, r3
 80006de:	f7ff fe40 	bl	8000362 <priority_queue_pop>
		// if we can still send operations, set process being set
		if(sheduler->number_of_idle_slaves != 0 && sheduler->number_of_available_operations != 0)
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	f893 31de 	ldrb.w	r3, [r3, #478]	; 0x1de
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d01e      	beq.n	800072a <give_slave_opcode+0x100>
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	f893 31e1 	ldrb.w	r3, [r3, #481]	; 0x1e1
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d019      	beq.n	800072a <give_slave_opcode+0x100>
			sheduler->process_being_sent = sheduler->operation_blocks[priority_queue_peak(&sheduler->operations)];
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	f503 73dd 	add.w	r3, r3, #442	; 0x1ba
 80006fc:	4618      	mov	r0, r3
 80006fe:	f7ff fe57 	bl	80003b0 <priority_queue_peak>
 8000702:	4603      	mov	r3, r0
 8000704:	4618      	mov	r0, r3
 8000706:	68fa      	ldr	r2, [r7, #12]
 8000708:	68f9      	ldr	r1, [r7, #12]
 800070a:	4603      	mov	r3, r0
 800070c:	005b      	lsls	r3, r3, #1
 800070e:	4403      	add	r3, r0
 8000710:	005b      	lsls	r3, r3, #1
 8000712:	440b      	add	r3, r1
 8000714:	f103 0108 	add.w	r1, r3, #8
 8000718:	f502 73f2 	add.w	r3, r2, #484	; 0x1e4
 800071c:	460a      	mov	r2, r1
 800071e:	6811      	ldr	r1, [r2, #0]
 8000720:	6019      	str	r1, [r3, #0]
 8000722:	8892      	ldrh	r2, [r2, #4]
 8000724:	809a      	strh	r2, [r3, #4]
 8000726:	e000      	b.n	800072a <give_slave_opcode+0x100>
		return;
 8000728:	bf00      	nop
	}
#endif
}
 800072a:	3718      	adds	r7, #24
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}

08000730 <give_slave_access_to_ROM>:
// void add_waiting_slave(ROM_sheduler* sheduler, uint8_t acknowledged_opcode){
// 	sheduler->number_of_idle_slaves--;
// 	add_to_waiting_slaves(acknowledged_opcode);
// }

void give_slave_access_to_ROM(ROM_sheduler* sheduler){
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
	// pop slave from its waiting queue and set the current_slave_in_ROM to it
	sheduler->current_slave_in_ROM = priority_queue_pop(&sheduler->waiting_slaves_queue);
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	f203 1399 	addw	r3, r3, #409	; 0x199
 800073e:	4618      	mov	r0, r3
 8000740:	f7ff fe0f 	bl	8000362 <priority_queue_pop>
 8000744:	4603      	mov	r3, r0
 8000746:	461a      	mov	r2, r3
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	f883 21db 	strb.w	r2, [r3, #475]	; 0x1db
	// decremnt number of waiting slaves
	sheduler->number_of_waiting_slaves--;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	f893 31df 	ldrb.w	r3, [r3, #479]	; 0x1df
 8000754:	3b01      	subs	r3, #1
 8000756:	b2da      	uxtb	r2, r3
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	f883 21df 	strb.w	r2, [r3, #479]	; 0x1df
	// change the slave's state in the block
	sheduler->slave_blocks[sheduler->current_slave_in_ROM].slave_state = SLAVE_IN_ROM;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	f893 31db 	ldrb.w	r3, [r3, #475]	; 0x1db
 8000764:	687a      	ldr	r2, [r7, #4]
 8000766:	009b      	lsls	r3, r3, #2
 8000768:	4413      	add	r3, r2
 800076a:	2202      	movs	r2, #2
 800076c:	705a      	strb	r2, [r3, #1]
	// set ROM is not available
	sheduler->is_ROM_available = 0;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	2200      	movs	r2, #0
 8000772:	f883 21dc 	strb.w	r2, [r3, #476]	; 0x1dc
}
 8000776:	bf00      	nop
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}

0800077e <stack_init>:
 *      Author: ahmad
 */

#include "stack.h"

void stack_init(stack* _stack){
 800077e:	b480      	push	{r7}
 8000780:	b083      	sub	sp, #12
 8000782:	af00      	add	r7, sp, #0
 8000784:	6078      	str	r0, [r7, #4]
	_stack->top = 0;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	2200      	movs	r2, #0
 800078a:	701a      	strb	r2, [r3, #0]
}
 800078c:	bf00      	nop
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	bc80      	pop	{r7}
 8000794:	4770      	bx	lr

08000796 <stack_push>:

void stack_push(stack* _stack, uint8_t item){
 8000796:	b480      	push	{r7}
 8000798:	b083      	sub	sp, #12
 800079a:	af00      	add	r7, sp, #0
 800079c:	6078      	str	r0, [r7, #4]
 800079e:	460b      	mov	r3, r1
 80007a0:	70fb      	strb	r3, [r7, #3]
	// TODO: add here an error state
	if(_stack->top >= MAX_ITEM_NUM)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	2b0f      	cmp	r3, #15
 80007a8:	d80d      	bhi.n	80007c6 <stack_push+0x30>
		return;
	// add item to the top of stack, top = number of elements
	_stack->item[_stack->top] = item;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	461a      	mov	r2, r3
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	4413      	add	r3, r2
 80007b4:	78fa      	ldrb	r2, [r7, #3]
 80007b6:	705a      	strb	r2, [r3, #1]
	_stack->top++;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	3301      	adds	r3, #1
 80007be:	b2da      	uxtb	r2, r3
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	701a      	strb	r2, [r3, #0]
 80007c4:	e000      	b.n	80007c8 <stack_push+0x32>
		return;
 80007c6:	bf00      	nop
}
 80007c8:	370c      	adds	r7, #12
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bc80      	pop	{r7}
 80007ce:	4770      	bx	lr

080007d0 <stack_pop>:

uint8_t stack_pop(stack* _stack){
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
	// TODO: add here an error state
	if(_stack->top <= 0)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d101      	bne.n	80007e4 <stack_pop+0x14>
			return 0;
 80007e0:	2300      	movs	r3, #0
 80007e2:	e00b      	b.n	80007fc <stack_pop+0x2c>
	// decrement top index, top becomes the last element
	_stack->top--;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	3b01      	subs	r3, #1
 80007ea:	b2da      	uxtb	r2, r3
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	701a      	strb	r2, [r3, #0]
	return _stack->item[_stack->top];
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	461a      	mov	r2, r3
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	4413      	add	r3, r2
 80007fa:	785b      	ldrb	r3, [r3, #1]
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	370c      	adds	r7, #12
 8000800:	46bd      	mov	sp, r7
 8000802:	bc80      	pop	{r7}
 8000804:	4770      	bx	lr

08000806 <stack_peak>:

uint8_t stack_peak(stack* _stack){
 8000806:	b480      	push	{r7}
 8000808:	b083      	sub	sp, #12
 800080a:	af00      	add	r7, sp, #0
 800080c:	6078      	str	r0, [r7, #4]
	return _stack->item[_stack->top-1];
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	3b01      	subs	r3, #1
 8000814:	687a      	ldr	r2, [r7, #4]
 8000816:	4413      	add	r3, r2
 8000818:	785b      	ldrb	r3, [r3, #1]
}
 800081a:	4618      	mov	r0, r3
 800081c:	370c      	adds	r7, #12
 800081e:	46bd      	mov	sp, r7
 8000820:	bc80      	pop	{r7}
 8000822:	4770      	bx	lr

08000824 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800082a:	f000 fbdd 	bl	8000fe8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800082e:	f000 f843 	bl	80008b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000832:	f000 f90b 	bl	8000a4c <MX_GPIO_Init>
  MX_CAN_Init();
 8000836:	f000 f885 	bl	8000944 <MX_CAN_Init>
  MX_TIM2_Init();
 800083a:	f000 f8b9 	bl	80009b0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  Can_Filter_Config(&hcan, master);
 800083e:	2101      	movs	r1, #1
 8000840:	4819      	ldr	r0, [pc, #100]	; (80008a8 <main+0x84>)
 8000842:	f7ff fc83 	bl	800014c <Can_Filter_Config>
  // select pins for initialization
  sheduler_init(&sheduler);
 8000846:	4819      	ldr	r0, [pc, #100]	; (80008ac <main+0x88>)
 8000848:	f7ff fe31 	bl	80004ae <sheduler_init>
  // create 2 dummy operations then add it to the operation priority queue
  // this approach is used since the interface microcontroller is not ready
  operation_control_block operation1;
  operation1.operation_ID = 0x00;
 800084c:	2300      	movs	r3, #0
 800084e:	723b      	strb	r3, [r7, #8]
  operation1.operation_length = 0x3724;
 8000850:	f243 7324 	movw	r3, #14116	; 0x3724
 8000854:	817b      	strh	r3, [r7, #10]
  operation1.number_of_working_slaves = 1;
 8000856:	2301      	movs	r3, #1
 8000858:	733b      	strb	r3, [r7, #12]
  operation1.operation_priority = 1;
 800085a:	2301      	movs	r3, #1
 800085c:	727b      	strb	r3, [r7, #9]
  operation_control_block operation2;
  operation2.operation_ID = 0x01;
 800085e:	2301      	movs	r3, #1
 8000860:	703b      	strb	r3, [r7, #0]
  operation2.operation_length = 0x3724;
 8000862:	f243 7324 	movw	r3, #14116	; 0x3724
 8000866:	807b      	strh	r3, [r7, #2]
  operation2.number_of_working_slaves = 1;
 8000868:	2301      	movs	r3, #1
 800086a:	713b      	strb	r3, [r7, #4]
  operation2.operation_priority = 1;
 800086c:	2301      	movs	r3, #1
 800086e:	707b      	strb	r3, [r7, #1]
  add_operation(&sheduler, operation1);
 8000870:	f107 0308 	add.w	r3, r7, #8
 8000874:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000878:	480c      	ldr	r0, [pc, #48]	; (80008ac <main+0x88>)
 800087a:	f7ff fe95 	bl	80005a8 <add_operation>
  add_operation(&sheduler, operation2);
 800087e:	463b      	mov	r3, r7
 8000880:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000884:	4809      	ldr	r0, [pc, #36]	; (80008ac <main+0x88>)
 8000886:	f7ff fe8f 	bl	80005a8 <add_operation>

  // initiate can receive callback
  Can_InterruptCallBack(system_callback);
 800088a:	4809      	ldr	r0, [pc, #36]	; (80008b0 <main+0x8c>)
 800088c:	f7ff fcfa 	bl	8000284 <Can_InterruptCallBack>
  // select the first slave
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000890:	2200      	movs	r2, #0
 8000892:	2180      	movs	r1, #128	; 0x80
 8000894:	4807      	ldr	r0, [pc, #28]	; (80008b4 <main+0x90>)
 8000896:	f001 fcdb 	bl	8002250 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 800089a:	2201      	movs	r2, #1
 800089c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008a0:	4804      	ldr	r0, [pc, #16]	; (80008b4 <main+0x90>)
 80008a2:	f001 fcd5 	bl	8002250 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
 80008a6:	e7fe      	b.n	80008a6 <main+0x82>
 80008a8:	20000074 	.word	0x20000074
 80008ac:	200000e4 	.word	0x200000e4
 80008b0:	08000b7d 	.word	0x08000b7d
 80008b4:	40010c00 	.word	0x40010c00

080008b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b090      	sub	sp, #64	; 0x40
 80008bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008be:	f107 0318 	add.w	r3, r7, #24
 80008c2:	2228      	movs	r2, #40	; 0x28
 80008c4:	2100      	movs	r1, #0
 80008c6:	4618      	mov	r0, r3
 80008c8:	f002 fb24 	bl	8002f14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008cc:	1d3b      	adds	r3, r7, #4
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]
 80008d4:	609a      	str	r2, [r3, #8]
 80008d6:	60da      	str	r2, [r3, #12]
 80008d8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008da:	2301      	movs	r3, #1
 80008dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80008e4:	2300      	movs	r3, #0
 80008e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008e8:	2301      	movs	r3, #1
 80008ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ec:	2302      	movs	r3, #2
 80008ee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80008f6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80008fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008fc:	f107 0318 	add.w	r3, r7, #24
 8000900:	4618      	mov	r0, r3
 8000902:	f001 fcbd 	bl	8002280 <HAL_RCC_OscConfig>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800090c:	f000 fa76 	bl	8000dfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000910:	230f      	movs	r3, #15
 8000912:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000914:	2302      	movs	r3, #2
 8000916:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000918:	2300      	movs	r3, #0
 800091a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800091c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000920:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000922:	2300      	movs	r3, #0
 8000924:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000926:	1d3b      	adds	r3, r7, #4
 8000928:	2102      	movs	r1, #2
 800092a:	4618      	mov	r0, r3
 800092c:	f001 ff2a 	bl	8002784 <HAL_RCC_ClockConfig>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000936:	f000 fa61 	bl	8000dfc <Error_Handler>
  }
}
 800093a:	bf00      	nop
 800093c:	3740      	adds	r7, #64	; 0x40
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
	...

08000944 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000948:	4b17      	ldr	r3, [pc, #92]	; (80009a8 <MX_CAN_Init+0x64>)
 800094a:	4a18      	ldr	r2, [pc, #96]	; (80009ac <MX_CAN_Init+0x68>)
 800094c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 800094e:	4b16      	ldr	r3, [pc, #88]	; (80009a8 <MX_CAN_Init+0x64>)
 8000950:	2212      	movs	r2, #18
 8000952:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000954:	4b14      	ldr	r3, [pc, #80]	; (80009a8 <MX_CAN_Init+0x64>)
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800095a:	4b13      	ldr	r3, [pc, #76]	; (80009a8 <MX_CAN_Init+0x64>)
 800095c:	2200      	movs	r2, #0
 800095e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000960:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <MX_CAN_Init+0x64>)
 8000962:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000966:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000968:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <MX_CAN_Init+0x64>)
 800096a:	2200      	movs	r2, #0
 800096c:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800096e:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <MX_CAN_Init+0x64>)
 8000970:	2200      	movs	r2, #0
 8000972:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000974:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <MX_CAN_Init+0x64>)
 8000976:	2200      	movs	r2, #0
 8000978:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800097a:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <MX_CAN_Init+0x64>)
 800097c:	2200      	movs	r2, #0
 800097e:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000980:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <MX_CAN_Init+0x64>)
 8000982:	2200      	movs	r2, #0
 8000984:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000986:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <MX_CAN_Init+0x64>)
 8000988:	2200      	movs	r2, #0
 800098a:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800098c:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <MX_CAN_Init+0x64>)
 800098e:	2200      	movs	r2, #0
 8000990:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000992:	4805      	ldr	r0, [pc, #20]	; (80009a8 <MX_CAN_Init+0x64>)
 8000994:	f000 fb8a 	bl	80010ac <HAL_CAN_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 800099e:	f000 fa2d 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	20000074 	.word	0x20000074
 80009ac:	40006400 	.word	0x40006400

080009b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b086      	sub	sp, #24
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009b6:	f107 0308 	add.w	r3, r7, #8
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	605a      	str	r2, [r3, #4]
 80009c0:	609a      	str	r2, [r3, #8]
 80009c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009c4:	463b      	mov	r3, r7
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009cc:	4b1e      	ldr	r3, [pc, #120]	; (8000a48 <MX_TIM2_Init+0x98>)
 80009ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 80009d4:	4b1c      	ldr	r3, [pc, #112]	; (8000a48 <MX_TIM2_Init+0x98>)
 80009d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009da:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009dc:	4b1a      	ldr	r3, [pc, #104]	; (8000a48 <MX_TIM2_Init+0x98>)
 80009de:	2200      	movs	r2, #0
 80009e0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 18000;
 80009e2:	4b19      	ldr	r3, [pc, #100]	; (8000a48 <MX_TIM2_Init+0x98>)
 80009e4:	f244 6250 	movw	r2, #18000	; 0x4650
 80009e8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ea:	4b17      	ldr	r3, [pc, #92]	; (8000a48 <MX_TIM2_Init+0x98>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009f0:	4b15      	ldr	r3, [pc, #84]	; (8000a48 <MX_TIM2_Init+0x98>)
 80009f2:	2280      	movs	r2, #128	; 0x80
 80009f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009f6:	4814      	ldr	r0, [pc, #80]	; (8000a48 <MX_TIM2_Init+0x98>)
 80009f8:	f002 f820 	bl	8002a3c <HAL_TIM_Base_Init>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000a02:	f000 f9fb 	bl	8000dfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a0a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a0c:	f107 0308 	add.w	r3, r7, #8
 8000a10:	4619      	mov	r1, r3
 8000a12:	480d      	ldr	r0, [pc, #52]	; (8000a48 <MX_TIM2_Init+0x98>)
 8000a14:	f002 f861 	bl	8002ada <HAL_TIM_ConfigClockSource>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000a1e:	f000 f9ed 	bl	8000dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a22:	2300      	movs	r3, #0
 8000a24:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a26:	2300      	movs	r3, #0
 8000a28:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a2a:	463b      	mov	r3, r7
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4806      	ldr	r0, [pc, #24]	; (8000a48 <MX_TIM2_Init+0x98>)
 8000a30:	f002 fa12 	bl	8002e58 <HAL_TIMEx_MasterConfigSynchronization>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000a3a:	f000 f9df 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a3e:	bf00      	nop
 8000a40:	3718      	adds	r7, #24
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	2000009c 	.word	0x2000009c

08000a4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b088      	sub	sp, #32
 8000a50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a52:	f107 0310 	add.w	r3, r7, #16
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a60:	4b42      	ldr	r3, [pc, #264]	; (8000b6c <MX_GPIO_Init+0x120>)
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	4a41      	ldr	r2, [pc, #260]	; (8000b6c <MX_GPIO_Init+0x120>)
 8000a66:	f043 0310 	orr.w	r3, r3, #16
 8000a6a:	6193      	str	r3, [r2, #24]
 8000a6c:	4b3f      	ldr	r3, [pc, #252]	; (8000b6c <MX_GPIO_Init+0x120>)
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	f003 0310 	and.w	r3, r3, #16
 8000a74:	60fb      	str	r3, [r7, #12]
 8000a76:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a78:	4b3c      	ldr	r3, [pc, #240]	; (8000b6c <MX_GPIO_Init+0x120>)
 8000a7a:	699b      	ldr	r3, [r3, #24]
 8000a7c:	4a3b      	ldr	r2, [pc, #236]	; (8000b6c <MX_GPIO_Init+0x120>)
 8000a7e:	f043 0320 	orr.w	r3, r3, #32
 8000a82:	6193      	str	r3, [r2, #24]
 8000a84:	4b39      	ldr	r3, [pc, #228]	; (8000b6c <MX_GPIO_Init+0x120>)
 8000a86:	699b      	ldr	r3, [r3, #24]
 8000a88:	f003 0320 	and.w	r3, r3, #32
 8000a8c:	60bb      	str	r3, [r7, #8]
 8000a8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a90:	4b36      	ldr	r3, [pc, #216]	; (8000b6c <MX_GPIO_Init+0x120>)
 8000a92:	699b      	ldr	r3, [r3, #24]
 8000a94:	4a35      	ldr	r2, [pc, #212]	; (8000b6c <MX_GPIO_Init+0x120>)
 8000a96:	f043 0304 	orr.w	r3, r3, #4
 8000a9a:	6193      	str	r3, [r2, #24]
 8000a9c:	4b33      	ldr	r3, [pc, #204]	; (8000b6c <MX_GPIO_Init+0x120>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	f003 0304 	and.w	r3, r3, #4
 8000aa4:	607b      	str	r3, [r7, #4]
 8000aa6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa8:	4b30      	ldr	r3, [pc, #192]	; (8000b6c <MX_GPIO_Init+0x120>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	4a2f      	ldr	r2, [pc, #188]	; (8000b6c <MX_GPIO_Init+0x120>)
 8000aae:	f043 0308 	orr.w	r3, r3, #8
 8000ab2:	6193      	str	r3, [r2, #24]
 8000ab4:	4b2d      	ldr	r3, [pc, #180]	; (8000b6c <MX_GPIO_Init+0x120>)
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	f003 0308 	and.w	r3, r3, #8
 8000abc:	603b      	str	r3, [r7, #0]
 8000abe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ac6:	482a      	ldr	r0, [pc, #168]	; (8000b70 <MX_GPIO_Init+0x124>)
 8000ac8:	f001 fbc2 	bl	8002250 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000acc:	2201      	movs	r2, #1
 8000ace:	2120      	movs	r1, #32
 8000ad0:	4828      	ldr	r0, [pc, #160]	; (8000b74 <MX_GPIO_Init+0x128>)
 8000ad2:	f001 fbbd 	bl	8002250 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10, GPIO_PIN_RESET);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
 8000adc:	4825      	ldr	r0, [pc, #148]	; (8000b74 <MX_GPIO_Init+0x128>)
 8000ade:	f001 fbb7 	bl	8002250 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	f44f 71cc 	mov.w	r1, #408	; 0x198
 8000ae8:	4823      	ldr	r0, [pc, #140]	; (8000b78 <MX_GPIO_Init+0x12c>)
 8000aea:	f001 fbb1 	bl	8002250 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000aee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000af2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af4:	2301      	movs	r3, #1
 8000af6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afc:	2302      	movs	r3, #2
 8000afe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b00:	f107 0310 	add.w	r3, r7, #16
 8000b04:	4619      	mov	r1, r3
 8000b06:	481a      	ldr	r0, [pc, #104]	; (8000b70 <MX_GPIO_Init+0x124>)
 8000b08:	f001 fa1e 	bl	8001f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b0c:	2320      	movs	r3, #32
 8000b0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b10:	2301      	movs	r3, #1
 8000b12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b14:	2301      	movs	r3, #1
 8000b16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1c:	f107 0310 	add.w	r3, r7, #16
 8000b20:	4619      	mov	r1, r3
 8000b22:	4814      	ldr	r0, [pc, #80]	; (8000b74 <MX_GPIO_Init+0x128>)
 8000b24:	f001 fa10 	bl	8001f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8000b28:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000b2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b36:	2302      	movs	r3, #2
 8000b38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3a:	f107 0310 	add.w	r3, r7, #16
 8000b3e:	4619      	mov	r1, r3
 8000b40:	480c      	ldr	r0, [pc, #48]	; (8000b74 <MX_GPIO_Init+0x128>)
 8000b42:	f001 fa01 	bl	8001f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_8;
 8000b46:	f44f 73cc 	mov.w	r3, #408	; 0x198
 8000b4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b54:	2302      	movs	r3, #2
 8000b56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b58:	f107 0310 	add.w	r3, r7, #16
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4806      	ldr	r0, [pc, #24]	; (8000b78 <MX_GPIO_Init+0x12c>)
 8000b60:	f001 f9f2 	bl	8001f48 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b64:	bf00      	nop
 8000b66:	3720      	adds	r7, #32
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40021000 	.word	0x40021000
 8000b70:	40011000 	.word	0x40011000
 8000b74:	40010800 	.word	0x40010800
 8000b78:	40010c00 	.word	0x40010c00

08000b7c <system_callback>:

/* USER CODE BEGIN 4 */
void system_callback(){
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08a      	sub	sp, #40	; 0x28
 8000b80:	af02      	add	r7, sp, #8
	// deselect any slave
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3 | GPIO_PIN_4, GPIO_PIN_RESET);
 8000b82:	2200      	movs	r2, #0
 8000b84:	2118      	movs	r1, #24
 8000b86:	4894      	ldr	r0, [pc, #592]	; (8000dd8 <system_callback+0x25c>)
 8000b88:	f001 fb62 	bl	8002250 <HAL_GPIO_WritePin>
	if(sheduler.sheduler_state == INIT_STATE){
 8000b8c:	4b93      	ldr	r3, [pc, #588]	; (8000ddc <system_callback+0x260>)
 8000b8e:	f893 31e2 	ldrb.w	r3, [r3, #482]	; 0x1e2
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	d118      	bne.n	8000bc8 <system_callback+0x4c>
		// add slave to sheduler
		add_idle_slave(&sheduler, RxHeader.StdId, sheduler.number_of_slaves);
 8000b96:	4b92      	ldr	r3, [pc, #584]	; (8000de0 <system_callback+0x264>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	4a8f      	ldr	r2, [pc, #572]	; (8000ddc <system_callback+0x260>)
 8000b9e:	f892 21dd 	ldrb.w	r2, [r2, #477]	; 0x1dd
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	488d      	ldr	r0, [pc, #564]	; (8000ddc <system_callback+0x260>)
 8000ba6:	f7ff fcc0 	bl	800052a <add_idle_slave>
		// if the next slave is the last one, change sheduler state
		if(sheduler.number_of_slaves == MAX_SLAVE_NUM)
 8000baa:	4b8c      	ldr	r3, [pc, #560]	; (8000ddc <system_callback+0x260>)
 8000bac:	f893 31dd 	ldrb.w	r3, [r3, #477]	; 0x1dd
 8000bb0:	2b02      	cmp	r3, #2
 8000bb2:	d104      	bne.n	8000bbe <system_callback+0x42>
			sheduler.sheduler_state = SENDING_CODE_STATE;
 8000bb4:	4b89      	ldr	r3, [pc, #548]	; (8000ddc <system_callback+0x260>)
 8000bb6:	2203      	movs	r2, #3
 8000bb8:	f883 21e2 	strb.w	r2, [r3, #482]	; 0x1e2
 8000bbc:	e004      	b.n	8000bc8 <system_callback+0x4c>
		else
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	2180      	movs	r1, #128	; 0x80
 8000bc2:	4885      	ldr	r0, [pc, #532]	; (8000dd8 <system_callback+0x25c>)
 8000bc4:	f001 fb44 	bl	8002250 <HAL_GPIO_WritePin>
	}
	// slave was just reset and is now acknowledging it
	if(sheduler.sheduler_state == SENDING_CODE_STATE){
 8000bc8:	4b84      	ldr	r3, [pc, #528]	; (8000ddc <system_callback+0x260>)
 8000bca:	f893 31e2 	ldrb.w	r3, [r3, #482]	; 0x1e2
 8000bce:	2b03      	cmp	r3, #3
 8000bd0:	d177      	bne.n	8000cc2 <system_callback+0x146>
			sheduler.process_being_sent = sheduler.operation_blocks[priority_queue_peak(&sheduler.operations)];
 8000bd2:	4884      	ldr	r0, [pc, #528]	; (8000de4 <system_callback+0x268>)
 8000bd4:	f7ff fbec 	bl	80003b0 <priority_queue_peak>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	4618      	mov	r0, r3
 8000bdc:	4a7f      	ldr	r2, [pc, #508]	; (8000ddc <system_callback+0x260>)
 8000bde:	497f      	ldr	r1, [pc, #508]	; (8000ddc <system_callback+0x260>)
 8000be0:	4603      	mov	r3, r0
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	4403      	add	r3, r0
 8000be6:	005b      	lsls	r3, r3, #1
 8000be8:	440b      	add	r3, r1
 8000bea:	f103 0108 	add.w	r1, r3, #8
 8000bee:	f502 73f2 	add.w	r3, r2, #484	; 0x1e4
 8000bf2:	460a      	mov	r2, r1
 8000bf4:	6810      	ldr	r0, [r2, #0]
 8000bf6:	6018      	str	r0, [r3, #0]
 8000bf8:	8892      	ldrh	r2, [r2, #4]
 8000bfa:	809a      	strh	r2, [r3, #4]
		uint8_t operation_id = priority_queue_peak(&sheduler.operations);
 8000bfc:	4879      	ldr	r0, [pc, #484]	; (8000de4 <system_callback+0x268>)
 8000bfe:	f7ff fbd7 	bl	80003b0 <priority_queue_peak>
 8000c02:	4603      	mov	r3, r0
 8000c04:	777b      	strb	r3, [r7, #29]
		uint8_t slave_recieving_number = stack_peak(&sheduler.idle_slaves_stack);
 8000c06:	4878      	ldr	r0, [pc, #480]	; (8000de8 <system_callback+0x26c>)
 8000c08:	f7ff fdfd 	bl	8000806 <stack_peak>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	773b      	strb	r3, [r7, #28]
		uint8_t data[8];
		// if the current operation needs more slaves than available, move on
		if(sheduler.number_of_idle_slaves < sheduler.process_being_sent.number_of_working_slaves){
 8000c10:	4b72      	ldr	r3, [pc, #456]	; (8000ddc <system_callback+0x260>)
 8000c12:	f893 21de 	ldrb.w	r2, [r3, #478]	; 0x1de
 8000c16:	4b71      	ldr	r3, [pc, #452]	; (8000ddc <system_callback+0x260>)
 8000c18:	f893 31e8 	ldrb.w	r3, [r3, #488]	; 0x1e8
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d20f      	bcs.n	8000c40 <system_callback+0xc4>
			if(sheduler.process_being_sent.number_of_working_slaves > 1)
 8000c20:	4b6e      	ldr	r3, [pc, #440]	; (8000ddc <system_callback+0x260>)
 8000c22:	f893 31e8 	ldrb.w	r3, [r3, #488]	; 0x1e8
 8000c26:	2b01      	cmp	r3, #1
 8000c28:	d905      	bls.n	8000c36 <system_callback+0xba>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c30:	486e      	ldr	r0, [pc, #440]	; (8000dec <system_callback+0x270>)
 8000c32:	f001 fb0d 	bl	8002250 <HAL_GPIO_WritePin>
			sheduler.sheduler_state = WAITING_SIG_STATE;
 8000c36:	4b69      	ldr	r3, [pc, #420]	; (8000ddc <system_callback+0x260>)
 8000c38:	2205      	movs	r2, #5
 8000c3a:	f883 21e2 	strb.w	r2, [r3, #482]	; 0x1e2
			return;
 8000c3e:	e0c7      	b.n	8000dd0 <system_callback+0x254>
		}
		if(sheduler.number_of_idle_slaves == 1 && slave_recieving_number == 0)
 8000c40:	4b66      	ldr	r3, [pc, #408]	; (8000ddc <system_callback+0x260>)
 8000c42:	f893 31de 	ldrb.w	r3, [r3, #478]	; 0x1de
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d108      	bne.n	8000c5c <system_callback+0xe0>
 8000c4a:	7f3b      	ldrb	r3, [r7, #28]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d105      	bne.n	8000c5c <system_callback+0xe0>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000c50:	2200      	movs	r2, #0
 8000c52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c56:	4865      	ldr	r0, [pc, #404]	; (8000dec <system_callback+0x270>)
 8000c58:	f001 fafa 	bl	8002250 <HAL_GPIO_WritePin>
		// extract operation data to be sent
		data[0] = sheduler.operation_blocks[operation_id].operation_ID;
 8000c5c:	7f7a      	ldrb	r2, [r7, #29]
 8000c5e:	495f      	ldr	r1, [pc, #380]	; (8000ddc <system_callback+0x260>)
 8000c60:	4613      	mov	r3, r2
 8000c62:	005b      	lsls	r3, r3, #1
 8000c64:	4413      	add	r3, r2
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	440b      	add	r3, r1
 8000c6a:	3308      	adds	r3, #8
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	753b      	strb	r3, [r7, #20]
		data[1] = (uint8_t)(sheduler.operation_blocks[operation_id].operation_length >> 8);
 8000c70:	7f7a      	ldrb	r2, [r7, #29]
 8000c72:	495a      	ldr	r1, [pc, #360]	; (8000ddc <system_callback+0x260>)
 8000c74:	4613      	mov	r3, r2
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	4413      	add	r3, r2
 8000c7a:	005b      	lsls	r3, r3, #1
 8000c7c:	440b      	add	r3, r1
 8000c7e:	330a      	adds	r3, #10
 8000c80:	881b      	ldrh	r3, [r3, #0]
 8000c82:	0a1b      	lsrs	r3, r3, #8
 8000c84:	b29b      	uxth	r3, r3
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	757b      	strb	r3, [r7, #21]
		data[2] = (uint8_t)(sheduler.operation_blocks[operation_id].operation_length & 0xFF);
 8000c8a:	7f7a      	ldrb	r2, [r7, #29]
 8000c8c:	4953      	ldr	r1, [pc, #332]	; (8000ddc <system_callback+0x260>)
 8000c8e:	4613      	mov	r3, r2
 8000c90:	005b      	lsls	r3, r3, #1
 8000c92:	4413      	add	r3, r2
 8000c94:	005b      	lsls	r3, r3, #1
 8000c96:	440b      	add	r3, r1
 8000c98:	330a      	adds	r3, #10
 8000c9a:	881b      	ldrh	r3, [r3, #0]
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	75bb      	strb	r3, [r7, #22]
		// set state to waiting ack then send to ensure interrupt works
		sheduler.sheduler_state = WAITING_ACK_STATE;
 8000ca0:	4b4e      	ldr	r3, [pc, #312]	; (8000ddc <system_callback+0x260>)
 8000ca2:	2204      	movs	r2, #4
 8000ca4:	f883 21e2 	strb.w	r2, [r3, #482]	; 0x1e2
		Can_Send(&hcan, sheduler.slave_blocks[slave_recieving_number].slave_ID, 3, data, &Can_TxMailBox[0]);
 8000ca8:	7f3b      	ldrb	r3, [r7, #28]
 8000caa:	4a4c      	ldr	r2, [pc, #304]	; (8000ddc <system_callback+0x260>)
 8000cac:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 8000cb0:	f107 0314 	add.w	r3, r7, #20
 8000cb4:	4a4e      	ldr	r2, [pc, #312]	; (8000df0 <system_callback+0x274>)
 8000cb6:	9200      	str	r2, [sp, #0]
 8000cb8:	2203      	movs	r2, #3
 8000cba:	484e      	ldr	r0, [pc, #312]	; (8000df4 <system_callback+0x278>)
 8000cbc:	f7ff faba 	bl	8000234 <Can_Send>
		return;
 8000cc0:	e086      	b.n	8000dd0 <system_callback+0x254>
	}
	if(sheduler.sheduler_state == WAITING_ACK_STATE && Can_RxData[0] == RCVD_ACK){
 8000cc2:	4b46      	ldr	r3, [pc, #280]	; (8000ddc <system_callback+0x260>)
 8000cc4:	f893 31e2 	ldrb.w	r3, [r3, #482]	; 0x1e2
 8000cc8:	2b04      	cmp	r3, #4
 8000cca:	d14e      	bne.n	8000d6a <system_callback+0x1ee>
 8000ccc:	4b4a      	ldr	r3, [pc, #296]	; (8000df8 <system_callback+0x27c>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	2b05      	cmp	r3, #5
 8000cd2:	d14a      	bne.n	8000d6a <system_callback+0x1ee>
		uint8_t operation_id = priority_queue_peak(&sheduler.operations);
 8000cd4:	4843      	ldr	r0, [pc, #268]	; (8000de4 <system_callback+0x268>)
 8000cd6:	f7ff fb6b 	bl	80003b0 <priority_queue_peak>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	77fb      	strb	r3, [r7, #31]
		uint8_t slave_recieving_number = stack_pop(&sheduler.idle_slaves_stack);
 8000cde:	4842      	ldr	r0, [pc, #264]	; (8000de8 <system_callback+0x26c>)
 8000ce0:	f7ff fd76 	bl	80007d0 <stack_pop>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	77bb      	strb	r3, [r7, #30]
		// give the slave the current operation
		give_slave_opcode(&sheduler, sheduler.operation_blocks[operation_id], slave_recieving_number);
 8000ce8:	7ffa      	ldrb	r2, [r7, #31]
 8000cea:	7fb9      	ldrb	r1, [r7, #30]
 8000cec:	483b      	ldr	r0, [pc, #236]	; (8000ddc <system_callback+0x260>)
 8000cee:	4613      	mov	r3, r2
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	4413      	add	r3, r2
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	4403      	add	r3, r0
 8000cf8:	3308      	adds	r3, #8
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	4610      	mov	r0, r2
 8000cfe:	889b      	ldrh	r3, [r3, #4]
 8000d00:	2200      	movs	r2, #0
 8000d02:	f363 020f 	bfi	r2, r3, #0, #16
 8000d06:	460b      	mov	r3, r1
 8000d08:	4601      	mov	r1, r0
 8000d0a:	4834      	ldr	r0, [pc, #208]	; (8000ddc <system_callback+0x260>)
 8000d0c:	f7ff fc8d 	bl	800062a <give_slave_opcode>
		// change state to sending code again if there are still operations to send and slaves to receive
		// if slave received the opcode, the slave sends a RCV_ACK
		if(sheduler.is_ROM_available){
 8000d10:	4b32      	ldr	r3, [pc, #200]	; (8000ddc <system_callback+0x260>)
 8000d12:	f893 31dc 	ldrb.w	r3, [r3, #476]	; 0x1dc
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d013      	beq.n	8000d42 <system_callback+0x1c6>
			// move the slave from the waiting queue
			give_slave_access_to_ROM(&sheduler);
 8000d1a:	4830      	ldr	r0, [pc, #192]	; (8000ddc <system_callback+0x260>)
 8000d1c:	f7ff fd08 	bl	8000730 <give_slave_access_to_ROM>
			// send ROM signal to the slave to be in the ROM
			uint8_t data[8];
			data[0] = ROM_SIGNAL;
 8000d20:	2340      	movs	r3, #64	; 0x40
 8000d22:	733b      	strb	r3, [r7, #12]
			Can_Send(&hcan, sheduler.slave_blocks[sheduler.current_slave_in_ROM].slave_ID, 1, data, &Can_TxMailBox[0]);
 8000d24:	4b2d      	ldr	r3, [pc, #180]	; (8000ddc <system_callback+0x260>)
 8000d26:	f893 31db 	ldrb.w	r3, [r3, #475]	; 0x1db
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	4b2b      	ldr	r3, [pc, #172]	; (8000ddc <system_callback+0x260>)
 8000d2e:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
 8000d32:	f107 030c 	add.w	r3, r7, #12
 8000d36:	4a2e      	ldr	r2, [pc, #184]	; (8000df0 <system_callback+0x274>)
 8000d38:	9200      	str	r2, [sp, #0]
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	482d      	ldr	r0, [pc, #180]	; (8000df4 <system_callback+0x278>)
 8000d3e:	f7ff fa79 	bl	8000234 <Can_Send>
		}
		if(sheduler.number_of_idle_slaves != 0 && sheduler.number_of_available_operations != 0)
 8000d42:	4b26      	ldr	r3, [pc, #152]	; (8000ddc <system_callback+0x260>)
 8000d44:	f893 31de 	ldrb.w	r3, [r3, #478]	; 0x1de
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d009      	beq.n	8000d60 <system_callback+0x1e4>
 8000d4c:	4b23      	ldr	r3, [pc, #140]	; (8000ddc <system_callback+0x260>)
 8000d4e:	f893 31e1 	ldrb.w	r3, [r3, #481]	; 0x1e1
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d004      	beq.n	8000d60 <system_callback+0x1e4>
			sheduler.sheduler_state = SENDING_CODE_STATE;
 8000d56:	4b21      	ldr	r3, [pc, #132]	; (8000ddc <system_callback+0x260>)
 8000d58:	2203      	movs	r2, #3
 8000d5a:	f883 21e2 	strb.w	r2, [r3, #482]	; 0x1e2
		else
			sheduler.sheduler_state = WAITING_SIG_STATE;
		return;
 8000d5e:	e037      	b.n	8000dd0 <system_callback+0x254>
			sheduler.sheduler_state = WAITING_SIG_STATE;
 8000d60:	4b1e      	ldr	r3, [pc, #120]	; (8000ddc <system_callback+0x260>)
 8000d62:	2205      	movs	r2, #5
 8000d64:	f883 21e2 	strb.w	r2, [r3, #482]	; 0x1e2
		return;
 8000d68:	e032      	b.n	8000dd0 <system_callback+0x254>
	}
	// if slave is finished accessing the ROM
	if(Can_RxData[0] == MEM_FREE_ACK){
 8000d6a:	4b23      	ldr	r3, [pc, #140]	; (8000df8 <system_callback+0x27c>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	2b03      	cmp	r3, #3
 8000d70:	d12e      	bne.n	8000dd0 <system_callback+0x254>
		// set rom is available
		sheduler.is_ROM_available = 1;
 8000d72:	4b1a      	ldr	r3, [pc, #104]	; (8000ddc <system_callback+0x260>)
 8000d74:	2201      	movs	r2, #1
 8000d76:	f883 21dc 	strb.w	r2, [r3, #476]	; 0x1dc
		// change the slave's state to idle
		sheduler.slave_blocks[sheduler.current_slave_in_ROM].slave_state = SLAVE_IDLE;
 8000d7a:	4b18      	ldr	r3, [pc, #96]	; (8000ddc <system_callback+0x260>)
 8000d7c:	f893 31db 	ldrb.w	r3, [r3, #475]	; 0x1db
 8000d80:	4a16      	ldr	r2, [pc, #88]	; (8000ddc <system_callback+0x260>)
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	4413      	add	r3, r2
 8000d86:	2200      	movs	r2, #0
 8000d88:	705a      	strb	r2, [r3, #1]
		// if there are more waiting slaves, give one access to ROM
		if(sheduler.number_of_waiting_slaves != 0){
 8000d8a:	4b14      	ldr	r3, [pc, #80]	; (8000ddc <system_callback+0x260>)
 8000d8c:	f893 31df 	ldrb.w	r3, [r3, #479]	; 0x1df
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d01d      	beq.n	8000dd0 <system_callback+0x254>
			give_slave_access_to_ROM(&sheduler);
 8000d94:	4811      	ldr	r0, [pc, #68]	; (8000ddc <system_callback+0x260>)
 8000d96:	f7ff fccb 	bl	8000730 <give_slave_access_to_ROM>
			if(sheduler.current_slave_in_ROM == 0)
 8000d9a:	4b10      	ldr	r3, [pc, #64]	; (8000ddc <system_callback+0x260>)
 8000d9c:	f893 31db 	ldrb.w	r3, [r3, #475]	; 0x1db
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d105      	bne.n	8000db0 <system_callback+0x234>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000da4:	2200      	movs	r2, #0
 8000da6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000daa:	4810      	ldr	r0, [pc, #64]	; (8000dec <system_callback+0x270>)
 8000dac:	f001 fa50 	bl	8002250 <HAL_GPIO_WritePin>
			// send ROM signal to the slave to be in the ROM
			uint8_t data[8];
			data[0] = ROM_SIGNAL;
 8000db0:	2340      	movs	r3, #64	; 0x40
 8000db2:	713b      	strb	r3, [r7, #4]
			Can_Send(&hcan, sheduler.slave_blocks[sheduler.current_slave_in_ROM].slave_ID, 1, data, &Can_TxMailBox[0]);
 8000db4:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <system_callback+0x260>)
 8000db6:	f893 31db 	ldrb.w	r3, [r3, #475]	; 0x1db
 8000dba:	461a      	mov	r2, r3
 8000dbc:	4b07      	ldr	r3, [pc, #28]	; (8000ddc <system_callback+0x260>)
 8000dbe:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
 8000dc2:	1d3b      	adds	r3, r7, #4
 8000dc4:	4a0a      	ldr	r2, [pc, #40]	; (8000df0 <system_callback+0x274>)
 8000dc6:	9200      	str	r2, [sp, #0]
 8000dc8:	2201      	movs	r2, #1
 8000dca:	480a      	ldr	r0, [pc, #40]	; (8000df4 <system_callback+0x278>)
 8000dcc:	f7ff fa32 	bl	8000234 <Can_Send>
		}
	}
}
 8000dd0:	3720      	adds	r7, #32
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40010c00 	.word	0x40010c00
 8000ddc:	200000e4 	.word	0x200000e4
 8000de0:	20000040 	.word	0x20000040
 8000de4:	2000029e 	.word	0x2000029e
 8000de8:	2000026c 	.word	0x2000026c
 8000dec:	40011000 	.word	0x40011000
 8000df0:	20000064 	.word	0x20000064
 8000df4:	20000074 	.word	0x20000074
 8000df8:	2000005c 	.word	0x2000005c

08000dfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e00:	b672      	cpsid	i
}
 8000e02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000e04:	e7fe      	b.n	8000e04 <Error_Handler+0x8>
	...

08000e08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e0e:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <HAL_MspInit+0x40>)
 8000e10:	699b      	ldr	r3, [r3, #24]
 8000e12:	4a0d      	ldr	r2, [pc, #52]	; (8000e48 <HAL_MspInit+0x40>)
 8000e14:	f043 0301 	orr.w	r3, r3, #1
 8000e18:	6193      	str	r3, [r2, #24]
 8000e1a:	4b0b      	ldr	r3, [pc, #44]	; (8000e48 <HAL_MspInit+0x40>)
 8000e1c:	699b      	ldr	r3, [r3, #24]
 8000e1e:	f003 0301 	and.w	r3, r3, #1
 8000e22:	607b      	str	r3, [r7, #4]
 8000e24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e26:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <HAL_MspInit+0x40>)
 8000e28:	69db      	ldr	r3, [r3, #28]
 8000e2a:	4a07      	ldr	r2, [pc, #28]	; (8000e48 <HAL_MspInit+0x40>)
 8000e2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e30:	61d3      	str	r3, [r2, #28]
 8000e32:	4b05      	ldr	r3, [pc, #20]	; (8000e48 <HAL_MspInit+0x40>)
 8000e34:	69db      	ldr	r3, [r3, #28]
 8000e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e3a:	603b      	str	r3, [r7, #0]
 8000e3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bc80      	pop	{r7}
 8000e46:	4770      	bx	lr
 8000e48:	40021000 	.word	0x40021000

08000e4c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b088      	sub	sp, #32
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e54:	f107 0310 	add.w	r3, r7, #16
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a20      	ldr	r2, [pc, #128]	; (8000ee8 <HAL_CAN_MspInit+0x9c>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d139      	bne.n	8000ee0 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000e6c:	4b1f      	ldr	r3, [pc, #124]	; (8000eec <HAL_CAN_MspInit+0xa0>)
 8000e6e:	69db      	ldr	r3, [r3, #28]
 8000e70:	4a1e      	ldr	r2, [pc, #120]	; (8000eec <HAL_CAN_MspInit+0xa0>)
 8000e72:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e76:	61d3      	str	r3, [r2, #28]
 8000e78:	4b1c      	ldr	r3, [pc, #112]	; (8000eec <HAL_CAN_MspInit+0xa0>)
 8000e7a:	69db      	ldr	r3, [r3, #28]
 8000e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e80:	60fb      	str	r3, [r7, #12]
 8000e82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e84:	4b19      	ldr	r3, [pc, #100]	; (8000eec <HAL_CAN_MspInit+0xa0>)
 8000e86:	699b      	ldr	r3, [r3, #24]
 8000e88:	4a18      	ldr	r2, [pc, #96]	; (8000eec <HAL_CAN_MspInit+0xa0>)
 8000e8a:	f043 0304 	orr.w	r3, r3, #4
 8000e8e:	6193      	str	r3, [r2, #24]
 8000e90:	4b16      	ldr	r3, [pc, #88]	; (8000eec <HAL_CAN_MspInit+0xa0>)
 8000e92:	699b      	ldr	r3, [r3, #24]
 8000e94:	f003 0304 	and.w	r3, r3, #4
 8000e98:	60bb      	str	r3, [r7, #8]
 8000e9a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000e9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ea0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eaa:	f107 0310 	add.w	r3, r7, #16
 8000eae:	4619      	mov	r1, r3
 8000eb0:	480f      	ldr	r0, [pc, #60]	; (8000ef0 <HAL_CAN_MspInit+0xa4>)
 8000eb2:	f001 f849 	bl	8001f48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000eb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec4:	f107 0310 	add.w	r3, r7, #16
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4809      	ldr	r0, [pc, #36]	; (8000ef0 <HAL_CAN_MspInit+0xa4>)
 8000ecc:	f001 f83c 	bl	8001f48 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	2014      	movs	r0, #20
 8000ed6:	f001 f800 	bl	8001eda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000eda:	2014      	movs	r0, #20
 8000edc:	f001 f819 	bl	8001f12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000ee0:	bf00      	nop
 8000ee2:	3720      	adds	r7, #32
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	40006400 	.word	0x40006400
 8000eec:	40021000 	.word	0x40021000
 8000ef0:	40010800 	.word	0x40010800

08000ef4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f04:	d10b      	bne.n	8000f1e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f06:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <HAL_TIM_Base_MspInit+0x34>)
 8000f08:	69db      	ldr	r3, [r3, #28]
 8000f0a:	4a07      	ldr	r2, [pc, #28]	; (8000f28 <HAL_TIM_Base_MspInit+0x34>)
 8000f0c:	f043 0301 	orr.w	r3, r3, #1
 8000f10:	61d3      	str	r3, [r2, #28]
 8000f12:	4b05      	ldr	r3, [pc, #20]	; (8000f28 <HAL_TIM_Base_MspInit+0x34>)
 8000f14:	69db      	ldr	r3, [r3, #28]
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f1e:	bf00      	nop
 8000f20:	3714      	adds	r7, #20
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bc80      	pop	{r7}
 8000f26:	4770      	bx	lr
 8000f28:	40021000 	.word	0x40021000

08000f2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f30:	e7fe      	b.n	8000f30 <NMI_Handler+0x4>

08000f32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f32:	b480      	push	{r7}
 8000f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f36:	e7fe      	b.n	8000f36 <HardFault_Handler+0x4>

08000f38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f3c:	e7fe      	b.n	8000f3c <MemManage_Handler+0x4>

08000f3e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f42:	e7fe      	b.n	8000f42 <BusFault_Handler+0x4>

08000f44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f48:	e7fe      	b.n	8000f48 <UsageFault_Handler+0x4>

08000f4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bc80      	pop	{r7}
 8000f54:	4770      	bx	lr

08000f56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bc80      	pop	{r7}
 8000f60:	4770      	bx	lr

08000f62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bc80      	pop	{r7}
 8000f6c:	4770      	bx	lr

08000f6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f72:	f000 f87f 	bl	8001074 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
	...

08000f7c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000f80:	4802      	ldr	r0, [pc, #8]	; (8000f8c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000f82:	f000 fcb0 	bl	80018e6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000074 	.word	0x20000074

08000f90 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bc80      	pop	{r7}
 8000f9a:	4770      	bx	lr

08000f9c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f9c:	f7ff fff8 	bl	8000f90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fa0:	480b      	ldr	r0, [pc, #44]	; (8000fd0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000fa2:	490c      	ldr	r1, [pc, #48]	; (8000fd4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000fa4:	4a0c      	ldr	r2, [pc, #48]	; (8000fd8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000fa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fa8:	e002      	b.n	8000fb0 <LoopCopyDataInit>

08000faa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000faa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fae:	3304      	adds	r3, #4

08000fb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fb4:	d3f9      	bcc.n	8000faa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fb6:	4a09      	ldr	r2, [pc, #36]	; (8000fdc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000fb8:	4c09      	ldr	r4, [pc, #36]	; (8000fe0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fbc:	e001      	b.n	8000fc2 <LoopFillZerobss>

08000fbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fc0:	3204      	adds	r2, #4

08000fc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fc4:	d3fb      	bcc.n	8000fbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fc6:	f001 ffad 	bl	8002f24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fca:	f7ff fc2b 	bl	8000824 <main>
  bx lr
 8000fce:	4770      	bx	lr
  ldr r0, =_sdata
 8000fd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fd4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000fd8:	08002fb0 	.word	0x08002fb0
  ldr r2, =_sbss
 8000fdc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000fe0:	200002d4 	.word	0x200002d4

08000fe4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fe4:	e7fe      	b.n	8000fe4 <ADC1_2_IRQHandler>
	...

08000fe8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fec:	4b08      	ldr	r3, [pc, #32]	; (8001010 <HAL_Init+0x28>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a07      	ldr	r2, [pc, #28]	; (8001010 <HAL_Init+0x28>)
 8000ff2:	f043 0310 	orr.w	r3, r3, #16
 8000ff6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ff8:	2003      	movs	r0, #3
 8000ffa:	f000 ff63 	bl	8001ec4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ffe:	200f      	movs	r0, #15
 8001000:	f000 f808 	bl	8001014 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001004:	f7ff ff00 	bl	8000e08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001008:	2300      	movs	r3, #0
}
 800100a:	4618      	mov	r0, r3
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40022000 	.word	0x40022000

08001014 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800101c:	4b12      	ldr	r3, [pc, #72]	; (8001068 <HAL_InitTick+0x54>)
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	4b12      	ldr	r3, [pc, #72]	; (800106c <HAL_InitTick+0x58>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	4619      	mov	r1, r3
 8001026:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800102a:	fbb3 f3f1 	udiv	r3, r3, r1
 800102e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001032:	4618      	mov	r0, r3
 8001034:	f000 ff7b 	bl	8001f2e <HAL_SYSTICK_Config>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	e00e      	b.n	8001060 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2b0f      	cmp	r3, #15
 8001046:	d80a      	bhi.n	800105e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001048:	2200      	movs	r2, #0
 800104a:	6879      	ldr	r1, [r7, #4]
 800104c:	f04f 30ff 	mov.w	r0, #4294967295
 8001050:	f000 ff43 	bl	8001eda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001054:	4a06      	ldr	r2, [pc, #24]	; (8001070 <HAL_InitTick+0x5c>)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800105a:	2300      	movs	r3, #0
 800105c:	e000      	b.n	8001060 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
}
 8001060:	4618      	mov	r0, r3
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000000 	.word	0x20000000
 800106c:	20000008 	.word	0x20000008
 8001070:	20000004 	.word	0x20000004

08001074 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001078:	4b05      	ldr	r3, [pc, #20]	; (8001090 <HAL_IncTick+0x1c>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	461a      	mov	r2, r3
 800107e:	4b05      	ldr	r3, [pc, #20]	; (8001094 <HAL_IncTick+0x20>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4413      	add	r3, r2
 8001084:	4a03      	ldr	r2, [pc, #12]	; (8001094 <HAL_IncTick+0x20>)
 8001086:	6013      	str	r3, [r2, #0]
}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	bc80      	pop	{r7}
 800108e:	4770      	bx	lr
 8001090:	20000008 	.word	0x20000008
 8001094:	200002d0 	.word	0x200002d0

08001098 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  return uwTick;
 800109c:	4b02      	ldr	r3, [pc, #8]	; (80010a8 <HAL_GetTick+0x10>)
 800109e:	681b      	ldr	r3, [r3, #0]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bc80      	pop	{r7}
 80010a6:	4770      	bx	lr
 80010a8:	200002d0 	.word	0x200002d0

080010ac <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d101      	bne.n	80010be <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e0ed      	b.n	800129a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d102      	bne.n	80010d0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f7ff febe 	bl	8000e4c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f042 0201 	orr.w	r2, r2, #1
 80010de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010e0:	f7ff ffda 	bl	8001098 <HAL_GetTick>
 80010e4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010e6:	e012      	b.n	800110e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010e8:	f7ff ffd6 	bl	8001098 <HAL_GetTick>
 80010ec:	4602      	mov	r2, r0
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	2b0a      	cmp	r3, #10
 80010f4:	d90b      	bls.n	800110e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010fa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2205      	movs	r2, #5
 8001106:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e0c5      	b.n	800129a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f003 0301 	and.w	r3, r3, #1
 8001118:	2b00      	cmp	r3, #0
 800111a:	d0e5      	beq.n	80010e8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f022 0202 	bic.w	r2, r2, #2
 800112a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800112c:	f7ff ffb4 	bl	8001098 <HAL_GetTick>
 8001130:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001132:	e012      	b.n	800115a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001134:	f7ff ffb0 	bl	8001098 <HAL_GetTick>
 8001138:	4602      	mov	r2, r0
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	2b0a      	cmp	r3, #10
 8001140:	d90b      	bls.n	800115a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001146:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2205      	movs	r2, #5
 8001152:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e09f      	b.n	800129a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f003 0302 	and.w	r3, r3, #2
 8001164:	2b00      	cmp	r3, #0
 8001166:	d1e5      	bne.n	8001134 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	7e1b      	ldrb	r3, [r3, #24]
 800116c:	2b01      	cmp	r3, #1
 800116e:	d108      	bne.n	8001182 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	e007      	b.n	8001192 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001190:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	7e5b      	ldrb	r3, [r3, #25]
 8001196:	2b01      	cmp	r3, #1
 8001198:	d108      	bne.n	80011ac <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	e007      	b.n	80011bc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80011ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	7e9b      	ldrb	r3, [r3, #26]
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d108      	bne.n	80011d6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f042 0220 	orr.w	r2, r2, #32
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	e007      	b.n	80011e6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f022 0220 	bic.w	r2, r2, #32
 80011e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	7edb      	ldrb	r3, [r3, #27]
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d108      	bne.n	8001200 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f022 0210 	bic.w	r2, r2, #16
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	e007      	b.n	8001210 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f042 0210 	orr.w	r2, r2, #16
 800120e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	7f1b      	ldrb	r3, [r3, #28]
 8001214:	2b01      	cmp	r3, #1
 8001216:	d108      	bne.n	800122a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f042 0208 	orr.w	r2, r2, #8
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	e007      	b.n	800123a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f022 0208 	bic.w	r2, r2, #8
 8001238:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	7f5b      	ldrb	r3, [r3, #29]
 800123e:	2b01      	cmp	r3, #1
 8001240:	d108      	bne.n	8001254 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f042 0204 	orr.w	r2, r2, #4
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	e007      	b.n	8001264 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f022 0204 	bic.w	r2, r2, #4
 8001262:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	689a      	ldr	r2, [r3, #8]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	431a      	orrs	r2, r3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	691b      	ldr	r3, [r3, #16]
 8001272:	431a      	orrs	r2, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	695b      	ldr	r3, [r3, #20]
 8001278:	ea42 0103 	orr.w	r1, r2, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	1e5a      	subs	r2, r3, #1
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	430a      	orrs	r2, r1
 8001288:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2200      	movs	r2, #0
 800128e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2201      	movs	r2, #1
 8001294:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001298:	2300      	movs	r3, #0
}
 800129a:	4618      	mov	r0, r3
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80012a2:	b480      	push	{r7}
 80012a4:	b087      	sub	sp, #28
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
 80012aa:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012b8:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80012ba:	7cfb      	ldrb	r3, [r7, #19]
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d003      	beq.n	80012c8 <HAL_CAN_ConfigFilter+0x26>
 80012c0:	7cfb      	ldrb	r3, [r7, #19]
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	f040 80aa 	bne.w	800141c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80012ce:	f043 0201 	orr.w	r2, r3, #1
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	695b      	ldr	r3, [r3, #20]
 80012dc:	f003 031f 	and.w	r3, r3, #31
 80012e0:	2201      	movs	r2, #1
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	43db      	mvns	r3, r3
 80012f2:	401a      	ands	r2, r3
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d123      	bne.n	800134a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	43db      	mvns	r3, r3
 800130c:	401a      	ands	r2, r3
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001320:	683a      	ldr	r2, [r7, #0]
 8001322:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001324:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	3248      	adds	r2, #72	; 0x48
 800132a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800133e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001340:	6979      	ldr	r1, [r7, #20]
 8001342:	3348      	adds	r3, #72	; 0x48
 8001344:	00db      	lsls	r3, r3, #3
 8001346:	440b      	add	r3, r1
 8001348:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	69db      	ldr	r3, [r3, #28]
 800134e:	2b01      	cmp	r3, #1
 8001350:	d122      	bne.n	8001398 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	431a      	orrs	r2, r3
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800136e:	683a      	ldr	r2, [r7, #0]
 8001370:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001372:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	3248      	adds	r2, #72	; 0x48
 8001378:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	68db      	ldr	r3, [r3, #12]
 8001386:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800138c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800138e:	6979      	ldr	r1, [r7, #20]
 8001390:	3348      	adds	r3, #72	; 0x48
 8001392:	00db      	lsls	r3, r3, #3
 8001394:	440b      	add	r3, r1
 8001396:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d109      	bne.n	80013b4 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	43db      	mvns	r3, r3
 80013aa:	401a      	ands	r2, r3
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80013b2:	e007      	b.n	80013c4 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	431a      	orrs	r2, r3
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	691b      	ldr	r3, [r3, #16]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d109      	bne.n	80013e0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	43db      	mvns	r3, r3
 80013d6:	401a      	ands	r2, r3
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80013de:	e007      	b.n	80013f0 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	431a      	orrs	r2, r3
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	6a1b      	ldr	r3, [r3, #32]
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d107      	bne.n	8001408 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	431a      	orrs	r2, r3
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800140e:	f023 0201 	bic.w	r2, r3, #1
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001418:	2300      	movs	r3, #0
 800141a:	e006      	b.n	800142a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001420:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001428:	2301      	movs	r3, #1
  }
}
 800142a:	4618      	mov	r0, r3
 800142c:	371c      	adds	r7, #28
 800142e:	46bd      	mov	sp, r7
 8001430:	bc80      	pop	{r7}
 8001432:	4770      	bx	lr

08001434 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001442:	b2db      	uxtb	r3, r3
 8001444:	2b01      	cmp	r3, #1
 8001446:	d12e      	bne.n	80014a6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2202      	movs	r2, #2
 800144c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f022 0201 	bic.w	r2, r2, #1
 800145e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001460:	f7ff fe1a 	bl	8001098 <HAL_GetTick>
 8001464:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001466:	e012      	b.n	800148e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001468:	f7ff fe16 	bl	8001098 <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b0a      	cmp	r3, #10
 8001474:	d90b      	bls.n	800148e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800147a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2205      	movs	r2, #5
 8001486:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e012      	b.n	80014b4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f003 0301 	and.w	r3, r3, #1
 8001498:	2b00      	cmp	r3, #0
 800149a:	d1e5      	bne.n	8001468 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2200      	movs	r2, #0
 80014a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80014a2:	2300      	movs	r3, #0
 80014a4:	e006      	b.n	80014b4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014aa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
  }
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3710      	adds	r7, #16
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}

080014bc <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80014bc:	b480      	push	{r7}
 80014be:	b089      	sub	sp, #36	; 0x24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	60b9      	str	r1, [r7, #8]
 80014c6:	607a      	str	r2, [r7, #4]
 80014c8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014d0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80014da:	7ffb      	ldrb	r3, [r7, #31]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d003      	beq.n	80014e8 <HAL_CAN_AddTxMessage+0x2c>
 80014e0:	7ffb      	ldrb	r3, [r7, #31]
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	f040 80ad 	bne.w	8001642 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d10a      	bne.n	8001508 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d105      	bne.n	8001508 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001502:	2b00      	cmp	r3, #0
 8001504:	f000 8095 	beq.w	8001632 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	0e1b      	lsrs	r3, r3, #24
 800150c:	f003 0303 	and.w	r3, r3, #3
 8001510:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001512:	2201      	movs	r2, #1
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	409a      	lsls	r2, r3
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d10d      	bne.n	8001540 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800152e:	68f9      	ldr	r1, [r7, #12]
 8001530:	6809      	ldr	r1, [r1, #0]
 8001532:	431a      	orrs	r2, r3
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	3318      	adds	r3, #24
 8001538:	011b      	lsls	r3, r3, #4
 800153a:	440b      	add	r3, r1
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	e00f      	b.n	8001560 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800154a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001550:	68f9      	ldr	r1, [r7, #12]
 8001552:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001554:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	3318      	adds	r3, #24
 800155a:	011b      	lsls	r3, r3, #4
 800155c:	440b      	add	r3, r1
 800155e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	6819      	ldr	r1, [r3, #0]
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	691a      	ldr	r2, [r3, #16]
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	3318      	adds	r3, #24
 800156c:	011b      	lsls	r3, r3, #4
 800156e:	440b      	add	r3, r1
 8001570:	3304      	adds	r3, #4
 8001572:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	7d1b      	ldrb	r3, [r3, #20]
 8001578:	2b01      	cmp	r3, #1
 800157a:	d111      	bne.n	80015a0 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	3318      	adds	r3, #24
 8001584:	011b      	lsls	r3, r3, #4
 8001586:	4413      	add	r3, r2
 8001588:	3304      	adds	r3, #4
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	68fa      	ldr	r2, [r7, #12]
 800158e:	6811      	ldr	r1, [r2, #0]
 8001590:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	3318      	adds	r3, #24
 8001598:	011b      	lsls	r3, r3, #4
 800159a:	440b      	add	r3, r1
 800159c:	3304      	adds	r3, #4
 800159e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	3307      	adds	r3, #7
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	061a      	lsls	r2, r3, #24
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	3306      	adds	r3, #6
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	041b      	lsls	r3, r3, #16
 80015b0:	431a      	orrs	r2, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	3305      	adds	r3, #5
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	021b      	lsls	r3, r3, #8
 80015ba:	4313      	orrs	r3, r2
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	3204      	adds	r2, #4
 80015c0:	7812      	ldrb	r2, [r2, #0]
 80015c2:	4610      	mov	r0, r2
 80015c4:	68fa      	ldr	r2, [r7, #12]
 80015c6:	6811      	ldr	r1, [r2, #0]
 80015c8:	ea43 0200 	orr.w	r2, r3, r0
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	011b      	lsls	r3, r3, #4
 80015d0:	440b      	add	r3, r1
 80015d2:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80015d6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	3303      	adds	r3, #3
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	061a      	lsls	r2, r3, #24
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	3302      	adds	r3, #2
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	041b      	lsls	r3, r3, #16
 80015e8:	431a      	orrs	r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	3301      	adds	r3, #1
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	021b      	lsls	r3, r3, #8
 80015f2:	4313      	orrs	r3, r2
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	7812      	ldrb	r2, [r2, #0]
 80015f8:	4610      	mov	r0, r2
 80015fa:	68fa      	ldr	r2, [r7, #12]
 80015fc:	6811      	ldr	r1, [r2, #0]
 80015fe:	ea43 0200 	orr.w	r2, r3, r0
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	011b      	lsls	r3, r3, #4
 8001606:	440b      	add	r3, r1
 8001608:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800160c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	3318      	adds	r3, #24
 8001616:	011b      	lsls	r3, r3, #4
 8001618:	4413      	add	r3, r2
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	68fa      	ldr	r2, [r7, #12]
 800161e:	6811      	ldr	r1, [r2, #0]
 8001620:	f043 0201 	orr.w	r2, r3, #1
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	3318      	adds	r3, #24
 8001628:	011b      	lsls	r3, r3, #4
 800162a:	440b      	add	r3, r1
 800162c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800162e:	2300      	movs	r3, #0
 8001630:	e00e      	b.n	8001650 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001636:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e006      	b.n	8001650 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001646:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
  }
}
 8001650:	4618      	mov	r0, r3
 8001652:	3724      	adds	r7, #36	; 0x24
 8001654:	46bd      	mov	sp, r7
 8001656:	bc80      	pop	{r7}
 8001658:	4770      	bx	lr

0800165a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800165a:	b480      	push	{r7}
 800165c:	b087      	sub	sp, #28
 800165e:	af00      	add	r7, sp, #0
 8001660:	60f8      	str	r0, [r7, #12]
 8001662:	60b9      	str	r1, [r7, #8]
 8001664:	607a      	str	r2, [r7, #4]
 8001666:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800166e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001670:	7dfb      	ldrb	r3, [r7, #23]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d003      	beq.n	800167e <HAL_CAN_GetRxMessage+0x24>
 8001676:	7dfb      	ldrb	r3, [r7, #23]
 8001678:	2b02      	cmp	r3, #2
 800167a:	f040 8103 	bne.w	8001884 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d10e      	bne.n	80016a2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	68db      	ldr	r3, [r3, #12]
 800168a:	f003 0303 	and.w	r3, r3, #3
 800168e:	2b00      	cmp	r3, #0
 8001690:	d116      	bne.n	80016c0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001696:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e0f7      	b.n	8001892 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	691b      	ldr	r3, [r3, #16]
 80016a8:	f003 0303 	and.w	r3, r3, #3
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d107      	bne.n	80016c0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e0e8      	b.n	8001892 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	331b      	adds	r3, #27
 80016c8:	011b      	lsls	r3, r3, #4
 80016ca:	4413      	add	r3, r2
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0204 	and.w	r2, r3, #4
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d10c      	bne.n	80016f8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	331b      	adds	r3, #27
 80016e6:	011b      	lsls	r3, r3, #4
 80016e8:	4413      	add	r3, r2
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	0d5b      	lsrs	r3, r3, #21
 80016ee:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	601a      	str	r2, [r3, #0]
 80016f6:	e00b      	b.n	8001710 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	331b      	adds	r3, #27
 8001700:	011b      	lsls	r3, r3, #4
 8001702:	4413      	add	r3, r2
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	08db      	lsrs	r3, r3, #3
 8001708:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	331b      	adds	r3, #27
 8001718:	011b      	lsls	r3, r3, #4
 800171a:	4413      	add	r3, r2
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0202 	and.w	r2, r3, #2
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	331b      	adds	r3, #27
 800172e:	011b      	lsls	r3, r3, #4
 8001730:	4413      	add	r3, r2
 8001732:	3304      	adds	r3, #4
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0308 	and.w	r3, r3, #8
 800173a:	2b00      	cmp	r3, #0
 800173c:	d003      	beq.n	8001746 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2208      	movs	r2, #8
 8001742:	611a      	str	r2, [r3, #16]
 8001744:	e00b      	b.n	800175e <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	331b      	adds	r3, #27
 800174e:	011b      	lsls	r3, r3, #4
 8001750:	4413      	add	r3, r2
 8001752:	3304      	adds	r3, #4
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 020f 	and.w	r2, r3, #15
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	331b      	adds	r3, #27
 8001766:	011b      	lsls	r3, r3, #4
 8001768:	4413      	add	r3, r2
 800176a:	3304      	adds	r3, #4
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	0a1b      	lsrs	r3, r3, #8
 8001770:	b2da      	uxtb	r2, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	331b      	adds	r3, #27
 800177e:	011b      	lsls	r3, r3, #4
 8001780:	4413      	add	r3, r2
 8001782:	3304      	adds	r3, #4
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	0c1b      	lsrs	r3, r3, #16
 8001788:	b29a      	uxth	r2, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	011b      	lsls	r3, r3, #4
 8001796:	4413      	add	r3, r2
 8001798:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	b2da      	uxtb	r2, r3
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	011b      	lsls	r3, r3, #4
 80017ac:	4413      	add	r3, r2
 80017ae:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	0a1a      	lsrs	r2, r3, #8
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	3301      	adds	r3, #1
 80017ba:	b2d2      	uxtb	r2, r2
 80017bc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	011b      	lsls	r3, r3, #4
 80017c6:	4413      	add	r3, r2
 80017c8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	0c1a      	lsrs	r2, r3, #16
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	3302      	adds	r3, #2
 80017d4:	b2d2      	uxtb	r2, r2
 80017d6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	011b      	lsls	r3, r3, #4
 80017e0:	4413      	add	r3, r2
 80017e2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	0e1a      	lsrs	r2, r3, #24
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	3303      	adds	r3, #3
 80017ee:	b2d2      	uxtb	r2, r2
 80017f0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	011b      	lsls	r3, r3, #4
 80017fa:	4413      	add	r3, r2
 80017fc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	3304      	adds	r3, #4
 8001806:	b2d2      	uxtb	r2, r2
 8001808:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	011b      	lsls	r3, r3, #4
 8001812:	4413      	add	r3, r2
 8001814:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	0a1a      	lsrs	r2, r3, #8
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	3305      	adds	r3, #5
 8001820:	b2d2      	uxtb	r2, r2
 8001822:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	011b      	lsls	r3, r3, #4
 800182c:	4413      	add	r3, r2
 800182e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	0c1a      	lsrs	r2, r3, #16
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	3306      	adds	r3, #6
 800183a:	b2d2      	uxtb	r2, r2
 800183c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	011b      	lsls	r3, r3, #4
 8001846:	4413      	add	r3, r2
 8001848:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	0e1a      	lsrs	r2, r3, #24
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	3307      	adds	r3, #7
 8001854:	b2d2      	uxtb	r2, r2
 8001856:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d108      	bne.n	8001870 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	68da      	ldr	r2, [r3, #12]
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f042 0220 	orr.w	r2, r2, #32
 800186c:	60da      	str	r2, [r3, #12]
 800186e:	e007      	b.n	8001880 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	691a      	ldr	r2, [r3, #16]
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f042 0220 	orr.w	r2, r2, #32
 800187e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001880:	2300      	movs	r3, #0
 8001882:	e006      	b.n	8001892 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001888:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
  }
}
 8001892:	4618      	mov	r0, r3
 8001894:	371c      	adds	r7, #28
 8001896:	46bd      	mov	sp, r7
 8001898:	bc80      	pop	{r7}
 800189a:	4770      	bx	lr

0800189c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800189c:	b480      	push	{r7}
 800189e:	b085      	sub	sp, #20
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018ac:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80018ae:	7bfb      	ldrb	r3, [r7, #15]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d002      	beq.n	80018ba <HAL_CAN_ActivateNotification+0x1e>
 80018b4:	7bfb      	ldrb	r3, [r7, #15]
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d109      	bne.n	80018ce <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	6959      	ldr	r1, [r3, #20]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	683a      	ldr	r2, [r7, #0]
 80018c6:	430a      	orrs	r2, r1
 80018c8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80018ca:	2300      	movs	r3, #0
 80018cc:	e006      	b.n	80018dc <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
  }
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3714      	adds	r7, #20
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bc80      	pop	{r7}
 80018e4:	4770      	bx	lr

080018e6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b08a      	sub	sp, #40	; 0x28
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80018ee:	2300      	movs	r3, #0
 80018f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	695b      	ldr	r3, [r3, #20]
 80018f8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	691b      	ldr	r3, [r3, #16]
 8001918:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	699b      	ldr	r3, [r3, #24]
 8001920:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001922:	6a3b      	ldr	r3, [r7, #32]
 8001924:	f003 0301 	and.w	r3, r3, #1
 8001928:	2b00      	cmp	r3, #0
 800192a:	d07c      	beq.n	8001a26 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	2b00      	cmp	r3, #0
 8001934:	d023      	beq.n	800197e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2201      	movs	r2, #1
 800193c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	f003 0302 	and.w	r3, r3, #2
 8001944:	2b00      	cmp	r3, #0
 8001946:	d003      	beq.n	8001950 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f000 f983 	bl	8001c54 <HAL_CAN_TxMailbox0CompleteCallback>
 800194e:	e016      	b.n	800197e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	f003 0304 	and.w	r3, r3, #4
 8001956:	2b00      	cmp	r3, #0
 8001958:	d004      	beq.n	8001964 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800195a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001960:	627b      	str	r3, [r7, #36]	; 0x24
 8001962:	e00c      	b.n	800197e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	f003 0308 	and.w	r3, r3, #8
 800196a:	2b00      	cmp	r3, #0
 800196c:	d004      	beq.n	8001978 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800196e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001970:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001974:	627b      	str	r3, [r7, #36]	; 0x24
 8001976:	e002      	b.n	800197e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f000 f986 	bl	8001c8a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001984:	2b00      	cmp	r3, #0
 8001986:	d024      	beq.n	80019d2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001990:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001998:	2b00      	cmp	r3, #0
 800199a:	d003      	beq.n	80019a4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f000 f962 	bl	8001c66 <HAL_CAN_TxMailbox1CompleteCallback>
 80019a2:	e016      	b.n	80019d2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d004      	beq.n	80019b8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80019ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019b4:	627b      	str	r3, [r7, #36]	; 0x24
 80019b6:	e00c      	b.n	80019d2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d004      	beq.n	80019cc <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80019c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019c8:	627b      	str	r3, [r7, #36]	; 0x24
 80019ca:	e002      	b.n	80019d2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f000 f965 	bl	8001c9c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d024      	beq.n	8001a26 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80019e4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d003      	beq.n	80019f8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f000 f941 	bl	8001c78 <HAL_CAN_TxMailbox2CompleteCallback>
 80019f6:	e016      	b.n	8001a26 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d004      	beq.n	8001a0c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a08:	627b      	str	r3, [r7, #36]	; 0x24
 8001a0a:	e00c      	b.n	8001a26 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d004      	beq.n	8001a20 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a1c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a1e:	e002      	b.n	8001a26 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f000 f944 	bl	8001cae <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001a26:	6a3b      	ldr	r3, [r7, #32]
 8001a28:	f003 0308 	and.w	r3, r3, #8
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d00c      	beq.n	8001a4a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	f003 0310 	and.w	r3, r3, #16
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d007      	beq.n	8001a4a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a40:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2210      	movs	r2, #16
 8001a48:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001a4a:	6a3b      	ldr	r3, [r7, #32]
 8001a4c:	f003 0304 	and.w	r3, r3, #4
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d00b      	beq.n	8001a6c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	f003 0308 	and.w	r3, r3, #8
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d006      	beq.n	8001a6c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2208      	movs	r2, #8
 8001a64:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f000 f92a 	bl	8001cc0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001a6c:	6a3b      	ldr	r3, [r7, #32]
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d009      	beq.n	8001a8a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	f003 0303 	and.w	r3, r3, #3
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d002      	beq.n	8001a8a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f7fe fc0f 	bl	80002a8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001a8a:	6a3b      	ldr	r3, [r7, #32]
 8001a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d00c      	beq.n	8001aae <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	f003 0310 	and.w	r3, r3, #16
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d007      	beq.n	8001aae <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001aa4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2210      	movs	r2, #16
 8001aac:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001aae:	6a3b      	ldr	r3, [r7, #32]
 8001ab0:	f003 0320 	and.w	r3, r3, #32
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d00b      	beq.n	8001ad0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	f003 0308 	and.w	r3, r3, #8
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d006      	beq.n	8001ad0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2208      	movs	r2, #8
 8001ac8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f000 f90a 	bl	8001ce4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001ad0:	6a3b      	ldr	r3, [r7, #32]
 8001ad2:	f003 0310 	and.w	r3, r3, #16
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d009      	beq.n	8001aee <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	691b      	ldr	r3, [r3, #16]
 8001ae0:	f003 0303 	and.w	r3, r3, #3
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d002      	beq.n	8001aee <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f000 f8f2 	bl	8001cd2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001aee:	6a3b      	ldr	r3, [r7, #32]
 8001af0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d00b      	beq.n	8001b10 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	f003 0310 	and.w	r3, r3, #16
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d006      	beq.n	8001b10 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2210      	movs	r2, #16
 8001b08:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f000 f8f3 	bl	8001cf6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001b10:	6a3b      	ldr	r3, [r7, #32]
 8001b12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d00b      	beq.n	8001b32 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	f003 0308 	and.w	r3, r3, #8
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d006      	beq.n	8001b32 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2208      	movs	r2, #8
 8001b2a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f000 f8eb 	bl	8001d08 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001b32:	6a3b      	ldr	r3, [r7, #32]
 8001b34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d07b      	beq.n	8001c34 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	f003 0304 	and.w	r3, r3, #4
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d072      	beq.n	8001c2c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b46:	6a3b      	ldr	r3, [r7, #32]
 8001b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d008      	beq.n	8001b62 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d003      	beq.n	8001b62 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5c:	f043 0301 	orr.w	r3, r3, #1
 8001b60:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b62:	6a3b      	ldr	r3, [r7, #32]
 8001b64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d008      	beq.n	8001b7e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d003      	beq.n	8001b7e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b78:	f043 0302 	orr.w	r3, r3, #2
 8001b7c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001b7e:	6a3b      	ldr	r3, [r7, #32]
 8001b80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d008      	beq.n	8001b9a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d003      	beq.n	8001b9a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b94:	f043 0304 	orr.w	r3, r3, #4
 8001b98:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001b9a:	6a3b      	ldr	r3, [r7, #32]
 8001b9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d043      	beq.n	8001c2c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d03e      	beq.n	8001c2c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001bb4:	2b60      	cmp	r3, #96	; 0x60
 8001bb6:	d02b      	beq.n	8001c10 <HAL_CAN_IRQHandler+0x32a>
 8001bb8:	2b60      	cmp	r3, #96	; 0x60
 8001bba:	d82e      	bhi.n	8001c1a <HAL_CAN_IRQHandler+0x334>
 8001bbc:	2b50      	cmp	r3, #80	; 0x50
 8001bbe:	d022      	beq.n	8001c06 <HAL_CAN_IRQHandler+0x320>
 8001bc0:	2b50      	cmp	r3, #80	; 0x50
 8001bc2:	d82a      	bhi.n	8001c1a <HAL_CAN_IRQHandler+0x334>
 8001bc4:	2b40      	cmp	r3, #64	; 0x40
 8001bc6:	d019      	beq.n	8001bfc <HAL_CAN_IRQHandler+0x316>
 8001bc8:	2b40      	cmp	r3, #64	; 0x40
 8001bca:	d826      	bhi.n	8001c1a <HAL_CAN_IRQHandler+0x334>
 8001bcc:	2b30      	cmp	r3, #48	; 0x30
 8001bce:	d010      	beq.n	8001bf2 <HAL_CAN_IRQHandler+0x30c>
 8001bd0:	2b30      	cmp	r3, #48	; 0x30
 8001bd2:	d822      	bhi.n	8001c1a <HAL_CAN_IRQHandler+0x334>
 8001bd4:	2b10      	cmp	r3, #16
 8001bd6:	d002      	beq.n	8001bde <HAL_CAN_IRQHandler+0x2f8>
 8001bd8:	2b20      	cmp	r3, #32
 8001bda:	d005      	beq.n	8001be8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001bdc:	e01d      	b.n	8001c1a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be0:	f043 0308 	orr.w	r3, r3, #8
 8001be4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001be6:	e019      	b.n	8001c1c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bea:	f043 0310 	orr.w	r3, r3, #16
 8001bee:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001bf0:	e014      	b.n	8001c1c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf4:	f043 0320 	orr.w	r3, r3, #32
 8001bf8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001bfa:	e00f      	b.n	8001c1c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c02:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c04:	e00a      	b.n	8001c1c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c0c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c0e:	e005      	b.n	8001c1c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c16:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c18:	e000      	b.n	8001c1c <HAL_CAN_IRQHandler+0x336>
            break;
 8001c1a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	699a      	ldr	r2, [r3, #24]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001c2a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2204      	movs	r2, #4
 8001c32:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d008      	beq.n	8001c4c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c40:	431a      	orrs	r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f000 f867 	bl	8001d1a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001c4c:	bf00      	nop
 8001c4e:	3728      	adds	r7, #40	; 0x28
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001c5c:	bf00      	nop
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bc80      	pop	{r7}
 8001c64:	4770      	bx	lr

08001c66 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c66:	b480      	push	{r7}
 8001c68:	b083      	sub	sp, #12
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001c6e:	bf00      	nop
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bc80      	pop	{r7}
 8001c76:	4770      	bx	lr

08001c78 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bc80      	pop	{r7}
 8001c88:	4770      	bx	lr

08001c8a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	b083      	sub	sp, #12
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bc80      	pop	{r7}
 8001c9a:	4770      	bx	lr

08001c9c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001ca4:	bf00      	nop
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bc80      	pop	{r7}
 8001cac:	4770      	bx	lr

08001cae <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	b083      	sub	sp, #12
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001cb6:	bf00      	nop
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bc80      	pop	{r7}
 8001cbe:	4770      	bx	lr

08001cc0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001cc8:	bf00      	nop
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bc80      	pop	{r7}
 8001cd0:	4770      	bx	lr

08001cd2 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	b083      	sub	sp, #12
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001cda:	bf00      	nop
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bc80      	pop	{r7}
 8001ce2:	4770      	bx	lr

08001ce4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bc80      	pop	{r7}
 8001cf4:	4770      	bx	lr

08001cf6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b083      	sub	sp, #12
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001cfe:	bf00      	nop
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bc80      	pop	{r7}
 8001d06:	4770      	bx	lr

08001d08 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001d10:	bf00      	nop
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bc80      	pop	{r7}
 8001d18:	4770      	bx	lr

08001d1a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	b083      	sub	sp, #12
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bc80      	pop	{r7}
 8001d2a:	4770      	bx	lr

08001d2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d3c:	4b0c      	ldr	r3, [pc, #48]	; (8001d70 <__NVIC_SetPriorityGrouping+0x44>)
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d42:	68ba      	ldr	r2, [r7, #8]
 8001d44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d48:	4013      	ands	r3, r2
 8001d4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d5e:	4a04      	ldr	r2, [pc, #16]	; (8001d70 <__NVIC_SetPriorityGrouping+0x44>)
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	60d3      	str	r3, [r2, #12]
}
 8001d64:	bf00      	nop
 8001d66:	3714      	adds	r7, #20
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bc80      	pop	{r7}
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	e000ed00 	.word	0xe000ed00

08001d74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d78:	4b04      	ldr	r3, [pc, #16]	; (8001d8c <__NVIC_GetPriorityGrouping+0x18>)
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	0a1b      	lsrs	r3, r3, #8
 8001d7e:	f003 0307 	and.w	r3, r3, #7
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bc80      	pop	{r7}
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	e000ed00 	.word	0xe000ed00

08001d90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	db0b      	blt.n	8001dba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001da2:	79fb      	ldrb	r3, [r7, #7]
 8001da4:	f003 021f 	and.w	r2, r3, #31
 8001da8:	4906      	ldr	r1, [pc, #24]	; (8001dc4 <__NVIC_EnableIRQ+0x34>)
 8001daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dae:	095b      	lsrs	r3, r3, #5
 8001db0:	2001      	movs	r0, #1
 8001db2:	fa00 f202 	lsl.w	r2, r0, r2
 8001db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dba:	bf00      	nop
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bc80      	pop	{r7}
 8001dc2:	4770      	bx	lr
 8001dc4:	e000e100 	.word	0xe000e100

08001dc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4603      	mov	r3, r0
 8001dd0:	6039      	str	r1, [r7, #0]
 8001dd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	db0a      	blt.n	8001df2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	b2da      	uxtb	r2, r3
 8001de0:	490c      	ldr	r1, [pc, #48]	; (8001e14 <__NVIC_SetPriority+0x4c>)
 8001de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de6:	0112      	lsls	r2, r2, #4
 8001de8:	b2d2      	uxtb	r2, r2
 8001dea:	440b      	add	r3, r1
 8001dec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001df0:	e00a      	b.n	8001e08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	b2da      	uxtb	r2, r3
 8001df6:	4908      	ldr	r1, [pc, #32]	; (8001e18 <__NVIC_SetPriority+0x50>)
 8001df8:	79fb      	ldrb	r3, [r7, #7]
 8001dfa:	f003 030f 	and.w	r3, r3, #15
 8001dfe:	3b04      	subs	r3, #4
 8001e00:	0112      	lsls	r2, r2, #4
 8001e02:	b2d2      	uxtb	r2, r2
 8001e04:	440b      	add	r3, r1
 8001e06:	761a      	strb	r2, [r3, #24]
}
 8001e08:	bf00      	nop
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bc80      	pop	{r7}
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	e000e100 	.word	0xe000e100
 8001e18:	e000ed00 	.word	0xe000ed00

08001e1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b089      	sub	sp, #36	; 0x24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f003 0307 	and.w	r3, r3, #7
 8001e2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	f1c3 0307 	rsb	r3, r3, #7
 8001e36:	2b04      	cmp	r3, #4
 8001e38:	bf28      	it	cs
 8001e3a:	2304      	movcs	r3, #4
 8001e3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	3304      	adds	r3, #4
 8001e42:	2b06      	cmp	r3, #6
 8001e44:	d902      	bls.n	8001e4c <NVIC_EncodePriority+0x30>
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	3b03      	subs	r3, #3
 8001e4a:	e000      	b.n	8001e4e <NVIC_EncodePriority+0x32>
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e50:	f04f 32ff 	mov.w	r2, #4294967295
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5a:	43da      	mvns	r2, r3
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	401a      	ands	r2, r3
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e64:	f04f 31ff 	mov.w	r1, #4294967295
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e6e:	43d9      	mvns	r1, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e74:	4313      	orrs	r3, r2
         );
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3724      	adds	r7, #36	; 0x24
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bc80      	pop	{r7}
 8001e7e:	4770      	bx	lr

08001e80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e90:	d301      	bcc.n	8001e96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e92:	2301      	movs	r3, #1
 8001e94:	e00f      	b.n	8001eb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e96:	4a0a      	ldr	r2, [pc, #40]	; (8001ec0 <SysTick_Config+0x40>)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e9e:	210f      	movs	r1, #15
 8001ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ea4:	f7ff ff90 	bl	8001dc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ea8:	4b05      	ldr	r3, [pc, #20]	; (8001ec0 <SysTick_Config+0x40>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eae:	4b04      	ldr	r3, [pc, #16]	; (8001ec0 <SysTick_Config+0x40>)
 8001eb0:	2207      	movs	r2, #7
 8001eb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	e000e010 	.word	0xe000e010

08001ec4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f7ff ff2d 	bl	8001d2c <__NVIC_SetPriorityGrouping>
}
 8001ed2:	bf00      	nop
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b086      	sub	sp, #24
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	60b9      	str	r1, [r7, #8]
 8001ee4:	607a      	str	r2, [r7, #4]
 8001ee6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001eec:	f7ff ff42 	bl	8001d74 <__NVIC_GetPriorityGrouping>
 8001ef0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	68b9      	ldr	r1, [r7, #8]
 8001ef6:	6978      	ldr	r0, [r7, #20]
 8001ef8:	f7ff ff90 	bl	8001e1c <NVIC_EncodePriority>
 8001efc:	4602      	mov	r2, r0
 8001efe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f02:	4611      	mov	r1, r2
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff ff5f 	bl	8001dc8 <__NVIC_SetPriority>
}
 8001f0a:	bf00      	nop
 8001f0c:	3718      	adds	r7, #24
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b082      	sub	sp, #8
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	4603      	mov	r3, r0
 8001f1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7ff ff35 	bl	8001d90 <__NVIC_EnableIRQ>
}
 8001f26:	bf00      	nop
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b082      	sub	sp, #8
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7ff ffa2 	bl	8001e80 <SysTick_Config>
 8001f3c:	4603      	mov	r3, r0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
	...

08001f48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b08b      	sub	sp, #44	; 0x2c
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f52:	2300      	movs	r3, #0
 8001f54:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f56:	2300      	movs	r3, #0
 8001f58:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f5a:	e169      	b.n	8002230 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	69fa      	ldr	r2, [r7, #28]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	f040 8158 	bne.w	800222a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	4a9a      	ldr	r2, [pc, #616]	; (80021e8 <HAL_GPIO_Init+0x2a0>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d05e      	beq.n	8002042 <HAL_GPIO_Init+0xfa>
 8001f84:	4a98      	ldr	r2, [pc, #608]	; (80021e8 <HAL_GPIO_Init+0x2a0>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d875      	bhi.n	8002076 <HAL_GPIO_Init+0x12e>
 8001f8a:	4a98      	ldr	r2, [pc, #608]	; (80021ec <HAL_GPIO_Init+0x2a4>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d058      	beq.n	8002042 <HAL_GPIO_Init+0xfa>
 8001f90:	4a96      	ldr	r2, [pc, #600]	; (80021ec <HAL_GPIO_Init+0x2a4>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d86f      	bhi.n	8002076 <HAL_GPIO_Init+0x12e>
 8001f96:	4a96      	ldr	r2, [pc, #600]	; (80021f0 <HAL_GPIO_Init+0x2a8>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d052      	beq.n	8002042 <HAL_GPIO_Init+0xfa>
 8001f9c:	4a94      	ldr	r2, [pc, #592]	; (80021f0 <HAL_GPIO_Init+0x2a8>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d869      	bhi.n	8002076 <HAL_GPIO_Init+0x12e>
 8001fa2:	4a94      	ldr	r2, [pc, #592]	; (80021f4 <HAL_GPIO_Init+0x2ac>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d04c      	beq.n	8002042 <HAL_GPIO_Init+0xfa>
 8001fa8:	4a92      	ldr	r2, [pc, #584]	; (80021f4 <HAL_GPIO_Init+0x2ac>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d863      	bhi.n	8002076 <HAL_GPIO_Init+0x12e>
 8001fae:	4a92      	ldr	r2, [pc, #584]	; (80021f8 <HAL_GPIO_Init+0x2b0>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d046      	beq.n	8002042 <HAL_GPIO_Init+0xfa>
 8001fb4:	4a90      	ldr	r2, [pc, #576]	; (80021f8 <HAL_GPIO_Init+0x2b0>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d85d      	bhi.n	8002076 <HAL_GPIO_Init+0x12e>
 8001fba:	2b12      	cmp	r3, #18
 8001fbc:	d82a      	bhi.n	8002014 <HAL_GPIO_Init+0xcc>
 8001fbe:	2b12      	cmp	r3, #18
 8001fc0:	d859      	bhi.n	8002076 <HAL_GPIO_Init+0x12e>
 8001fc2:	a201      	add	r2, pc, #4	; (adr r2, 8001fc8 <HAL_GPIO_Init+0x80>)
 8001fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fc8:	08002043 	.word	0x08002043
 8001fcc:	0800201d 	.word	0x0800201d
 8001fd0:	0800202f 	.word	0x0800202f
 8001fd4:	08002071 	.word	0x08002071
 8001fd8:	08002077 	.word	0x08002077
 8001fdc:	08002077 	.word	0x08002077
 8001fe0:	08002077 	.word	0x08002077
 8001fe4:	08002077 	.word	0x08002077
 8001fe8:	08002077 	.word	0x08002077
 8001fec:	08002077 	.word	0x08002077
 8001ff0:	08002077 	.word	0x08002077
 8001ff4:	08002077 	.word	0x08002077
 8001ff8:	08002077 	.word	0x08002077
 8001ffc:	08002077 	.word	0x08002077
 8002000:	08002077 	.word	0x08002077
 8002004:	08002077 	.word	0x08002077
 8002008:	08002077 	.word	0x08002077
 800200c:	08002025 	.word	0x08002025
 8002010:	08002039 	.word	0x08002039
 8002014:	4a79      	ldr	r2, [pc, #484]	; (80021fc <HAL_GPIO_Init+0x2b4>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d013      	beq.n	8002042 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800201a:	e02c      	b.n	8002076 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	623b      	str	r3, [r7, #32]
          break;
 8002022:	e029      	b.n	8002078 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	3304      	adds	r3, #4
 800202a:	623b      	str	r3, [r7, #32]
          break;
 800202c:	e024      	b.n	8002078 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	3308      	adds	r3, #8
 8002034:	623b      	str	r3, [r7, #32]
          break;
 8002036:	e01f      	b.n	8002078 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	330c      	adds	r3, #12
 800203e:	623b      	str	r3, [r7, #32]
          break;
 8002040:	e01a      	b.n	8002078 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d102      	bne.n	8002050 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800204a:	2304      	movs	r3, #4
 800204c:	623b      	str	r3, [r7, #32]
          break;
 800204e:	e013      	b.n	8002078 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	2b01      	cmp	r3, #1
 8002056:	d105      	bne.n	8002064 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002058:	2308      	movs	r3, #8
 800205a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	69fa      	ldr	r2, [r7, #28]
 8002060:	611a      	str	r2, [r3, #16]
          break;
 8002062:	e009      	b.n	8002078 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002064:	2308      	movs	r3, #8
 8002066:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	69fa      	ldr	r2, [r7, #28]
 800206c:	615a      	str	r2, [r3, #20]
          break;
 800206e:	e003      	b.n	8002078 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002070:	2300      	movs	r3, #0
 8002072:	623b      	str	r3, [r7, #32]
          break;
 8002074:	e000      	b.n	8002078 <HAL_GPIO_Init+0x130>
          break;
 8002076:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	2bff      	cmp	r3, #255	; 0xff
 800207c:	d801      	bhi.n	8002082 <HAL_GPIO_Init+0x13a>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	e001      	b.n	8002086 <HAL_GPIO_Init+0x13e>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	3304      	adds	r3, #4
 8002086:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	2bff      	cmp	r3, #255	; 0xff
 800208c:	d802      	bhi.n	8002094 <HAL_GPIO_Init+0x14c>
 800208e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	e002      	b.n	800209a <HAL_GPIO_Init+0x152>
 8002094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002096:	3b08      	subs	r3, #8
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	210f      	movs	r1, #15
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	fa01 f303 	lsl.w	r3, r1, r3
 80020a8:	43db      	mvns	r3, r3
 80020aa:	401a      	ands	r2, r3
 80020ac:	6a39      	ldr	r1, [r7, #32]
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	fa01 f303 	lsl.w	r3, r1, r3
 80020b4:	431a      	orrs	r2, r3
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	f000 80b1 	beq.w	800222a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80020c8:	4b4d      	ldr	r3, [pc, #308]	; (8002200 <HAL_GPIO_Init+0x2b8>)
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	4a4c      	ldr	r2, [pc, #304]	; (8002200 <HAL_GPIO_Init+0x2b8>)
 80020ce:	f043 0301 	orr.w	r3, r3, #1
 80020d2:	6193      	str	r3, [r2, #24]
 80020d4:	4b4a      	ldr	r3, [pc, #296]	; (8002200 <HAL_GPIO_Init+0x2b8>)
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	f003 0301 	and.w	r3, r3, #1
 80020dc:	60bb      	str	r3, [r7, #8]
 80020de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80020e0:	4a48      	ldr	r2, [pc, #288]	; (8002204 <HAL_GPIO_Init+0x2bc>)
 80020e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e4:	089b      	lsrs	r3, r3, #2
 80020e6:	3302      	adds	r3, #2
 80020e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f0:	f003 0303 	and.w	r3, r3, #3
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	220f      	movs	r2, #15
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	43db      	mvns	r3, r3
 80020fe:	68fa      	ldr	r2, [r7, #12]
 8002100:	4013      	ands	r3, r2
 8002102:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4a40      	ldr	r2, [pc, #256]	; (8002208 <HAL_GPIO_Init+0x2c0>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d013      	beq.n	8002134 <HAL_GPIO_Init+0x1ec>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a3f      	ldr	r2, [pc, #252]	; (800220c <HAL_GPIO_Init+0x2c4>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d00d      	beq.n	8002130 <HAL_GPIO_Init+0x1e8>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a3e      	ldr	r2, [pc, #248]	; (8002210 <HAL_GPIO_Init+0x2c8>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d007      	beq.n	800212c <HAL_GPIO_Init+0x1e4>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4a3d      	ldr	r2, [pc, #244]	; (8002214 <HAL_GPIO_Init+0x2cc>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d101      	bne.n	8002128 <HAL_GPIO_Init+0x1e0>
 8002124:	2303      	movs	r3, #3
 8002126:	e006      	b.n	8002136 <HAL_GPIO_Init+0x1ee>
 8002128:	2304      	movs	r3, #4
 800212a:	e004      	b.n	8002136 <HAL_GPIO_Init+0x1ee>
 800212c:	2302      	movs	r3, #2
 800212e:	e002      	b.n	8002136 <HAL_GPIO_Init+0x1ee>
 8002130:	2301      	movs	r3, #1
 8002132:	e000      	b.n	8002136 <HAL_GPIO_Init+0x1ee>
 8002134:	2300      	movs	r3, #0
 8002136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002138:	f002 0203 	and.w	r2, r2, #3
 800213c:	0092      	lsls	r2, r2, #2
 800213e:	4093      	lsls	r3, r2
 8002140:	68fa      	ldr	r2, [r7, #12]
 8002142:	4313      	orrs	r3, r2
 8002144:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002146:	492f      	ldr	r1, [pc, #188]	; (8002204 <HAL_GPIO_Init+0x2bc>)
 8002148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214a:	089b      	lsrs	r3, r3, #2
 800214c:	3302      	adds	r3, #2
 800214e:	68fa      	ldr	r2, [r7, #12]
 8002150:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d006      	beq.n	800216e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002160:	4b2d      	ldr	r3, [pc, #180]	; (8002218 <HAL_GPIO_Init+0x2d0>)
 8002162:	689a      	ldr	r2, [r3, #8]
 8002164:	492c      	ldr	r1, [pc, #176]	; (8002218 <HAL_GPIO_Init+0x2d0>)
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	4313      	orrs	r3, r2
 800216a:	608b      	str	r3, [r1, #8]
 800216c:	e006      	b.n	800217c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800216e:	4b2a      	ldr	r3, [pc, #168]	; (8002218 <HAL_GPIO_Init+0x2d0>)
 8002170:	689a      	ldr	r2, [r3, #8]
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	43db      	mvns	r3, r3
 8002176:	4928      	ldr	r1, [pc, #160]	; (8002218 <HAL_GPIO_Init+0x2d0>)
 8002178:	4013      	ands	r3, r2
 800217a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d006      	beq.n	8002196 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002188:	4b23      	ldr	r3, [pc, #140]	; (8002218 <HAL_GPIO_Init+0x2d0>)
 800218a:	68da      	ldr	r2, [r3, #12]
 800218c:	4922      	ldr	r1, [pc, #136]	; (8002218 <HAL_GPIO_Init+0x2d0>)
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	4313      	orrs	r3, r2
 8002192:	60cb      	str	r3, [r1, #12]
 8002194:	e006      	b.n	80021a4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002196:	4b20      	ldr	r3, [pc, #128]	; (8002218 <HAL_GPIO_Init+0x2d0>)
 8002198:	68da      	ldr	r2, [r3, #12]
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	43db      	mvns	r3, r3
 800219e:	491e      	ldr	r1, [pc, #120]	; (8002218 <HAL_GPIO_Init+0x2d0>)
 80021a0:	4013      	ands	r3, r2
 80021a2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d006      	beq.n	80021be <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80021b0:	4b19      	ldr	r3, [pc, #100]	; (8002218 <HAL_GPIO_Init+0x2d0>)
 80021b2:	685a      	ldr	r2, [r3, #4]
 80021b4:	4918      	ldr	r1, [pc, #96]	; (8002218 <HAL_GPIO_Init+0x2d0>)
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	604b      	str	r3, [r1, #4]
 80021bc:	e006      	b.n	80021cc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80021be:	4b16      	ldr	r3, [pc, #88]	; (8002218 <HAL_GPIO_Init+0x2d0>)
 80021c0:	685a      	ldr	r2, [r3, #4]
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	43db      	mvns	r3, r3
 80021c6:	4914      	ldr	r1, [pc, #80]	; (8002218 <HAL_GPIO_Init+0x2d0>)
 80021c8:	4013      	ands	r3, r2
 80021ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d021      	beq.n	800221c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80021d8:	4b0f      	ldr	r3, [pc, #60]	; (8002218 <HAL_GPIO_Init+0x2d0>)
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	490e      	ldr	r1, [pc, #56]	; (8002218 <HAL_GPIO_Init+0x2d0>)
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	600b      	str	r3, [r1, #0]
 80021e4:	e021      	b.n	800222a <HAL_GPIO_Init+0x2e2>
 80021e6:	bf00      	nop
 80021e8:	10320000 	.word	0x10320000
 80021ec:	10310000 	.word	0x10310000
 80021f0:	10220000 	.word	0x10220000
 80021f4:	10210000 	.word	0x10210000
 80021f8:	10120000 	.word	0x10120000
 80021fc:	10110000 	.word	0x10110000
 8002200:	40021000 	.word	0x40021000
 8002204:	40010000 	.word	0x40010000
 8002208:	40010800 	.word	0x40010800
 800220c:	40010c00 	.word	0x40010c00
 8002210:	40011000 	.word	0x40011000
 8002214:	40011400 	.word	0x40011400
 8002218:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800221c:	4b0b      	ldr	r3, [pc, #44]	; (800224c <HAL_GPIO_Init+0x304>)
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	43db      	mvns	r3, r3
 8002224:	4909      	ldr	r1, [pc, #36]	; (800224c <HAL_GPIO_Init+0x304>)
 8002226:	4013      	ands	r3, r2
 8002228:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800222a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222c:	3301      	adds	r3, #1
 800222e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002236:	fa22 f303 	lsr.w	r3, r2, r3
 800223a:	2b00      	cmp	r3, #0
 800223c:	f47f ae8e 	bne.w	8001f5c <HAL_GPIO_Init+0x14>
  }
}
 8002240:	bf00      	nop
 8002242:	bf00      	nop
 8002244:	372c      	adds	r7, #44	; 0x2c
 8002246:	46bd      	mov	sp, r7
 8002248:	bc80      	pop	{r7}
 800224a:	4770      	bx	lr
 800224c:	40010400 	.word	0x40010400

08002250 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	460b      	mov	r3, r1
 800225a:	807b      	strh	r3, [r7, #2]
 800225c:	4613      	mov	r3, r2
 800225e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002260:	787b      	ldrb	r3, [r7, #1]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d003      	beq.n	800226e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002266:	887a      	ldrh	r2, [r7, #2]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800226c:	e003      	b.n	8002276 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800226e:	887b      	ldrh	r3, [r7, #2]
 8002270:	041a      	lsls	r2, r3, #16
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	611a      	str	r2, [r3, #16]
}
 8002276:	bf00      	nop
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	bc80      	pop	{r7}
 800227e:	4770      	bx	lr

08002280 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b086      	sub	sp, #24
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e272      	b.n	8002778 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	2b00      	cmp	r3, #0
 800229c:	f000 8087 	beq.w	80023ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022a0:	4b92      	ldr	r3, [pc, #584]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f003 030c 	and.w	r3, r3, #12
 80022a8:	2b04      	cmp	r3, #4
 80022aa:	d00c      	beq.n	80022c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022ac:	4b8f      	ldr	r3, [pc, #572]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f003 030c 	and.w	r3, r3, #12
 80022b4:	2b08      	cmp	r3, #8
 80022b6:	d112      	bne.n	80022de <HAL_RCC_OscConfig+0x5e>
 80022b8:	4b8c      	ldr	r3, [pc, #560]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022c4:	d10b      	bne.n	80022de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022c6:	4b89      	ldr	r3, [pc, #548]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d06c      	beq.n	80023ac <HAL_RCC_OscConfig+0x12c>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d168      	bne.n	80023ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e24c      	b.n	8002778 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022e6:	d106      	bne.n	80022f6 <HAL_RCC_OscConfig+0x76>
 80022e8:	4b80      	ldr	r3, [pc, #512]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a7f      	ldr	r2, [pc, #508]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 80022ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022f2:	6013      	str	r3, [r2, #0]
 80022f4:	e02e      	b.n	8002354 <HAL_RCC_OscConfig+0xd4>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d10c      	bne.n	8002318 <HAL_RCC_OscConfig+0x98>
 80022fe:	4b7b      	ldr	r3, [pc, #492]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a7a      	ldr	r2, [pc, #488]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 8002304:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002308:	6013      	str	r3, [r2, #0]
 800230a:	4b78      	ldr	r3, [pc, #480]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a77      	ldr	r2, [pc, #476]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 8002310:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002314:	6013      	str	r3, [r2, #0]
 8002316:	e01d      	b.n	8002354 <HAL_RCC_OscConfig+0xd4>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002320:	d10c      	bne.n	800233c <HAL_RCC_OscConfig+0xbc>
 8002322:	4b72      	ldr	r3, [pc, #456]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a71      	ldr	r2, [pc, #452]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 8002328:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800232c:	6013      	str	r3, [r2, #0]
 800232e:	4b6f      	ldr	r3, [pc, #444]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a6e      	ldr	r2, [pc, #440]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 8002334:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002338:	6013      	str	r3, [r2, #0]
 800233a:	e00b      	b.n	8002354 <HAL_RCC_OscConfig+0xd4>
 800233c:	4b6b      	ldr	r3, [pc, #428]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a6a      	ldr	r2, [pc, #424]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 8002342:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002346:	6013      	str	r3, [r2, #0]
 8002348:	4b68      	ldr	r3, [pc, #416]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a67      	ldr	r2, [pc, #412]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 800234e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002352:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d013      	beq.n	8002384 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800235c:	f7fe fe9c 	bl	8001098 <HAL_GetTick>
 8002360:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002362:	e008      	b.n	8002376 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002364:	f7fe fe98 	bl	8001098 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b64      	cmp	r3, #100	; 0x64
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e200      	b.n	8002778 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002376:	4b5d      	ldr	r3, [pc, #372]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d0f0      	beq.n	8002364 <HAL_RCC_OscConfig+0xe4>
 8002382:	e014      	b.n	80023ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002384:	f7fe fe88 	bl	8001098 <HAL_GetTick>
 8002388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800238a:	e008      	b.n	800239e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800238c:	f7fe fe84 	bl	8001098 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b64      	cmp	r3, #100	; 0x64
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e1ec      	b.n	8002778 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800239e:	4b53      	ldr	r3, [pc, #332]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1f0      	bne.n	800238c <HAL_RCC_OscConfig+0x10c>
 80023aa:	e000      	b.n	80023ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d063      	beq.n	8002482 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023ba:	4b4c      	ldr	r3, [pc, #304]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f003 030c 	and.w	r3, r3, #12
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d00b      	beq.n	80023de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80023c6:	4b49      	ldr	r3, [pc, #292]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f003 030c 	and.w	r3, r3, #12
 80023ce:	2b08      	cmp	r3, #8
 80023d0:	d11c      	bne.n	800240c <HAL_RCC_OscConfig+0x18c>
 80023d2:	4b46      	ldr	r3, [pc, #280]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d116      	bne.n	800240c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023de:	4b43      	ldr	r3, [pc, #268]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d005      	beq.n	80023f6 <HAL_RCC_OscConfig+0x176>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d001      	beq.n	80023f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e1c0      	b.n	8002778 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023f6:	4b3d      	ldr	r3, [pc, #244]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	695b      	ldr	r3, [r3, #20]
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	4939      	ldr	r1, [pc, #228]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 8002406:	4313      	orrs	r3, r2
 8002408:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800240a:	e03a      	b.n	8002482 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	691b      	ldr	r3, [r3, #16]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d020      	beq.n	8002456 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002414:	4b36      	ldr	r3, [pc, #216]	; (80024f0 <HAL_RCC_OscConfig+0x270>)
 8002416:	2201      	movs	r2, #1
 8002418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800241a:	f7fe fe3d 	bl	8001098 <HAL_GetTick>
 800241e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002420:	e008      	b.n	8002434 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002422:	f7fe fe39 	bl	8001098 <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d901      	bls.n	8002434 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e1a1      	b.n	8002778 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002434:	4b2d      	ldr	r3, [pc, #180]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d0f0      	beq.n	8002422 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002440:	4b2a      	ldr	r3, [pc, #168]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	695b      	ldr	r3, [r3, #20]
 800244c:	00db      	lsls	r3, r3, #3
 800244e:	4927      	ldr	r1, [pc, #156]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 8002450:	4313      	orrs	r3, r2
 8002452:	600b      	str	r3, [r1, #0]
 8002454:	e015      	b.n	8002482 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002456:	4b26      	ldr	r3, [pc, #152]	; (80024f0 <HAL_RCC_OscConfig+0x270>)
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800245c:	f7fe fe1c 	bl	8001098 <HAL_GetTick>
 8002460:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002462:	e008      	b.n	8002476 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002464:	f7fe fe18 	bl	8001098 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b02      	cmp	r3, #2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e180      	b.n	8002778 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002476:	4b1d      	ldr	r3, [pc, #116]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1f0      	bne.n	8002464 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0308 	and.w	r3, r3, #8
 800248a:	2b00      	cmp	r3, #0
 800248c:	d03a      	beq.n	8002504 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	699b      	ldr	r3, [r3, #24]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d019      	beq.n	80024ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002496:	4b17      	ldr	r3, [pc, #92]	; (80024f4 <HAL_RCC_OscConfig+0x274>)
 8002498:	2201      	movs	r2, #1
 800249a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800249c:	f7fe fdfc 	bl	8001098 <HAL_GetTick>
 80024a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024a2:	e008      	b.n	80024b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024a4:	f7fe fdf8 	bl	8001098 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e160      	b.n	8002778 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024b6:	4b0d      	ldr	r3, [pc, #52]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 80024b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d0f0      	beq.n	80024a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80024c2:	2001      	movs	r0, #1
 80024c4:	f000 fa9c 	bl	8002a00 <RCC_Delay>
 80024c8:	e01c      	b.n	8002504 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024ca:	4b0a      	ldr	r3, [pc, #40]	; (80024f4 <HAL_RCC_OscConfig+0x274>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024d0:	f7fe fde2 	bl	8001098 <HAL_GetTick>
 80024d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024d6:	e00f      	b.n	80024f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024d8:	f7fe fdde 	bl	8001098 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d908      	bls.n	80024f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e146      	b.n	8002778 <HAL_RCC_OscConfig+0x4f8>
 80024ea:	bf00      	nop
 80024ec:	40021000 	.word	0x40021000
 80024f0:	42420000 	.word	0x42420000
 80024f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024f8:	4b92      	ldr	r3, [pc, #584]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 80024fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d1e9      	bne.n	80024d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0304 	and.w	r3, r3, #4
 800250c:	2b00      	cmp	r3, #0
 800250e:	f000 80a6 	beq.w	800265e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002512:	2300      	movs	r3, #0
 8002514:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002516:	4b8b      	ldr	r3, [pc, #556]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 8002518:	69db      	ldr	r3, [r3, #28]
 800251a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d10d      	bne.n	800253e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002522:	4b88      	ldr	r3, [pc, #544]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 8002524:	69db      	ldr	r3, [r3, #28]
 8002526:	4a87      	ldr	r2, [pc, #540]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 8002528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800252c:	61d3      	str	r3, [r2, #28]
 800252e:	4b85      	ldr	r3, [pc, #532]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 8002530:	69db      	ldr	r3, [r3, #28]
 8002532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002536:	60bb      	str	r3, [r7, #8]
 8002538:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800253a:	2301      	movs	r3, #1
 800253c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800253e:	4b82      	ldr	r3, [pc, #520]	; (8002748 <HAL_RCC_OscConfig+0x4c8>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002546:	2b00      	cmp	r3, #0
 8002548:	d118      	bne.n	800257c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800254a:	4b7f      	ldr	r3, [pc, #508]	; (8002748 <HAL_RCC_OscConfig+0x4c8>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a7e      	ldr	r2, [pc, #504]	; (8002748 <HAL_RCC_OscConfig+0x4c8>)
 8002550:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002554:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002556:	f7fe fd9f 	bl	8001098 <HAL_GetTick>
 800255a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800255c:	e008      	b.n	8002570 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800255e:	f7fe fd9b 	bl	8001098 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	2b64      	cmp	r3, #100	; 0x64
 800256a:	d901      	bls.n	8002570 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e103      	b.n	8002778 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002570:	4b75      	ldr	r3, [pc, #468]	; (8002748 <HAL_RCC_OscConfig+0x4c8>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002578:	2b00      	cmp	r3, #0
 800257a:	d0f0      	beq.n	800255e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d106      	bne.n	8002592 <HAL_RCC_OscConfig+0x312>
 8002584:	4b6f      	ldr	r3, [pc, #444]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 8002586:	6a1b      	ldr	r3, [r3, #32]
 8002588:	4a6e      	ldr	r2, [pc, #440]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 800258a:	f043 0301 	orr.w	r3, r3, #1
 800258e:	6213      	str	r3, [r2, #32]
 8002590:	e02d      	b.n	80025ee <HAL_RCC_OscConfig+0x36e>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d10c      	bne.n	80025b4 <HAL_RCC_OscConfig+0x334>
 800259a:	4b6a      	ldr	r3, [pc, #424]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 800259c:	6a1b      	ldr	r3, [r3, #32]
 800259e:	4a69      	ldr	r2, [pc, #420]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 80025a0:	f023 0301 	bic.w	r3, r3, #1
 80025a4:	6213      	str	r3, [r2, #32]
 80025a6:	4b67      	ldr	r3, [pc, #412]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 80025a8:	6a1b      	ldr	r3, [r3, #32]
 80025aa:	4a66      	ldr	r2, [pc, #408]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 80025ac:	f023 0304 	bic.w	r3, r3, #4
 80025b0:	6213      	str	r3, [r2, #32]
 80025b2:	e01c      	b.n	80025ee <HAL_RCC_OscConfig+0x36e>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	2b05      	cmp	r3, #5
 80025ba:	d10c      	bne.n	80025d6 <HAL_RCC_OscConfig+0x356>
 80025bc:	4b61      	ldr	r3, [pc, #388]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 80025be:	6a1b      	ldr	r3, [r3, #32]
 80025c0:	4a60      	ldr	r2, [pc, #384]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 80025c2:	f043 0304 	orr.w	r3, r3, #4
 80025c6:	6213      	str	r3, [r2, #32]
 80025c8:	4b5e      	ldr	r3, [pc, #376]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 80025ca:	6a1b      	ldr	r3, [r3, #32]
 80025cc:	4a5d      	ldr	r2, [pc, #372]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 80025ce:	f043 0301 	orr.w	r3, r3, #1
 80025d2:	6213      	str	r3, [r2, #32]
 80025d4:	e00b      	b.n	80025ee <HAL_RCC_OscConfig+0x36e>
 80025d6:	4b5b      	ldr	r3, [pc, #364]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 80025d8:	6a1b      	ldr	r3, [r3, #32]
 80025da:	4a5a      	ldr	r2, [pc, #360]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 80025dc:	f023 0301 	bic.w	r3, r3, #1
 80025e0:	6213      	str	r3, [r2, #32]
 80025e2:	4b58      	ldr	r3, [pc, #352]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 80025e4:	6a1b      	ldr	r3, [r3, #32]
 80025e6:	4a57      	ldr	r2, [pc, #348]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 80025e8:	f023 0304 	bic.w	r3, r3, #4
 80025ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d015      	beq.n	8002622 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025f6:	f7fe fd4f 	bl	8001098 <HAL_GetTick>
 80025fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025fc:	e00a      	b.n	8002614 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025fe:	f7fe fd4b 	bl	8001098 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	f241 3288 	movw	r2, #5000	; 0x1388
 800260c:	4293      	cmp	r3, r2
 800260e:	d901      	bls.n	8002614 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e0b1      	b.n	8002778 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002614:	4b4b      	ldr	r3, [pc, #300]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 8002616:	6a1b      	ldr	r3, [r3, #32]
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d0ee      	beq.n	80025fe <HAL_RCC_OscConfig+0x37e>
 8002620:	e014      	b.n	800264c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002622:	f7fe fd39 	bl	8001098 <HAL_GetTick>
 8002626:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002628:	e00a      	b.n	8002640 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800262a:	f7fe fd35 	bl	8001098 <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	f241 3288 	movw	r2, #5000	; 0x1388
 8002638:	4293      	cmp	r3, r2
 800263a:	d901      	bls.n	8002640 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e09b      	b.n	8002778 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002640:	4b40      	ldr	r3, [pc, #256]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 8002642:	6a1b      	ldr	r3, [r3, #32]
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	2b00      	cmp	r3, #0
 800264a:	d1ee      	bne.n	800262a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800264c:	7dfb      	ldrb	r3, [r7, #23]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d105      	bne.n	800265e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002652:	4b3c      	ldr	r3, [pc, #240]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 8002654:	69db      	ldr	r3, [r3, #28]
 8002656:	4a3b      	ldr	r2, [pc, #236]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 8002658:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800265c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	69db      	ldr	r3, [r3, #28]
 8002662:	2b00      	cmp	r3, #0
 8002664:	f000 8087 	beq.w	8002776 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002668:	4b36      	ldr	r3, [pc, #216]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f003 030c 	and.w	r3, r3, #12
 8002670:	2b08      	cmp	r3, #8
 8002672:	d061      	beq.n	8002738 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	69db      	ldr	r3, [r3, #28]
 8002678:	2b02      	cmp	r3, #2
 800267a:	d146      	bne.n	800270a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800267c:	4b33      	ldr	r3, [pc, #204]	; (800274c <HAL_RCC_OscConfig+0x4cc>)
 800267e:	2200      	movs	r2, #0
 8002680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002682:	f7fe fd09 	bl	8001098 <HAL_GetTick>
 8002686:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002688:	e008      	b.n	800269c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800268a:	f7fe fd05 	bl	8001098 <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b02      	cmp	r3, #2
 8002696:	d901      	bls.n	800269c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e06d      	b.n	8002778 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800269c:	4b29      	ldr	r3, [pc, #164]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d1f0      	bne.n	800268a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a1b      	ldr	r3, [r3, #32]
 80026ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026b0:	d108      	bne.n	80026c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80026b2:	4b24      	ldr	r3, [pc, #144]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	4921      	ldr	r1, [pc, #132]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026c4:	4b1f      	ldr	r3, [pc, #124]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a19      	ldr	r1, [r3, #32]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d4:	430b      	orrs	r3, r1
 80026d6:	491b      	ldr	r1, [pc, #108]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026dc:	4b1b      	ldr	r3, [pc, #108]	; (800274c <HAL_RCC_OscConfig+0x4cc>)
 80026de:	2201      	movs	r2, #1
 80026e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e2:	f7fe fcd9 	bl	8001098 <HAL_GetTick>
 80026e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026e8:	e008      	b.n	80026fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ea:	f7fe fcd5 	bl	8001098 <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d901      	bls.n	80026fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e03d      	b.n	8002778 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026fc:	4b11      	ldr	r3, [pc, #68]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d0f0      	beq.n	80026ea <HAL_RCC_OscConfig+0x46a>
 8002708:	e035      	b.n	8002776 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800270a:	4b10      	ldr	r3, [pc, #64]	; (800274c <HAL_RCC_OscConfig+0x4cc>)
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002710:	f7fe fcc2 	bl	8001098 <HAL_GetTick>
 8002714:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002716:	e008      	b.n	800272a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002718:	f7fe fcbe 	bl	8001098 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b02      	cmp	r3, #2
 8002724:	d901      	bls.n	800272a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e026      	b.n	8002778 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800272a:	4b06      	ldr	r3, [pc, #24]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1f0      	bne.n	8002718 <HAL_RCC_OscConfig+0x498>
 8002736:	e01e      	b.n	8002776 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	69db      	ldr	r3, [r3, #28]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d107      	bne.n	8002750 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e019      	b.n	8002778 <HAL_RCC_OscConfig+0x4f8>
 8002744:	40021000 	.word	0x40021000
 8002748:	40007000 	.word	0x40007000
 800274c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002750:	4b0b      	ldr	r3, [pc, #44]	; (8002780 <HAL_RCC_OscConfig+0x500>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a1b      	ldr	r3, [r3, #32]
 8002760:	429a      	cmp	r2, r3
 8002762:	d106      	bne.n	8002772 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800276e:	429a      	cmp	r2, r3
 8002770:	d001      	beq.n	8002776 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e000      	b.n	8002778 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002776:	2300      	movs	r3, #0
}
 8002778:	4618      	mov	r0, r3
 800277a:	3718      	adds	r7, #24
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	40021000 	.word	0x40021000

08002784 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d101      	bne.n	8002798 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e0d0      	b.n	800293a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002798:	4b6a      	ldr	r3, [pc, #424]	; (8002944 <HAL_RCC_ClockConfig+0x1c0>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0307 	and.w	r3, r3, #7
 80027a0:	683a      	ldr	r2, [r7, #0]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d910      	bls.n	80027c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027a6:	4b67      	ldr	r3, [pc, #412]	; (8002944 <HAL_RCC_ClockConfig+0x1c0>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f023 0207 	bic.w	r2, r3, #7
 80027ae:	4965      	ldr	r1, [pc, #404]	; (8002944 <HAL_RCC_ClockConfig+0x1c0>)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027b6:	4b63      	ldr	r3, [pc, #396]	; (8002944 <HAL_RCC_ClockConfig+0x1c0>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0307 	and.w	r3, r3, #7
 80027be:	683a      	ldr	r2, [r7, #0]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d001      	beq.n	80027c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e0b8      	b.n	800293a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0302 	and.w	r3, r3, #2
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d020      	beq.n	8002816 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0304 	and.w	r3, r3, #4
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d005      	beq.n	80027ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027e0:	4b59      	ldr	r3, [pc, #356]	; (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	4a58      	ldr	r2, [pc, #352]	; (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 80027e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80027ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0308 	and.w	r3, r3, #8
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d005      	beq.n	8002804 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027f8:	4b53      	ldr	r3, [pc, #332]	; (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	4a52      	ldr	r2, [pc, #328]	; (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 80027fe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002802:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002804:	4b50      	ldr	r3, [pc, #320]	; (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	494d      	ldr	r1, [pc, #308]	; (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 8002812:	4313      	orrs	r3, r2
 8002814:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	2b00      	cmp	r3, #0
 8002820:	d040      	beq.n	80028a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	2b01      	cmp	r3, #1
 8002828:	d107      	bne.n	800283a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800282a:	4b47      	ldr	r3, [pc, #284]	; (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d115      	bne.n	8002862 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e07f      	b.n	800293a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	2b02      	cmp	r3, #2
 8002840:	d107      	bne.n	8002852 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002842:	4b41      	ldr	r3, [pc, #260]	; (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d109      	bne.n	8002862 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e073      	b.n	800293a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002852:	4b3d      	ldr	r3, [pc, #244]	; (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e06b      	b.n	800293a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002862:	4b39      	ldr	r3, [pc, #228]	; (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f023 0203 	bic.w	r2, r3, #3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	4936      	ldr	r1, [pc, #216]	; (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 8002870:	4313      	orrs	r3, r2
 8002872:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002874:	f7fe fc10 	bl	8001098 <HAL_GetTick>
 8002878:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800287a:	e00a      	b.n	8002892 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800287c:	f7fe fc0c 	bl	8001098 <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	f241 3288 	movw	r2, #5000	; 0x1388
 800288a:	4293      	cmp	r3, r2
 800288c:	d901      	bls.n	8002892 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e053      	b.n	800293a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002892:	4b2d      	ldr	r3, [pc, #180]	; (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f003 020c 	and.w	r2, r3, #12
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d1eb      	bne.n	800287c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028a4:	4b27      	ldr	r3, [pc, #156]	; (8002944 <HAL_RCC_ClockConfig+0x1c0>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0307 	and.w	r3, r3, #7
 80028ac:	683a      	ldr	r2, [r7, #0]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d210      	bcs.n	80028d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028b2:	4b24      	ldr	r3, [pc, #144]	; (8002944 <HAL_RCC_ClockConfig+0x1c0>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f023 0207 	bic.w	r2, r3, #7
 80028ba:	4922      	ldr	r1, [pc, #136]	; (8002944 <HAL_RCC_ClockConfig+0x1c0>)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	4313      	orrs	r3, r2
 80028c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028c2:	4b20      	ldr	r3, [pc, #128]	; (8002944 <HAL_RCC_ClockConfig+0x1c0>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0307 	and.w	r3, r3, #7
 80028ca:	683a      	ldr	r2, [r7, #0]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d001      	beq.n	80028d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e032      	b.n	800293a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0304 	and.w	r3, r3, #4
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d008      	beq.n	80028f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028e0:	4b19      	ldr	r3, [pc, #100]	; (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	4916      	ldr	r1, [pc, #88]	; (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0308 	and.w	r3, r3, #8
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d009      	beq.n	8002912 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028fe:	4b12      	ldr	r3, [pc, #72]	; (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	00db      	lsls	r3, r3, #3
 800290c:	490e      	ldr	r1, [pc, #56]	; (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 800290e:	4313      	orrs	r3, r2
 8002910:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002912:	f000 f821 	bl	8002958 <HAL_RCC_GetSysClockFreq>
 8002916:	4602      	mov	r2, r0
 8002918:	4b0b      	ldr	r3, [pc, #44]	; (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	091b      	lsrs	r3, r3, #4
 800291e:	f003 030f 	and.w	r3, r3, #15
 8002922:	490a      	ldr	r1, [pc, #40]	; (800294c <HAL_RCC_ClockConfig+0x1c8>)
 8002924:	5ccb      	ldrb	r3, [r1, r3]
 8002926:	fa22 f303 	lsr.w	r3, r2, r3
 800292a:	4a09      	ldr	r2, [pc, #36]	; (8002950 <HAL_RCC_ClockConfig+0x1cc>)
 800292c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800292e:	4b09      	ldr	r3, [pc, #36]	; (8002954 <HAL_RCC_ClockConfig+0x1d0>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4618      	mov	r0, r3
 8002934:	f7fe fb6e 	bl	8001014 <HAL_InitTick>

  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	40022000 	.word	0x40022000
 8002948:	40021000 	.word	0x40021000
 800294c:	08002f84 	.word	0x08002f84
 8002950:	20000000 	.word	0x20000000
 8002954:	20000004 	.word	0x20000004

08002958 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002958:	b480      	push	{r7}
 800295a:	b087      	sub	sp, #28
 800295c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800295e:	2300      	movs	r3, #0
 8002960:	60fb      	str	r3, [r7, #12]
 8002962:	2300      	movs	r3, #0
 8002964:	60bb      	str	r3, [r7, #8]
 8002966:	2300      	movs	r3, #0
 8002968:	617b      	str	r3, [r7, #20]
 800296a:	2300      	movs	r3, #0
 800296c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800296e:	2300      	movs	r3, #0
 8002970:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002972:	4b1e      	ldr	r3, [pc, #120]	; (80029ec <HAL_RCC_GetSysClockFreq+0x94>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f003 030c 	and.w	r3, r3, #12
 800297e:	2b04      	cmp	r3, #4
 8002980:	d002      	beq.n	8002988 <HAL_RCC_GetSysClockFreq+0x30>
 8002982:	2b08      	cmp	r3, #8
 8002984:	d003      	beq.n	800298e <HAL_RCC_GetSysClockFreq+0x36>
 8002986:	e027      	b.n	80029d8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002988:	4b19      	ldr	r3, [pc, #100]	; (80029f0 <HAL_RCC_GetSysClockFreq+0x98>)
 800298a:	613b      	str	r3, [r7, #16]
      break;
 800298c:	e027      	b.n	80029de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	0c9b      	lsrs	r3, r3, #18
 8002992:	f003 030f 	and.w	r3, r3, #15
 8002996:	4a17      	ldr	r2, [pc, #92]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002998:	5cd3      	ldrb	r3, [r2, r3]
 800299a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d010      	beq.n	80029c8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80029a6:	4b11      	ldr	r3, [pc, #68]	; (80029ec <HAL_RCC_GetSysClockFreq+0x94>)
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	0c5b      	lsrs	r3, r3, #17
 80029ac:	f003 0301 	and.w	r3, r3, #1
 80029b0:	4a11      	ldr	r2, [pc, #68]	; (80029f8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80029b2:	5cd3      	ldrb	r3, [r2, r3]
 80029b4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a0d      	ldr	r2, [pc, #52]	; (80029f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80029ba:	fb03 f202 	mul.w	r2, r3, r2
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c4:	617b      	str	r3, [r7, #20]
 80029c6:	e004      	b.n	80029d2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	4a0c      	ldr	r2, [pc, #48]	; (80029fc <HAL_RCC_GetSysClockFreq+0xa4>)
 80029cc:	fb02 f303 	mul.w	r3, r2, r3
 80029d0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	613b      	str	r3, [r7, #16]
      break;
 80029d6:	e002      	b.n	80029de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029d8:	4b05      	ldr	r3, [pc, #20]	; (80029f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80029da:	613b      	str	r3, [r7, #16]
      break;
 80029dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029de:	693b      	ldr	r3, [r7, #16]
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	371c      	adds	r7, #28
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bc80      	pop	{r7}
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	40021000 	.word	0x40021000
 80029f0:	007a1200 	.word	0x007a1200
 80029f4:	08002f94 	.word	0x08002f94
 80029f8:	08002fa4 	.word	0x08002fa4
 80029fc:	003d0900 	.word	0x003d0900

08002a00 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a08:	4b0a      	ldr	r3, [pc, #40]	; (8002a34 <RCC_Delay+0x34>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a0a      	ldr	r2, [pc, #40]	; (8002a38 <RCC_Delay+0x38>)
 8002a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a12:	0a5b      	lsrs	r3, r3, #9
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	fb02 f303 	mul.w	r3, r2, r3
 8002a1a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a1c:	bf00      	nop
  }
  while (Delay --);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	1e5a      	subs	r2, r3, #1
 8002a22:	60fa      	str	r2, [r7, #12]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d1f9      	bne.n	8002a1c <RCC_Delay+0x1c>
}
 8002a28:	bf00      	nop
 8002a2a:	bf00      	nop
 8002a2c:	3714      	adds	r7, #20
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bc80      	pop	{r7}
 8002a32:	4770      	bx	lr
 8002a34:	20000000 	.word	0x20000000
 8002a38:	10624dd3 	.word	0x10624dd3

08002a3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d101      	bne.n	8002a4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e041      	b.n	8002ad2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d106      	bne.n	8002a68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f7fe fa46 	bl	8000ef4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2202      	movs	r2, #2
 8002a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	3304      	adds	r3, #4
 8002a78:	4619      	mov	r1, r3
 8002a7a:	4610      	mov	r0, r2
 8002a7c:	f000 f8f4 	bl	8002c68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3708      	adds	r7, #8
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}

08002ada <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ada:	b580      	push	{r7, lr}
 8002adc:	b084      	sub	sp, #16
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
 8002ae2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d101      	bne.n	8002af6 <HAL_TIM_ConfigClockSource+0x1c>
 8002af2:	2302      	movs	r3, #2
 8002af4:	e0b4      	b.n	8002c60 <HAL_TIM_ConfigClockSource+0x186>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2201      	movs	r2, #1
 8002afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2202      	movs	r2, #2
 8002b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b14:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b1c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68ba      	ldr	r2, [r7, #8]
 8002b24:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b2e:	d03e      	beq.n	8002bae <HAL_TIM_ConfigClockSource+0xd4>
 8002b30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b34:	f200 8087 	bhi.w	8002c46 <HAL_TIM_ConfigClockSource+0x16c>
 8002b38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b3c:	f000 8086 	beq.w	8002c4c <HAL_TIM_ConfigClockSource+0x172>
 8002b40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b44:	d87f      	bhi.n	8002c46 <HAL_TIM_ConfigClockSource+0x16c>
 8002b46:	2b70      	cmp	r3, #112	; 0x70
 8002b48:	d01a      	beq.n	8002b80 <HAL_TIM_ConfigClockSource+0xa6>
 8002b4a:	2b70      	cmp	r3, #112	; 0x70
 8002b4c:	d87b      	bhi.n	8002c46 <HAL_TIM_ConfigClockSource+0x16c>
 8002b4e:	2b60      	cmp	r3, #96	; 0x60
 8002b50:	d050      	beq.n	8002bf4 <HAL_TIM_ConfigClockSource+0x11a>
 8002b52:	2b60      	cmp	r3, #96	; 0x60
 8002b54:	d877      	bhi.n	8002c46 <HAL_TIM_ConfigClockSource+0x16c>
 8002b56:	2b50      	cmp	r3, #80	; 0x50
 8002b58:	d03c      	beq.n	8002bd4 <HAL_TIM_ConfigClockSource+0xfa>
 8002b5a:	2b50      	cmp	r3, #80	; 0x50
 8002b5c:	d873      	bhi.n	8002c46 <HAL_TIM_ConfigClockSource+0x16c>
 8002b5e:	2b40      	cmp	r3, #64	; 0x40
 8002b60:	d058      	beq.n	8002c14 <HAL_TIM_ConfigClockSource+0x13a>
 8002b62:	2b40      	cmp	r3, #64	; 0x40
 8002b64:	d86f      	bhi.n	8002c46 <HAL_TIM_ConfigClockSource+0x16c>
 8002b66:	2b30      	cmp	r3, #48	; 0x30
 8002b68:	d064      	beq.n	8002c34 <HAL_TIM_ConfigClockSource+0x15a>
 8002b6a:	2b30      	cmp	r3, #48	; 0x30
 8002b6c:	d86b      	bhi.n	8002c46 <HAL_TIM_ConfigClockSource+0x16c>
 8002b6e:	2b20      	cmp	r3, #32
 8002b70:	d060      	beq.n	8002c34 <HAL_TIM_ConfigClockSource+0x15a>
 8002b72:	2b20      	cmp	r3, #32
 8002b74:	d867      	bhi.n	8002c46 <HAL_TIM_ConfigClockSource+0x16c>
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d05c      	beq.n	8002c34 <HAL_TIM_ConfigClockSource+0x15a>
 8002b7a:	2b10      	cmp	r3, #16
 8002b7c:	d05a      	beq.n	8002c34 <HAL_TIM_ConfigClockSource+0x15a>
 8002b7e:	e062      	b.n	8002c46 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002b90:	f000 f943 	bl	8002e1a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ba2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68ba      	ldr	r2, [r7, #8]
 8002baa:	609a      	str	r2, [r3, #8]
      break;
 8002bac:	e04f      	b.n	8002c4e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002bbe:	f000 f92c 	bl	8002e1a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	689a      	ldr	r2, [r3, #8]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002bd0:	609a      	str	r2, [r3, #8]
      break;
 8002bd2:	e03c      	b.n	8002c4e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002be0:	461a      	mov	r2, r3
 8002be2:	f000 f8a3 	bl	8002d2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2150      	movs	r1, #80	; 0x50
 8002bec:	4618      	mov	r0, r3
 8002bee:	f000 f8fa 	bl	8002de6 <TIM_ITRx_SetConfig>
      break;
 8002bf2:	e02c      	b.n	8002c4e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c00:	461a      	mov	r2, r3
 8002c02:	f000 f8c1 	bl	8002d88 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2160      	movs	r1, #96	; 0x60
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f000 f8ea 	bl	8002de6 <TIM_ITRx_SetConfig>
      break;
 8002c12:	e01c      	b.n	8002c4e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c20:	461a      	mov	r2, r3
 8002c22:	f000 f883 	bl	8002d2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2140      	movs	r1, #64	; 0x40
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f000 f8da 	bl	8002de6 <TIM_ITRx_SetConfig>
      break;
 8002c32:	e00c      	b.n	8002c4e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	4610      	mov	r0, r2
 8002c40:	f000 f8d1 	bl	8002de6 <TIM_ITRx_SetConfig>
      break;
 8002c44:	e003      	b.n	8002c4e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	73fb      	strb	r3, [r7, #15]
      break;
 8002c4a:	e000      	b.n	8002c4e <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002c4c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2201      	movs	r2, #1
 8002c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3710      	adds	r7, #16
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b085      	sub	sp, #20
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	4a29      	ldr	r2, [pc, #164]	; (8002d20 <TIM_Base_SetConfig+0xb8>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d00b      	beq.n	8002c98 <TIM_Base_SetConfig+0x30>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c86:	d007      	beq.n	8002c98 <TIM_Base_SetConfig+0x30>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	4a26      	ldr	r2, [pc, #152]	; (8002d24 <TIM_Base_SetConfig+0xbc>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d003      	beq.n	8002c98 <TIM_Base_SetConfig+0x30>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4a25      	ldr	r2, [pc, #148]	; (8002d28 <TIM_Base_SetConfig+0xc0>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d108      	bne.n	8002caa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	68fa      	ldr	r2, [r7, #12]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a1c      	ldr	r2, [pc, #112]	; (8002d20 <TIM_Base_SetConfig+0xb8>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d00b      	beq.n	8002cca <TIM_Base_SetConfig+0x62>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cb8:	d007      	beq.n	8002cca <TIM_Base_SetConfig+0x62>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a19      	ldr	r2, [pc, #100]	; (8002d24 <TIM_Base_SetConfig+0xbc>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d003      	beq.n	8002cca <TIM_Base_SetConfig+0x62>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a18      	ldr	r2, [pc, #96]	; (8002d28 <TIM_Base_SetConfig+0xc0>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d108      	bne.n	8002cdc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	68fa      	ldr	r2, [r7, #12]
 8002cee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	689a      	ldr	r2, [r3, #8]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	4a07      	ldr	r2, [pc, #28]	; (8002d20 <TIM_Base_SetConfig+0xb8>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d103      	bne.n	8002d10 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	691a      	ldr	r2, [r3, #16]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	615a      	str	r2, [r3, #20]
}
 8002d16:	bf00      	nop
 8002d18:	3714      	adds	r7, #20
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bc80      	pop	{r7}
 8002d1e:	4770      	bx	lr
 8002d20:	40012c00 	.word	0x40012c00
 8002d24:	40000400 	.word	0x40000400
 8002d28:	40000800 	.word	0x40000800

08002d2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b087      	sub	sp, #28
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6a1b      	ldr	r3, [r3, #32]
 8002d3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6a1b      	ldr	r3, [r3, #32]
 8002d42:	f023 0201 	bic.w	r2, r3, #1
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	699b      	ldr	r3, [r3, #24]
 8002d4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	011b      	lsls	r3, r3, #4
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	f023 030a 	bic.w	r3, r3, #10
 8002d68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d6a:	697a      	ldr	r2, [r7, #20]
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	697a      	ldr	r2, [r7, #20]
 8002d7c:	621a      	str	r2, [r3, #32]
}
 8002d7e:	bf00      	nop
 8002d80:	371c      	adds	r7, #28
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bc80      	pop	{r7}
 8002d86:	4770      	bx	lr

08002d88 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b087      	sub	sp, #28
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6a1b      	ldr	r3, [r3, #32]
 8002d98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6a1b      	ldr	r3, [r3, #32]
 8002d9e:	f023 0210 	bic.w	r2, r3, #16
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002db2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	031b      	lsls	r3, r3, #12
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002dc4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	011b      	lsls	r3, r3, #4
 8002dca:	697a      	ldr	r2, [r7, #20]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	693a      	ldr	r2, [r7, #16]
 8002dd4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	697a      	ldr	r2, [r7, #20]
 8002dda:	621a      	str	r2, [r3, #32]
}
 8002ddc:	bf00      	nop
 8002dde:	371c      	adds	r7, #28
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bc80      	pop	{r7}
 8002de4:	4770      	bx	lr

08002de6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002de6:	b480      	push	{r7}
 8002de8:	b085      	sub	sp, #20
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
 8002dee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dfc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002dfe:	683a      	ldr	r2, [r7, #0]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	f043 0307 	orr.w	r3, r3, #7
 8002e08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	68fa      	ldr	r2, [r7, #12]
 8002e0e:	609a      	str	r2, [r3, #8]
}
 8002e10:	bf00      	nop
 8002e12:	3714      	adds	r7, #20
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bc80      	pop	{r7}
 8002e18:	4770      	bx	lr

08002e1a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	b087      	sub	sp, #28
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	60f8      	str	r0, [r7, #12]
 8002e22:	60b9      	str	r1, [r7, #8]
 8002e24:	607a      	str	r2, [r7, #4]
 8002e26:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e34:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	021a      	lsls	r2, r3, #8
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	431a      	orrs	r2, r3
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	697a      	ldr	r2, [r7, #20]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	697a      	ldr	r2, [r7, #20]
 8002e4c:	609a      	str	r2, [r3, #8]
}
 8002e4e:	bf00      	nop
 8002e50:	371c      	adds	r7, #28
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bc80      	pop	{r7}
 8002e56:	4770      	bx	lr

08002e58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b085      	sub	sp, #20
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d101      	bne.n	8002e70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	e046      	b.n	8002efe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2202      	movs	r2, #2
 8002e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68fa      	ldr	r2, [r7, #12]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	68fa      	ldr	r2, [r7, #12]
 8002ea8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a16      	ldr	r2, [pc, #88]	; (8002f08 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d00e      	beq.n	8002ed2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ebc:	d009      	beq.n	8002ed2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a12      	ldr	r2, [pc, #72]	; (8002f0c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d004      	beq.n	8002ed2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a10      	ldr	r2, [pc, #64]	; (8002f10 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d10c      	bne.n	8002eec <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ed8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	68ba      	ldr	r2, [r7, #8]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68ba      	ldr	r2, [r7, #8]
 8002eea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3714      	adds	r7, #20
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bc80      	pop	{r7}
 8002f06:	4770      	bx	lr
 8002f08:	40012c00 	.word	0x40012c00
 8002f0c:	40000400 	.word	0x40000400
 8002f10:	40000800 	.word	0x40000800

08002f14 <memset>:
 8002f14:	4603      	mov	r3, r0
 8002f16:	4402      	add	r2, r0
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d100      	bne.n	8002f1e <memset+0xa>
 8002f1c:	4770      	bx	lr
 8002f1e:	f803 1b01 	strb.w	r1, [r3], #1
 8002f22:	e7f9      	b.n	8002f18 <memset+0x4>

08002f24 <__libc_init_array>:
 8002f24:	b570      	push	{r4, r5, r6, lr}
 8002f26:	2600      	movs	r6, #0
 8002f28:	4d0c      	ldr	r5, [pc, #48]	; (8002f5c <__libc_init_array+0x38>)
 8002f2a:	4c0d      	ldr	r4, [pc, #52]	; (8002f60 <__libc_init_array+0x3c>)
 8002f2c:	1b64      	subs	r4, r4, r5
 8002f2e:	10a4      	asrs	r4, r4, #2
 8002f30:	42a6      	cmp	r6, r4
 8002f32:	d109      	bne.n	8002f48 <__libc_init_array+0x24>
 8002f34:	f000 f81a 	bl	8002f6c <_init>
 8002f38:	2600      	movs	r6, #0
 8002f3a:	4d0a      	ldr	r5, [pc, #40]	; (8002f64 <__libc_init_array+0x40>)
 8002f3c:	4c0a      	ldr	r4, [pc, #40]	; (8002f68 <__libc_init_array+0x44>)
 8002f3e:	1b64      	subs	r4, r4, r5
 8002f40:	10a4      	asrs	r4, r4, #2
 8002f42:	42a6      	cmp	r6, r4
 8002f44:	d105      	bne.n	8002f52 <__libc_init_array+0x2e>
 8002f46:	bd70      	pop	{r4, r5, r6, pc}
 8002f48:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f4c:	4798      	blx	r3
 8002f4e:	3601      	adds	r6, #1
 8002f50:	e7ee      	b.n	8002f30 <__libc_init_array+0xc>
 8002f52:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f56:	4798      	blx	r3
 8002f58:	3601      	adds	r6, #1
 8002f5a:	e7f2      	b.n	8002f42 <__libc_init_array+0x1e>
 8002f5c:	08002fa8 	.word	0x08002fa8
 8002f60:	08002fa8 	.word	0x08002fa8
 8002f64:	08002fa8 	.word	0x08002fa8
 8002f68:	08002fac 	.word	0x08002fac

08002f6c <_init>:
 8002f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f6e:	bf00      	nop
 8002f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f72:	bc08      	pop	{r3}
 8002f74:	469e      	mov	lr, r3
 8002f76:	4770      	bx	lr

08002f78 <_fini>:
 8002f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f7a:	bf00      	nop
 8002f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f7e:	bc08      	pop	{r3}
 8002f80:	469e      	mov	lr, r3
 8002f82:	4770      	bx	lr
