
prototype.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042f4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08004400  08004400  00014400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800442c  0800442c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800442c  0800442c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800442c  0800442c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800442c  0800442c  0001442c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004430  08004430  00014430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004434  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000370  2000000c  08004440  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000037c  08004440  0002037c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ece5  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002444  00000000  00000000  0002ed5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e88  00000000  00000000  000311a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b51  00000000  00000000  00032030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000180a2  00000000  00000000  00032b81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000100e3  00000000  00000000  0004ac23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008ca2f  00000000  00000000  0005ad06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003c58  00000000  00000000  000e7738  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000eb390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080043e8 	.word	0x080043e8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080043e8 	.word	0x080043e8

0800014c <Can_Filter_Config>:
uint8_t	slaves_count = 0;
uint32_t Can_TxMailBox[3];

static ptrVoidFunction CAN_ISR_FUNCTION = NULL;

HAL_StatusTypeDef Can_Filter_Config(CAN_HandleTypeDef *hcan,uint8_t master_or_slave){
 800014c:	b580      	push	{r7, lr}
 800014e:	b08c      	sub	sp, #48	; 0x30
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	460b      	mov	r3, r1
 8000156:	70fb      	strb	r3, [r7, #3]
	if(!master_or_slave){
 8000158:	78fb      	ldrb	r3, [r7, #3]
 800015a:	2b00      	cmp	r3, #0
 800015c:	d139      	bne.n	80001d2 <Can_Filter_Config+0x86>

		CAN_FilterTypeDef	CANFilterConfig;
		CANFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 800015e:	2301      	movs	r3, #1
 8000160:	62bb      	str	r3, [r7, #40]	; 0x28
		CANFilterConfig.FilterBank = 10;
 8000162:	230a      	movs	r3, #10
 8000164:	61fb      	str	r3, [r7, #28]
		CANFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000166:	2300      	movs	r3, #0
 8000168:	61bb      	str	r3, [r7, #24]
		CANFilterConfig.FilterIdHigh = can_id<<5;
 800016a:	4b2f      	ldr	r3, [pc, #188]	; (8000228 <Can_Filter_Config+0xdc>)
 800016c:	681a      	ldr	r2, [r3, #0]
 800016e:	4b2f      	ldr	r3, [pc, #188]	; (800022c <Can_Filter_Config+0xe0>)
 8000170:	681b      	ldr	r3, [r3, #0]
 8000172:	405a      	eors	r2, r3
 8000174:	4b2e      	ldr	r3, [pc, #184]	; (8000230 <Can_Filter_Config+0xe4>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4053      	eors	r3, r2
 800017a:	0e1b      	lsrs	r3, r3, #24
 800017c:	015b      	lsls	r3, r3, #5
 800017e:	60bb      	str	r3, [r7, #8]
		CANFilterConfig.FilterIdLow = 0X0000;
 8000180:	2300      	movs	r3, #0
 8000182:	60fb      	str	r3, [r7, #12]
		CANFilterConfig.FilterMaskIdHigh = can_id<<5;
 8000184:	4b28      	ldr	r3, [pc, #160]	; (8000228 <Can_Filter_Config+0xdc>)
 8000186:	681a      	ldr	r2, [r3, #0]
 8000188:	4b28      	ldr	r3, [pc, #160]	; (800022c <Can_Filter_Config+0xe0>)
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	405a      	eors	r2, r3
 800018e:	4b28      	ldr	r3, [pc, #160]	; (8000230 <Can_Filter_Config+0xe4>)
 8000190:	681b      	ldr	r3, [r3, #0]
 8000192:	4053      	eors	r3, r2
 8000194:	0e1b      	lsrs	r3, r3, #24
 8000196:	015b      	lsls	r3, r3, #5
 8000198:	613b      	str	r3, [r7, #16]
		CANFilterConfig.FilterMaskIdLow = 0X0000;
 800019a:	2300      	movs	r3, #0
 800019c:	617b      	str	r3, [r7, #20]
		CANFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800019e:	2300      	movs	r3, #0
 80001a0:	623b      	str	r3, [r7, #32]
//		CANFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
		CANFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80001a2:	2301      	movs	r3, #1
 80001a4:	627b      	str	r3, [r7, #36]	; 0x24
		CANFilterConfig.SlaveStartFilterBank = 0;
 80001a6:	2300      	movs	r3, #0
 80001a8:	62fb      	str	r3, [r7, #44]	; 0x2c
		if( HAL_CAN_ConfigFilter(hcan, &CANFilterConfig) != HAL_OK)
 80001aa:	f107 0308 	add.w	r3, r7, #8
 80001ae:	4619      	mov	r1, r3
 80001b0:	6878      	ldr	r0, [r7, #4]
 80001b2:	f001 fade 	bl	8001772 <HAL_CAN_ConfigFilter>
 80001b6:	4603      	mov	r3, r0
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d001      	beq.n	80001c0 <Can_Filter_Config+0x74>
		{
			return HAL_ERROR;
 80001bc:	2301      	movs	r3, #1
 80001be:	e02f      	b.n	8000220 <Can_Filter_Config+0xd4>
		}
		HAL_CAN_Start(hcan);
 80001c0:	6878      	ldr	r0, [r7, #4]
 80001c2:	f001 fb9f 	bl	8001904 <HAL_CAN_Start>
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80001c6:	2102      	movs	r1, #2
 80001c8:	6878      	ldr	r0, [r7, #4]
 80001ca:	f001 fdcf 	bl	8001d6c <HAL_CAN_ActivateNotification>

		return HAL_OK;
 80001ce:	2300      	movs	r3, #0
 80001d0:	e026      	b.n	8000220 <Can_Filter_Config+0xd4>
	}
	else
	{
		CAN_FilterTypeDef	CANFilterConfig;
		CANFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 80001d2:	2301      	movs	r3, #1
 80001d4:	62bb      	str	r3, [r7, #40]	; 0x28
		CANFilterConfig.FilterBank = 10;
 80001d6:	230a      	movs	r3, #10
 80001d8:	61fb      	str	r3, [r7, #28]
		CANFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80001da:	2300      	movs	r3, #0
 80001dc:	61bb      	str	r3, [r7, #24]
		CANFilterConfig.FilterIdHigh = CAN_Master_Id<<5;
 80001de:	2300      	movs	r3, #0
 80001e0:	60bb      	str	r3, [r7, #8]
		CANFilterConfig.FilterIdLow = 0X0000;
 80001e2:	2300      	movs	r3, #0
 80001e4:	60fb      	str	r3, [r7, #12]
		CANFilterConfig.FilterMaskIdHigh = CAN_Master_Id<<5;
 80001e6:	2300      	movs	r3, #0
 80001e8:	613b      	str	r3, [r7, #16]
		CANFilterConfig.FilterMaskIdLow = 0X0000;
 80001ea:	2300      	movs	r3, #0
 80001ec:	617b      	str	r3, [r7, #20]
		CANFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80001ee:	2300      	movs	r3, #0
 80001f0:	623b      	str	r3, [r7, #32]
//		CANFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
		CANFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80001f2:	2301      	movs	r3, #1
 80001f4:	627b      	str	r3, [r7, #36]	; 0x24
		CANFilterConfig.SlaveStartFilterBank = 0;
 80001f6:	2300      	movs	r3, #0
 80001f8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( HAL_CAN_ConfigFilter(hcan, &CANFilterConfig) != HAL_OK)
 80001fa:	f107 0308 	add.w	r3, r7, #8
 80001fe:	4619      	mov	r1, r3
 8000200:	6878      	ldr	r0, [r7, #4]
 8000202:	f001 fab6 	bl	8001772 <HAL_CAN_ConfigFilter>
 8000206:	4603      	mov	r3, r0
 8000208:	2b00      	cmp	r3, #0
 800020a:	d001      	beq.n	8000210 <Can_Filter_Config+0xc4>
		{
			return HAL_ERROR;
 800020c:	2301      	movs	r3, #1
 800020e:	e007      	b.n	8000220 <Can_Filter_Config+0xd4>
		}
		HAL_CAN_Start(hcan);
 8000210:	6878      	ldr	r0, [r7, #4]
 8000212:	f001 fb77 	bl	8001904 <HAL_CAN_Start>
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000216:	2102      	movs	r1, #2
 8000218:	6878      	ldr	r0, [r7, #4]
 800021a:	f001 fda7 	bl	8001d6c <HAL_CAN_ActivateNotification>
		return HAL_OK;
 800021e:	2300      	movs	r3, #0
	}
}
 8000220:	4618      	mov	r0, r3
 8000222:	3730      	adds	r7, #48	; 0x30
 8000224:	46bd      	mov	sp, r7
 8000226:	bd80      	pop	{r7, pc}
 8000228:	1ffff7e8 	.word	0x1ffff7e8
 800022c:	1ffff7ec 	.word	0x1ffff7ec
 8000230:	1ffff7f0 	.word	0x1ffff7f0

08000234 <Can_Send>:

HAL_StatusTypeDef Can_Send(CAN_HandleTypeDef *hcan,uint8_t ID, uint8_t DLC, uint8_t* data,uint32_t* Mailbox)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af00      	add	r7, sp, #0
 800023a:	60f8      	str	r0, [r7, #12]
 800023c:	607b      	str	r3, [r7, #4]
 800023e:	460b      	mov	r3, r1
 8000240:	72fb      	strb	r3, [r7, #11]
 8000242:	4613      	mov	r3, r2
 8000244:	72bb      	strb	r3, [r7, #10]
	TxHeader.IDE = CAN_ID_STD;
 8000246:	4b0e      	ldr	r3, [pc, #56]	; (8000280 <Can_Send+0x4c>)
 8000248:	2200      	movs	r2, #0
 800024a:	609a      	str	r2, [r3, #8]
	TxHeader.StdId = ID;
 800024c:	7afb      	ldrb	r3, [r7, #11]
 800024e:	4a0c      	ldr	r2, [pc, #48]	; (8000280 <Can_Send+0x4c>)
 8000250:	6013      	str	r3, [r2, #0]
	TxHeader.RTR = CAN_RTR_DATA;
 8000252:	4b0b      	ldr	r3, [pc, #44]	; (8000280 <Can_Send+0x4c>)
 8000254:	2200      	movs	r2, #0
 8000256:	60da      	str	r2, [r3, #12]
	TxHeader.DLC = DLC;
 8000258:	7abb      	ldrb	r3, [r7, #10]
 800025a:	4a09      	ldr	r2, [pc, #36]	; (8000280 <Can_Send+0x4c>)
 800025c:	6113      	str	r3, [r2, #16]

	if ( HAL_CAN_AddTxMessage(hcan, &TxHeader, data, Mailbox) != HAL_OK)
 800025e:	69bb      	ldr	r3, [r7, #24]
 8000260:	687a      	ldr	r2, [r7, #4]
 8000262:	4907      	ldr	r1, [pc, #28]	; (8000280 <Can_Send+0x4c>)
 8000264:	68f8      	ldr	r0, [r7, #12]
 8000266:	f001 fb91 	bl	800198c <HAL_CAN_AddTxMessage>
 800026a:	4603      	mov	r3, r0
 800026c:	2b00      	cmp	r3, #0
 800026e:	d001      	beq.n	8000274 <Can_Send+0x40>
	{

		return HAL_ERROR;
 8000270:	2301      	movs	r3, #1
 8000272:	e000      	b.n	8000276 <Can_Send+0x42>
	}

	return HAL_OK;
 8000274:	2300      	movs	r3, #0
}
 8000276:	4618      	mov	r0, r3
 8000278:	3710      	adds	r7, #16
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	20000028 	.word	0x20000028

08000284 <Can_InterruptCallBack>:

void Can_InterruptCallBack(ptrVoidFunction callBackFunction)
{
 8000284:	b480      	push	{r7}
 8000286:	b083      	sub	sp, #12
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
	if(callBackFunction != NULL)
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	2b00      	cmp	r3, #0
 8000290:	d002      	beq.n	8000298 <Can_InterruptCallBack+0x14>
	{
		CAN_ISR_FUNCTION = callBackFunction;
 8000292:	4a04      	ldr	r2, [pc, #16]	; (80002a4 <Can_InterruptCallBack+0x20>)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	6013      	str	r3, [r2, #0]
	}
}
 8000298:	bf00      	nop
 800029a:	370c      	adds	r7, #12
 800029c:	46bd      	mov	sp, r7
 800029e:	bc80      	pop	{r7}
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop
 80002a4:	20000070 	.word	0x20000070

080002a8 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b082      	sub	sp, #8
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, Can_RxData);
 80002b0:	4b06      	ldr	r3, [pc, #24]	; (80002cc <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 80002b2:	4a07      	ldr	r2, [pc, #28]	; (80002d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 80002b4:	2100      	movs	r1, #0
 80002b6:	6878      	ldr	r0, [r7, #4]
 80002b8:	f001 fc37 	bl	8001b2a <HAL_CAN_GetRxMessage>

	CAN_ISR_FUNCTION();
 80002bc:	4b05      	ldr	r3, [pc, #20]	; (80002d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	4798      	blx	r3

}
 80002c2:	bf00      	nop
 80002c4:	3708      	adds	r7, #8
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	2000005c 	.word	0x2000005c
 80002d0:	20000040 	.word	0x20000040
 80002d4:	20000070 	.word	0x20000070

080002d8 <priority_queue_init>:
#include <stdint.h>

void heapify(priority_queue* queue, uint8_t index);
void swap_operations(priority_queue* queue, uint8_t index1, uint8_t index2);

void priority_queue_init(priority_queue* queue){
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
	queue->tail = 0;
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	2200      	movs	r2, #0
 80002e4:	701a      	strb	r2, [r3, #0]
}
 80002e6:	bf00      	nop
 80002e8:	370c      	adds	r7, #12
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bc80      	pop	{r7}
 80002ee:	4770      	bx	lr

080002f0 <priority_queue_push>:

void priority_queue_push(priority_queue* queue, uint8_t item, uint8_t priority){
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b084      	sub	sp, #16
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
 80002f8:	460b      	mov	r3, r1
 80002fa:	70fb      	strb	r3, [r7, #3]
 80002fc:	4613      	mov	r3, r2
 80002fe:	70bb      	strb	r3, [r7, #2]
	// TODO: add here an error state
	if(queue->tail >= MAX_ITEM_NUM)
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	2b0f      	cmp	r3, #15
 8000306:	d828      	bhi.n	800035a <priority_queue_push+0x6a>
		return;
	// add queue_item to the queue at index tail [x x x tail] <----- three elements, tail = 3, tail = number of elements
	queue->queue[queue->tail].item = item;
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	687a      	ldr	r2, [r7, #4]
 800030e:	005b      	lsls	r3, r3, #1
 8000310:	4413      	add	r3, r2
 8000312:	78fa      	ldrb	r2, [r7, #3]
 8000314:	705a      	strb	r2, [r3, #1]
	queue->queue[queue->tail].priority = priority;
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	781b      	ldrb	r3, [r3, #0]
 800031a:	687a      	ldr	r2, [r7, #4]
 800031c:	005b      	lsls	r3, r3, #1
 800031e:	4413      	add	r3, r2
 8000320:	78ba      	ldrb	r2, [r7, #2]
 8000322:	709a      	strb	r2, [r3, #2]
	// heapify the queue
	for(int i=(queue->tail-1)/2; i>=0; i--)
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	3b01      	subs	r3, #1
 800032a:	0fda      	lsrs	r2, r3, #31
 800032c:	4413      	add	r3, r2
 800032e:	105b      	asrs	r3, r3, #1
 8000330:	60fb      	str	r3, [r7, #12]
 8000332:	e008      	b.n	8000346 <priority_queue_push+0x56>
		heapify(queue, i);
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	b2db      	uxtb	r3, r3
 8000338:	4619      	mov	r1, r3
 800033a:	6878      	ldr	r0, [r7, #4]
 800033c:	f000 f843 	bl	80003c6 <heapify>
	for(int i=(queue->tail-1)/2; i>=0; i--)
 8000340:	68fb      	ldr	r3, [r7, #12]
 8000342:	3b01      	subs	r3, #1
 8000344:	60fb      	str	r3, [r7, #12]
 8000346:	68fb      	ldr	r3, [r7, #12]
 8000348:	2b00      	cmp	r3, #0
 800034a:	daf3      	bge.n	8000334 <priority_queue_push+0x44>
	// increase number of elements/tail
	queue->tail++;
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	781b      	ldrb	r3, [r3, #0]
 8000350:	3301      	adds	r3, #1
 8000352:	b2da      	uxtb	r2, r3
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	701a      	strb	r2, [r3, #0]
 8000358:	e000      	b.n	800035c <priority_queue_push+0x6c>
		return;
 800035a:	bf00      	nop
}
 800035c:	3710      	adds	r7, #16
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}

08000362 <priority_queue_pop>:

uint8_t priority_queue_pop(priority_queue* queue){
 8000362:	b580      	push	{r7, lr}
 8000364:	b082      	sub	sp, #8
 8000366:	af00      	add	r7, sp, #0
 8000368:	6078      	str	r0, [r7, #4]
	// TODO: add here an errors state
	if(queue->tail <=0)
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	781b      	ldrb	r3, [r3, #0]
 800036e:	2b00      	cmp	r3, #0
 8000370:	d101      	bne.n	8000376 <priority_queue_pop+0x14>
		return 0;
 8000372:	2300      	movs	r3, #0
 8000374:	e018      	b.n	80003a8 <priority_queue_pop+0x46>
	// swap first and last elements
	swap_operations(queue, 0, queue->tail-1);
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	3b01      	subs	r3, #1
 800037c:	b2db      	uxtb	r3, r3
 800037e:	461a      	mov	r2, r3
 8000380:	2100      	movs	r1, #0
 8000382:	6878      	ldr	r0, [r7, #4]
 8000384:	f000 f868 	bl	8000458 <swap_operations>
	// decrement tail so now, last element is out of bounds of the queue
	queue->tail--;
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	781b      	ldrb	r3, [r3, #0]
 800038c:	3b01      	subs	r3, #1
 800038e:	b2da      	uxtb	r2, r3
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	701a      	strb	r2, [r3, #0]
	// heapify the queue
	heapify(queue, 0);
 8000394:	2100      	movs	r1, #0
 8000396:	6878      	ldr	r0, [r7, #4]
 8000398:	f000 f815 	bl	80003c6 <heapify>
	// return the item of the element of the queue, which is discarded
	return queue->queue[queue->tail].item;
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	687a      	ldr	r2, [r7, #4]
 80003a2:	005b      	lsls	r3, r3, #1
 80003a4:	4413      	add	r3, r2
 80003a6:	785b      	ldrb	r3, [r3, #1]
}
 80003a8:	4618      	mov	r0, r3
 80003aa:	3708      	adds	r7, #8
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}

080003b0 <priority_queue_peak>:

uint8_t priority_queue_peak(priority_queue* queue){
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
	return queue->queue[0].item;
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	785b      	ldrb	r3, [r3, #1]
}
 80003bc:	4618      	mov	r0, r3
 80003be:	370c      	adds	r7, #12
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bc80      	pop	{r7}
 80003c4:	4770      	bx	lr

080003c6 <heapify>:

void heapify(priority_queue* queue, uint8_t index){
 80003c6:	b580      	push	{r7, lr}
 80003c8:	b084      	sub	sp, #16
 80003ca:	af00      	add	r7, sp, #0
 80003cc:	6078      	str	r0, [r7, #4]
 80003ce:	460b      	mov	r3, r1
 80003d0:	70fb      	strb	r3, [r7, #3]
	// store current node as the smallest and save left and right children
	uint8_t smallest = index;
 80003d2:	78fb      	ldrb	r3, [r7, #3]
 80003d4:	73fb      	strb	r3, [r7, #15]
	uint8_t left_child = index * 2 + 1;
 80003d6:	78fb      	ldrb	r3, [r7, #3]
 80003d8:	005b      	lsls	r3, r3, #1
 80003da:	b2db      	uxtb	r3, r3
 80003dc:	3301      	adds	r3, #1
 80003de:	73bb      	strb	r3, [r7, #14]
	uint8_t right_child = left_child + 1;
 80003e0:	7bbb      	ldrb	r3, [r7, #14]
 80003e2:	3301      	adds	r3, #1
 80003e4:	737b      	strb	r3, [r7, #13]
	// if left child is smaller than current, left child is the smallest
	if(left_child < queue->tail && queue->queue[left_child].priority < queue->queue[index].priority)
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	781b      	ldrb	r3, [r3, #0]
 80003ea:	7bba      	ldrb	r2, [r7, #14]
 80003ec:	429a      	cmp	r2, r3
 80003ee:	d20d      	bcs.n	800040c <heapify+0x46>
 80003f0:	7bbb      	ldrb	r3, [r7, #14]
 80003f2:	687a      	ldr	r2, [r7, #4]
 80003f4:	005b      	lsls	r3, r3, #1
 80003f6:	4413      	add	r3, r2
 80003f8:	789a      	ldrb	r2, [r3, #2]
 80003fa:	78fb      	ldrb	r3, [r7, #3]
 80003fc:	6879      	ldr	r1, [r7, #4]
 80003fe:	005b      	lsls	r3, r3, #1
 8000400:	440b      	add	r3, r1
 8000402:	789b      	ldrb	r3, [r3, #2]
 8000404:	429a      	cmp	r2, r3
 8000406:	d201      	bcs.n	800040c <heapify+0x46>
		smallest = left_child;
 8000408:	7bbb      	ldrb	r3, [r7, #14]
 800040a:	73fb      	strb	r3, [r7, #15]
	// if right child is smaller than current, right child is the smallest
	if(right_child < queue->tail && queue->queue[right_child].priority < queue->queue[index].priority)
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	7b7a      	ldrb	r2, [r7, #13]
 8000412:	429a      	cmp	r2, r3
 8000414:	d20d      	bcs.n	8000432 <heapify+0x6c>
 8000416:	7b7b      	ldrb	r3, [r7, #13]
 8000418:	687a      	ldr	r2, [r7, #4]
 800041a:	005b      	lsls	r3, r3, #1
 800041c:	4413      	add	r3, r2
 800041e:	789a      	ldrb	r2, [r3, #2]
 8000420:	78fb      	ldrb	r3, [r7, #3]
 8000422:	6879      	ldr	r1, [r7, #4]
 8000424:	005b      	lsls	r3, r3, #1
 8000426:	440b      	add	r3, r1
 8000428:	789b      	ldrb	r3, [r3, #2]
 800042a:	429a      	cmp	r2, r3
 800042c:	d201      	bcs.n	8000432 <heapify+0x6c>
			smallest = right_child;
 800042e:	7b7b      	ldrb	r3, [r7, #13]
 8000430:	73fb      	strb	r3, [r7, #15]
	// if the smallest is not the current, swap smallest with current then heapify again
	if(smallest != index){
 8000432:	7bfa      	ldrb	r2, [r7, #15]
 8000434:	78fb      	ldrb	r3, [r7, #3]
 8000436:	429a      	cmp	r2, r3
 8000438:	d00a      	beq.n	8000450 <heapify+0x8a>
		swap_operations(queue, smallest, index);
 800043a:	78fa      	ldrb	r2, [r7, #3]
 800043c:	7bfb      	ldrb	r3, [r7, #15]
 800043e:	4619      	mov	r1, r3
 8000440:	6878      	ldr	r0, [r7, #4]
 8000442:	f000 f809 	bl	8000458 <swap_operations>
		heapify(queue, smallest);
 8000446:	7bfb      	ldrb	r3, [r7, #15]
 8000448:	4619      	mov	r1, r3
 800044a:	6878      	ldr	r0, [r7, #4]
 800044c:	f7ff ffbb 	bl	80003c6 <heapify>
	}
}
 8000450:	bf00      	nop
 8000452:	3710      	adds	r7, #16
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}

08000458 <swap_operations>:

void swap_operations(priority_queue* queue, uint8_t index1, uint8_t index2){
 8000458:	b480      	push	{r7}
 800045a:	b085      	sub	sp, #20
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
 8000460:	460b      	mov	r3, r1
 8000462:	70fb      	strb	r3, [r7, #3]
 8000464:	4613      	mov	r3, r2
 8000466:	70bb      	strb	r3, [r7, #2]
	queue_item temp = queue->queue[index1];
 8000468:	78fb      	ldrb	r3, [r7, #3]
 800046a:	687a      	ldr	r2, [r7, #4]
 800046c:	005b      	lsls	r3, r3, #1
 800046e:	4413      	add	r3, r2
 8000470:	f107 020c 	add.w	r2, r7, #12
 8000474:	3301      	adds	r3, #1
 8000476:	881b      	ldrh	r3, [r3, #0]
 8000478:	8013      	strh	r3, [r2, #0]
	queue->queue[index1] = queue->queue[index2];
 800047a:	78bb      	ldrb	r3, [r7, #2]
 800047c:	78fa      	ldrb	r2, [r7, #3]
 800047e:	6879      	ldr	r1, [r7, #4]
 8000480:	0052      	lsls	r2, r2, #1
 8000482:	440a      	add	r2, r1
 8000484:	6879      	ldr	r1, [r7, #4]
 8000486:	005b      	lsls	r3, r3, #1
 8000488:	440b      	add	r3, r1
 800048a:	3201      	adds	r2, #1
 800048c:	3301      	adds	r3, #1
 800048e:	881b      	ldrh	r3, [r3, #0]
 8000490:	8013      	strh	r3, [r2, #0]
	queue->queue[index2] = temp;
 8000492:	78bb      	ldrb	r3, [r7, #2]
 8000494:	687a      	ldr	r2, [r7, #4]
 8000496:	005b      	lsls	r3, r3, #1
 8000498:	4413      	add	r3, r2
 800049a:	3301      	adds	r3, #1
 800049c:	f107 020c 	add.w	r2, r7, #12
 80004a0:	8812      	ldrh	r2, [r2, #0]
 80004a2:	801a      	strh	r2, [r3, #0]
}
 80004a4:	bf00      	nop
 80004a6:	3714      	adds	r7, #20
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bc80      	pop	{r7}
 80004ac:	4770      	bx	lr

080004ae <sheduler_init>:
 */

#include "sheduler.h"
#include <stdlib.h>

void sheduler_init(ROM_sheduler* sheduler){
 80004ae:	b580      	push	{r7, lr}
 80004b0:	b082      	sub	sp, #8
 80004b2:	af00      	add	r7, sp, #0
 80004b4:	6078      	str	r0, [r7, #4]
	sheduler->current_slave_in_ROM = 0;
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	2200      	movs	r2, #0
 80004ba:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
	sheduler->number_of_slaves = 0;
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	2200      	movs	r2, #0
 80004c2:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
	sheduler->number_of_available_operations = 0;
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	2200      	movs	r2, #0
 80004ca:	f883 21f1 	strb.w	r2, [r3, #497]	; 0x1f1
	sheduler->number_of_idle_slaves = 0;
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	2200      	movs	r2, #0
 80004d2:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
	sheduler->number_of_waiting_slaves = 0;
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	2200      	movs	r2, #0
 80004da:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
	sheduler->number_of_working_slaves = 0;
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	2200      	movs	r2, #0
 80004e2:	f883 21f0 	strb.w	r2, [r3, #496]	; 0x1f0
	sheduler->sheduler_state = INIT_STATE;
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	2201      	movs	r2, #1
 80004ea:	f883 21f2 	strb.w	r2, [r3, #498]	; 0x1f2
	sheduler->is_ROM_available = 1;
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	2201      	movs	r2, #1
 80004f2:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
	sheduler->process_being_sent.operation_ID = 0x00;
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	2200      	movs	r2, #0
 80004fa:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
	sheduler->selected_pin = 0;
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	2200      	movs	r2, #0
 8000502:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
	sheduler->slave_pins[0] = 0x20;
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	2220      	movs	r2, #32
 800050a:	f8a3 21f4 	strh.w	r2, [r3, #500]	; 0x1f4
	sheduler->slave_pins[1] = 0x40;
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	2240      	movs	r2, #64	; 0x40
 8000512:	f8a3 21f6 	strh.w	r2, [r3, #502]	; 0x1f6
	sheduler->slave_pins[2] = 0x80;
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	2280      	movs	r2, #128	; 0x80
 800051a:	f8a3 21f8 	strh.w	r2, [r3, #504]	; 0x1f8
	sheduler->slave_pins[3] = 0x100;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000524:	f8a3 21fa 	strh.w	r2, [r3, #506]	; 0x1fa
 	priority_queue_init(&sheduler->operations);
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	f503 73e5 	add.w	r3, r3, #458	; 0x1ca
 800052e:	4618      	mov	r0, r3
 8000530:	f7ff fed2 	bl	80002d8 <priority_queue_init>
	priority_queue_init(&sheduler->waiting_slaves_queue);
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	f203 13a9 	addw	r3, r3, #425	; 0x1a9
 800053a:	4618      	mov	r0, r3
 800053c:	f7ff fecc 	bl	80002d8 <priority_queue_init>
	stack_init(&sheduler->idle_slaves_stack);
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8000546:	4618      	mov	r0, r3
 8000548:	f000 f95e 	bl	8000808 <stack_init>
}
 800054c:	bf00      	nop
 800054e:	3708      	adds	r7, #8
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}

08000554 <add_idle_slave>:

void add_idle_slave(ROM_sheduler* sheduler, uint8_t slave_id, uint8_t slave_num){
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
 800055c:	460b      	mov	r3, r1
 800055e:	70fb      	strb	r3, [r7, #3]
 8000560:	4613      	mov	r3, r2
 8000562:	70bb      	strb	r3, [r7, #2]
	// TODO: add here an error state
	if(slave_num >= MAX_SLAVE_NUM)
 8000564:	78bb      	ldrb	r3, [r7, #2]
 8000566:	2b03      	cmp	r3, #3
 8000568:	d852      	bhi.n	8000610 <add_idle_slave+0xbc>
		return;
	// increase number of saved slaves
	sheduler->number_of_slaves++;
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	f893 31ed 	ldrb.w	r3, [r3, #493]	; 0x1ed
 8000570:	3301      	adds	r3, #1
 8000572:	b2da      	uxtb	r2, r3
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
	// increase number of known idle slaves
	sheduler->number_of_idle_slaves++;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8000580:	3301      	adds	r3, #1
 8000582:	b2da      	uxtb	r2, r3
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
	// register slave to SCB
	sheduler->slave_blocks[slave_num].slave_ID = slave_id;
 800058a:	78ba      	ldrb	r2, [r7, #2]
 800058c:	6879      	ldr	r1, [r7, #4]
 800058e:	4613      	mov	r3, r2
 8000590:	005b      	lsls	r3, r3, #1
 8000592:	4413      	add	r3, r2
 8000594:	005b      	lsls	r3, r3, #1
 8000596:	440b      	add	r3, r1
 8000598:	78fa      	ldrb	r2, [r7, #3]
 800059a:	701a      	strb	r2, [r3, #0]
	sheduler->slave_blocks[slave_num].slave_number = slave_num;
 800059c:	78ba      	ldrb	r2, [r7, #2]
 800059e:	6879      	ldr	r1, [r7, #4]
 80005a0:	4613      	mov	r3, r2
 80005a2:	005b      	lsls	r3, r3, #1
 80005a4:	4413      	add	r3, r2
 80005a6:	005b      	lsls	r3, r3, #1
 80005a8:	440b      	add	r3, r1
 80005aa:	3302      	adds	r3, #2
 80005ac:	78ba      	ldrb	r2, [r7, #2]
 80005ae:	701a      	strb	r2, [r3, #0]
	sheduler->slave_blocks[slave_num].slave_state = SLAVE_IDLE;
 80005b0:	78ba      	ldrb	r2, [r7, #2]
 80005b2:	6879      	ldr	r1, [r7, #4]
 80005b4:	4613      	mov	r3, r2
 80005b6:	005b      	lsls	r3, r3, #1
 80005b8:	4413      	add	r3, r2
 80005ba:	005b      	lsls	r3, r3, #1
 80005bc:	440b      	add	r3, r1
 80005be:	3301      	adds	r3, #1
 80005c0:	2200      	movs	r2, #0
 80005c2:	701a      	strb	r2, [r3, #0]
	sheduler->slave_blocks[slave_num].current_opcode = 0x00;
 80005c4:	78ba      	ldrb	r2, [r7, #2]
 80005c6:	6879      	ldr	r1, [r7, #4]
 80005c8:	4613      	mov	r3, r2
 80005ca:	005b      	lsls	r3, r3, #1
 80005cc:	4413      	add	r3, r2
 80005ce:	005b      	lsls	r3, r3, #1
 80005d0:	440b      	add	r3, r1
 80005d2:	3303      	adds	r3, #3
 80005d4:	2200      	movs	r2, #0
 80005d6:	701a      	strb	r2, [r3, #0]
	sheduler->slave_blocks[slave_num].pin = sheduler->slave_pins[sheduler->selected_pin - 1];
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	f9b3 31fc 	ldrsh.w	r3, [r3, #508]	; 0x1fc
 80005de:	3b01      	subs	r3, #1
 80005e0:	78ba      	ldrb	r2, [r7, #2]
 80005e2:	6879      	ldr	r1, [r7, #4]
 80005e4:	33f8      	adds	r3, #248	; 0xf8
 80005e6:	005b      	lsls	r3, r3, #1
 80005e8:	440b      	add	r3, r1
 80005ea:	8898      	ldrh	r0, [r3, #4]
 80005ec:	6879      	ldr	r1, [r7, #4]
 80005ee:	4613      	mov	r3, r2
 80005f0:	005b      	lsls	r3, r3, #1
 80005f2:	4413      	add	r3, r2
 80005f4:	005b      	lsls	r3, r3, #1
 80005f6:	440b      	add	r3, r1
 80005f8:	3304      	adds	r3, #4
 80005fa:	4602      	mov	r2, r0
 80005fc:	801a      	strh	r2, [r3, #0]
	// push slave number to free slave stack
	stack_push(&sheduler->idle_slaves_stack, slave_num);
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8000604:	78ba      	ldrb	r2, [r7, #2]
 8000606:	4611      	mov	r1, r2
 8000608:	4618      	mov	r0, r3
 800060a:	f000 f909 	bl	8000820 <stack_push>
 800060e:	e000      	b.n	8000612 <add_idle_slave+0xbe>
		return;
 8000610:	bf00      	nop
}
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}

08000618 <add_operation>:

// TODO: implement send_number_of_idle_slaves(uint8_t num)

void add_operation(ROM_sheduler* sheduler, operation_control_block new_operation){
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
 800061e:	60f8      	str	r0, [r7, #12]
 8000620:	1d3b      	adds	r3, r7, #4
 8000622:	e883 0006 	stmia.w	r3, {r1, r2}
	// TODO: add here an error state
	if(sheduler->number_of_available_operations >= MAX_OPERATIONS_NUM)
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	f893 31f1 	ldrb.w	r3, [r3, #497]	; 0x1f1
 800062c:	2b3f      	cmp	r3, #63	; 0x3f
 800062e:	d830      	bhi.n	8000692 <add_operation+0x7a>
		return;
	// register operation to OCB
	sheduler->operation_blocks[sheduler->number_of_available_operations] = new_operation;
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	f893 31f1 	ldrb.w	r3, [r3, #497]	; 0x1f1
 8000636:	4619      	mov	r1, r3
 8000638:	68fa      	ldr	r2, [r7, #12]
 800063a:	460b      	mov	r3, r1
 800063c:	005b      	lsls	r3, r3, #1
 800063e:	440b      	add	r3, r1
 8000640:	005b      	lsls	r3, r3, #1
 8000642:	4413      	add	r3, r2
 8000644:	3318      	adds	r3, #24
 8000646:	461a      	mov	r2, r3
 8000648:	1d3b      	adds	r3, r7, #4
 800064a:	6818      	ldr	r0, [r3, #0]
 800064c:	6010      	str	r0, [r2, #0]
 800064e:	889b      	ldrh	r3, [r3, #4]
 8000650:	8093      	strh	r3, [r2, #4]
	sheduler->operation_blocks[sheduler->number_of_available_operations].number_of_working_slaves = 0x00;
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	f893 31f1 	ldrb.w	r3, [r3, #497]	; 0x1f1
 8000658:	4619      	mov	r1, r3
 800065a:	68fa      	ldr	r2, [r7, #12]
 800065c:	460b      	mov	r3, r1
 800065e:	005b      	lsls	r3, r3, #1
 8000660:	440b      	add	r3, r1
 8000662:	005b      	lsls	r3, r3, #1
 8000664:	4413      	add	r3, r2
 8000666:	331c      	adds	r3, #28
 8000668:	2200      	movs	r2, #0
 800066a:	701a      	strb	r2, [r3, #0]
	// push operation number to operation queue
	priority_queue_push(&sheduler->operations, sheduler->number_of_available_operations, new_operation.operation_priority);
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	f503 70e5 	add.w	r0, r3, #458	; 0x1ca
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	f893 31f1 	ldrb.w	r3, [r3, #497]	; 0x1f1
 8000678:	797a      	ldrb	r2, [r7, #5]
 800067a:	4619      	mov	r1, r3
 800067c:	f7ff fe38 	bl	80002f0 <priority_queue_push>
	// increase number of available operations
	sheduler->number_of_available_operations++;
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	f893 31f1 	ldrb.w	r3, [r3, #497]	; 0x1f1
 8000686:	3301      	adds	r3, #1
 8000688:	b2da      	uxtb	r2, r3
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	f883 21f1 	strb.w	r2, [r3, #497]	; 0x1f1
 8000690:	e000      	b.n	8000694 <add_operation+0x7c>
		return;
 8000692:	bf00      	nop
}
 8000694:	3710      	adds	r7, #16
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}

0800069a <give_slave_opcode>:

// remove slave from the idle stack then push it to the waiting queue with the opcode to be sent
void give_slave_opcode(ROM_sheduler* sheduler, operation_control_block slave_operation, uint8_t slave_recieving_number){
 800069a:	b580      	push	{r7, lr}
 800069c:	b086      	sub	sp, #24
 800069e:	af00      	add	r7, sp, #0
 80006a0:	60f8      	str	r0, [r7, #12]
 80006a2:	1d38      	adds	r0, r7, #4
 80006a4:	e880 0006 	stmia.w	r0, {r1, r2}
 80006a8:	70fb      	strb	r3, [r7, #3]
	// TODO: add here an error state
	if(sheduler->number_of_idle_slaves <= 0)
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d079      	beq.n	80007a8 <give_slave_opcode+0x10e>
		return;
	// change slave state in SCB
#if SCHEDULING_TECHNIQUE == SCHEDULE_ON_NUMBERS

#else
	for(int i=0; i<slave_operation.number_of_working_slaves; i++){
 80006b4:	2300      	movs	r3, #0
 80006b6:	617b      	str	r3, [r7, #20]
 80006b8:	e002      	b.n	80006c0 <give_slave_opcode+0x26>
 80006ba:	697b      	ldr	r3, [r7, #20]
 80006bc:	3301      	adds	r3, #1
 80006be:	617b      	str	r3, [r7, #20]
 80006c0:	7a3b      	ldrb	r3, [r7, #8]
 80006c2:	461a      	mov	r2, r3
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	4293      	cmp	r3, r2
 80006c8:	dbf7      	blt.n	80006ba <give_slave_opcode+0x20>

	}
	sheduler->slave_blocks[slave_recieving_number].slave_state = SLAVE_WAITING;
 80006ca:	78fa      	ldrb	r2, [r7, #3]
 80006cc:	68f9      	ldr	r1, [r7, #12]
 80006ce:	4613      	mov	r3, r2
 80006d0:	005b      	lsls	r3, r3, #1
 80006d2:	4413      	add	r3, r2
 80006d4:	005b      	lsls	r3, r3, #1
 80006d6:	440b      	add	r3, r1
 80006d8:	3301      	adds	r3, #1
 80006da:	2201      	movs	r2, #1
 80006dc:	701a      	strb	r2, [r3, #0]
	// assign slave the operation code in its SCB
	sheduler->slave_blocks[slave_recieving_number].current_opcode = slave_operation.operation_ID;
 80006de:	78fa      	ldrb	r2, [r7, #3]
 80006e0:	7938      	ldrb	r0, [r7, #4]
 80006e2:	68f9      	ldr	r1, [r7, #12]
 80006e4:	4613      	mov	r3, r2
 80006e6:	005b      	lsls	r3, r3, #1
 80006e8:	4413      	add	r3, r2
 80006ea:	005b      	lsls	r3, r3, #1
 80006ec:	440b      	add	r3, r1
 80006ee:	3303      	adds	r3, #3
 80006f0:	4602      	mov	r2, r0
 80006f2:	701a      	strb	r2, [r3, #0]
	// push slave number to waiting slaves queue and use operation priority
	priority_queue_push(&sheduler->waiting_slaves_queue, slave_recieving_number, slave_operation.operation_priority);
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	f203 13a9 	addw	r3, r3, #425	; 0x1a9
 80006fa:	797a      	ldrb	r2, [r7, #5]
 80006fc:	78f9      	ldrb	r1, [r7, #3]
 80006fe:	4618      	mov	r0, r3
 8000700:	f7ff fdf6 	bl	80002f0 <priority_queue_push>
	// increase number of waiting slaves
	sheduler->number_of_waiting_slaves++;
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 800070a:	3301      	adds	r3, #1
 800070c:	b2da      	uxtb	r2, r3
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
	// reduce idle slaves number
	sheduler->number_of_idle_slaves--;
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 800071a:	3b01      	subs	r3, #1
 800071c:	b2da      	uxtb	r2, r3
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
	// decrement number of slaves left
	sheduler->process_being_sent.number_of_working_slaves--;
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800072a:	3b01      	subs	r3, #1
 800072c:	b2da      	uxtb	r2, r3
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	// if the operation was sent to the required slaves
	if(sheduler->process_being_sent.number_of_working_slaves == 0){
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800073a:	2b00      	cmp	r3, #0
 800073c:	d135      	bne.n	80007aa <give_slave_opcode+0x110>
		// set process to be sent to 0 again
		sheduler->process_being_sent.operation_ID = 0x00;
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	2200      	movs	r2, #0
 8000742:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
		// decrement number of available operations
		sheduler->number_of_available_operations--;
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	f893 31f1 	ldrb.w	r3, [r3, #497]	; 0x1f1
 800074c:	3b01      	subs	r3, #1
 800074e:	b2da      	uxtb	r2, r3
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	f883 21f1 	strb.w	r2, [r3, #497]	; 0x1f1
		// remove the operation from queue
		priority_queue_pop(&sheduler->operations);
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	f503 73e5 	add.w	r3, r3, #458	; 0x1ca
 800075c:	4618      	mov	r0, r3
 800075e:	f7ff fe00 	bl	8000362 <priority_queue_pop>
		// if we can still send operations, set process being set
		if(sheduler->number_of_idle_slaves != 0 && sheduler->number_of_available_operations != 0)
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8000768:	2b00      	cmp	r3, #0
 800076a:	d01e      	beq.n	80007aa <give_slave_opcode+0x110>
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	f893 31f1 	ldrb.w	r3, [r3, #497]	; 0x1f1
 8000772:	2b00      	cmp	r3, #0
 8000774:	d019      	beq.n	80007aa <give_slave_opcode+0x110>
			sheduler->process_being_sent = sheduler->operation_blocks[priority_queue_peak(&sheduler->operations)];
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	f503 73e5 	add.w	r3, r3, #458	; 0x1ca
 800077c:	4618      	mov	r0, r3
 800077e:	f7ff fe17 	bl	80003b0 <priority_queue_peak>
 8000782:	4603      	mov	r3, r0
 8000784:	4618      	mov	r0, r3
 8000786:	68fa      	ldr	r2, [r7, #12]
 8000788:	68f9      	ldr	r1, [r7, #12]
 800078a:	4603      	mov	r3, r0
 800078c:	005b      	lsls	r3, r3, #1
 800078e:	4403      	add	r3, r0
 8000790:	005b      	lsls	r3, r3, #1
 8000792:	440b      	add	r3, r1
 8000794:	f103 0118 	add.w	r1, r3, #24
 8000798:	f502 73ff 	add.w	r3, r2, #510	; 0x1fe
 800079c:	460a      	mov	r2, r1
 800079e:	6811      	ldr	r1, [r2, #0]
 80007a0:	6019      	str	r1, [r3, #0]
 80007a2:	8892      	ldrh	r2, [r2, #4]
 80007a4:	809a      	strh	r2, [r3, #4]
 80007a6:	e000      	b.n	80007aa <give_slave_opcode+0x110>
		return;
 80007a8:	bf00      	nop
	}
#endif
}
 80007aa:	3718      	adds	r7, #24
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <give_slave_access_to_ROM>:
// void add_waiting_slave(ROM_sheduler* sheduler, uint8_t acknowledged_opcode){
// 	sheduler->number_of_idle_slaves--;
// 	add_to_waiting_slaves(acknowledged_opcode);
// }

void give_slave_access_to_ROM(ROM_sheduler* sheduler){
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
	// pop slave from its waiting queue and set the current_slave_in_ROM to it
	sheduler->current_slave_in_ROM = priority_queue_pop(&sheduler->waiting_slaves_queue);
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	f203 13a9 	addw	r3, r3, #425	; 0x1a9
 80007be:	4618      	mov	r0, r3
 80007c0:	f7ff fdcf 	bl	8000362 <priority_queue_pop>
 80007c4:	4603      	mov	r3, r0
 80007c6:	461a      	mov	r2, r3
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
	// decremnt number of waiting slaves
	sheduler->number_of_waiting_slaves--;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 80007d4:	3b01      	subs	r3, #1
 80007d6:	b2da      	uxtb	r2, r3
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
	// change the slave's state in the block
	sheduler->slave_blocks[sheduler->current_slave_in_ROM].slave_state = SLAVE_IN_ROM;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 80007e4:	4619      	mov	r1, r3
 80007e6:	687a      	ldr	r2, [r7, #4]
 80007e8:	460b      	mov	r3, r1
 80007ea:	005b      	lsls	r3, r3, #1
 80007ec:	440b      	add	r3, r1
 80007ee:	005b      	lsls	r3, r3, #1
 80007f0:	4413      	add	r3, r2
 80007f2:	3301      	adds	r3, #1
 80007f4:	2202      	movs	r2, #2
 80007f6:	701a      	strb	r2, [r3, #0]
	// set ROM is not available
	sheduler->is_ROM_available = 0;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	2200      	movs	r2, #0
 80007fc:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
}
 8000800:	bf00      	nop
 8000802:	3708      	adds	r7, #8
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}

08000808 <stack_init>:
 *      Author: ahmad
 */

#include "stack.h"

void stack_init(stack* _stack){
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
	_stack->top = 0;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2200      	movs	r2, #0
 8000814:	701a      	strb	r2, [r3, #0]
}
 8000816:	bf00      	nop
 8000818:	370c      	adds	r7, #12
 800081a:	46bd      	mov	sp, r7
 800081c:	bc80      	pop	{r7}
 800081e:	4770      	bx	lr

08000820 <stack_push>:

void stack_push(stack* _stack, uint8_t item){
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
 8000828:	460b      	mov	r3, r1
 800082a:	70fb      	strb	r3, [r7, #3]
	// TODO: add here an error state
	if(_stack->top >= MAX_ITEM_NUM)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	2b0f      	cmp	r3, #15
 8000832:	d80d      	bhi.n	8000850 <stack_push+0x30>
		return;
	// add item to the top of stack, top = number of elements
	_stack->item[_stack->top] = item;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	461a      	mov	r2, r3
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	4413      	add	r3, r2
 800083e:	78fa      	ldrb	r2, [r7, #3]
 8000840:	705a      	strb	r2, [r3, #1]
	_stack->top++;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	3301      	adds	r3, #1
 8000848:	b2da      	uxtb	r2, r3
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	701a      	strb	r2, [r3, #0]
 800084e:	e000      	b.n	8000852 <stack_push+0x32>
		return;
 8000850:	bf00      	nop
}
 8000852:	370c      	adds	r7, #12
 8000854:	46bd      	mov	sp, r7
 8000856:	bc80      	pop	{r7}
 8000858:	4770      	bx	lr

0800085a <stack_pop>:

uint8_t stack_pop(stack* _stack){
 800085a:	b480      	push	{r7}
 800085c:	b083      	sub	sp, #12
 800085e:	af00      	add	r7, sp, #0
 8000860:	6078      	str	r0, [r7, #4]
	// TODO: add here an error state
	if(_stack->top <= 0)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d101      	bne.n	800086e <stack_pop+0x14>
			return 0;
 800086a:	2300      	movs	r3, #0
 800086c:	e00b      	b.n	8000886 <stack_pop+0x2c>
	// decrement top index, top becomes the last element
	_stack->top--;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	3b01      	subs	r3, #1
 8000874:	b2da      	uxtb	r2, r3
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	701a      	strb	r2, [r3, #0]
	return _stack->item[_stack->top];
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	461a      	mov	r2, r3
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	4413      	add	r3, r2
 8000884:	785b      	ldrb	r3, [r3, #1]
}
 8000886:	4618      	mov	r0, r3
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	bc80      	pop	{r7}
 800088e:	4770      	bx	lr

08000890 <stack_peak>:

uint8_t stack_peak(stack* _stack){
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
	return _stack->item[_stack->top-1];
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	3b01      	subs	r3, #1
 800089e:	687a      	ldr	r2, [r7, #4]
 80008a0:	4413      	add	r3, r2
 80008a2:	785b      	ldrb	r3, [r3, #1]
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	370c      	adds	r7, #12
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bc80      	pop	{r7}
 80008ac:	4770      	bx	lr
	...

080008b0 <reset_all_select_pins>:
void system_callback(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void reset_all_select_pins(void){
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
	for(uint8_t i=0; i<MAX_SLAVE_NUM; i++)
 80008b6:	2300      	movs	r3, #0
 80008b8:	71fb      	strb	r3, [r7, #7]
 80008ba:	e00d      	b.n	80008d8 <reset_all_select_pins+0x28>
		HAL_GPIO_WritePin(GPIOB, sheduler.slave_pins[i], GPIO_PIN_RESET);
 80008bc:	79fb      	ldrb	r3, [r7, #7]
 80008be:	4a0a      	ldr	r2, [pc, #40]	; (80008e8 <reset_all_select_pins+0x38>)
 80008c0:	33f8      	adds	r3, #248	; 0xf8
 80008c2:	005b      	lsls	r3, r3, #1
 80008c4:	4413      	add	r3, r2
 80008c6:	889b      	ldrh	r3, [r3, #4]
 80008c8:	2200      	movs	r2, #0
 80008ca:	4619      	mov	r1, r3
 80008cc:	4807      	ldr	r0, [pc, #28]	; (80008ec <reset_all_select_pins+0x3c>)
 80008ce:	f001 ffd9 	bl	8002884 <HAL_GPIO_WritePin>
	for(uint8_t i=0; i<MAX_SLAVE_NUM; i++)
 80008d2:	79fb      	ldrb	r3, [r7, #7]
 80008d4:	3301      	adds	r3, #1
 80008d6:	71fb      	strb	r3, [r7, #7]
 80008d8:	79fb      	ldrb	r3, [r7, #7]
 80008da:	2b03      	cmp	r3, #3
 80008dc:	d9ee      	bls.n	80008bc <reset_all_select_pins+0xc>
}
 80008de:	bf00      	nop
 80008e0:	bf00      	nop
 80008e2:	3708      	adds	r7, #8
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	20000174 	.word	0x20000174
 80008ec:	40010c00 	.word	0x40010c00

080008f0 <set_current_pin>:

void set_current_pin(void){
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, sheduler.slave_pins[sheduler.selected_pin], GPIO_PIN_SET);
 80008f4:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <set_current_pin+0x38>)
 80008f6:	f9b3 31fc 	ldrsh.w	r3, [r3, #508]	; 0x1fc
 80008fa:	4a0b      	ldr	r2, [pc, #44]	; (8000928 <set_current_pin+0x38>)
 80008fc:	33f8      	adds	r3, #248	; 0xf8
 80008fe:	005b      	lsls	r3, r3, #1
 8000900:	4413      	add	r3, r2
 8000902:	889b      	ldrh	r3, [r3, #4]
 8000904:	2201      	movs	r2, #1
 8000906:	4619      	mov	r1, r3
 8000908:	4808      	ldr	r0, [pc, #32]	; (800092c <set_current_pin+0x3c>)
 800090a:	f001 ffbb 	bl	8002884 <HAL_GPIO_WritePin>
	sheduler.selected_pin++;
 800090e:	4b06      	ldr	r3, [pc, #24]	; (8000928 <set_current_pin+0x38>)
 8000910:	f9b3 31fc 	ldrsh.w	r3, [r3, #508]	; 0x1fc
 8000914:	b29b      	uxth	r3, r3
 8000916:	3301      	adds	r3, #1
 8000918:	b29b      	uxth	r3, r3
 800091a:	b21a      	sxth	r2, r3
 800091c:	4b02      	ldr	r3, [pc, #8]	; (8000928 <set_current_pin+0x38>)
 800091e:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	20000174 	.word	0x20000174
 800092c:	40010c00 	.word	0x40010c00

08000930 <add_slave_to_sheduler>:

void add_slave_to_sheduler(void){
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim2);
 8000934:	4815      	ldr	r0, [pc, #84]	; (800098c <add_slave_to_sheduler+0x5c>)
 8000936:	f002 fc6f 	bl	8003218 <HAL_TIM_Base_Stop_IT>
	// deselect any slave
	reset_all_select_pins();
 800093a:	f7ff ffb9 	bl	80008b0 <reset_all_select_pins>
	// add slave to sheduler
	add_idle_slave(&sheduler, RxHeader.StdId, sheduler.number_of_slaves);
 800093e:	4b14      	ldr	r3, [pc, #80]	; (8000990 <add_slave_to_sheduler+0x60>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	b2db      	uxtb	r3, r3
 8000944:	4a13      	ldr	r2, [pc, #76]	; (8000994 <add_slave_to_sheduler+0x64>)
 8000946:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 800094a:	4619      	mov	r1, r3
 800094c:	4811      	ldr	r0, [pc, #68]	; (8000994 <add_slave_to_sheduler+0x64>)
 800094e:	f7ff fe01 	bl	8000554 <add_idle_slave>
	// if the next slave is the last one, change sheduler state
	if(sheduler.number_of_slaves == MAX_SLAVE_NUM || sheduler.selected_pin == MAX_SLAVE_NUM){
 8000952:	4b10      	ldr	r3, [pc, #64]	; (8000994 <add_slave_to_sheduler+0x64>)
 8000954:	f893 31ed 	ldrb.w	r3, [r3, #493]	; 0x1ed
 8000958:	2b04      	cmp	r3, #4
 800095a:	d004      	beq.n	8000966 <add_slave_to_sheduler+0x36>
 800095c:	4b0d      	ldr	r3, [pc, #52]	; (8000994 <add_slave_to_sheduler+0x64>)
 800095e:	f9b3 31fc 	ldrsh.w	r3, [r3, #508]	; 0x1fc
 8000962:	2b04      	cmp	r3, #4
 8000964:	d10c      	bne.n	8000980 <add_slave_to_sheduler+0x50>
//		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
		sheduler.sheduler_state = SENDING_CODE_STATE;
 8000966:	4b0b      	ldr	r3, [pc, #44]	; (8000994 <add_slave_to_sheduler+0x64>)
 8000968:	2203      	movs	r2, #3
 800096a:	f883 21f2 	strb.w	r2, [r3, #498]	; 0x1f2
		sheduler.selected_pin = -1;
 800096e:	4b09      	ldr	r3, [pc, #36]	; (8000994 <add_slave_to_sheduler+0x64>)
 8000970:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000974:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
		HAL_TIM_Base_Start_IT(&htim3);
 8000978:	4807      	ldr	r0, [pc, #28]	; (8000998 <add_slave_to_sheduler+0x68>)
 800097a:	f002 fbfb 	bl	8003174 <HAL_TIM_Base_Start_IT>
		return;
 800097e:	e004      	b.n	800098a <add_slave_to_sheduler+0x5a>
	}
	set_current_pin();
 8000980:	f7ff ffb6 	bl	80008f0 <set_current_pin>
	HAL_TIM_Base_Start_IT(&htim2);
 8000984:	4801      	ldr	r0, [pc, #4]	; (800098c <add_slave_to_sheduler+0x5c>)
 8000986:	f002 fbf5 	bl	8003174 <HAL_TIM_Base_Start_IT>
}
 800098a:	bd80      	pop	{r7, pc}
 800098c:	2000009c 	.word	0x2000009c
 8000990:	20000040 	.word	0x20000040
 8000994:	20000174 	.word	0x20000174
 8000998:	200000e4 	.word	0x200000e4

0800099c <send_opcode_to_slave>:

void send_opcode_to_slave(void){
 800099c:	b580      	push	{r7, lr}
 800099e:	b086      	sub	sp, #24
 80009a0:	af02      	add	r7, sp, #8
	// extract operation to be sent from the priority queue and the slave from the slave stack
	sheduler.process_being_sent = sheduler.operation_blocks[priority_queue_peak(&sheduler.operations)];
 80009a2:	4833      	ldr	r0, [pc, #204]	; (8000a70 <send_opcode_to_slave+0xd4>)
 80009a4:	f7ff fd04 	bl	80003b0 <priority_queue_peak>
 80009a8:	4603      	mov	r3, r0
 80009aa:	4618      	mov	r0, r3
 80009ac:	4a31      	ldr	r2, [pc, #196]	; (8000a74 <send_opcode_to_slave+0xd8>)
 80009ae:	4931      	ldr	r1, [pc, #196]	; (8000a74 <send_opcode_to_slave+0xd8>)
 80009b0:	4603      	mov	r3, r0
 80009b2:	005b      	lsls	r3, r3, #1
 80009b4:	4403      	add	r3, r0
 80009b6:	005b      	lsls	r3, r3, #1
 80009b8:	440b      	add	r3, r1
 80009ba:	f103 0118 	add.w	r1, r3, #24
 80009be:	f502 73ff 	add.w	r3, r2, #510	; 0x1fe
 80009c2:	460a      	mov	r2, r1
 80009c4:	6811      	ldr	r1, [r2, #0]
 80009c6:	6019      	str	r1, [r3, #0]
 80009c8:	8892      	ldrh	r2, [r2, #4]
 80009ca:	809a      	strh	r2, [r3, #4]
	uint8_t operation_id = priority_queue_peak(&sheduler.operations);
 80009cc:	4828      	ldr	r0, [pc, #160]	; (8000a70 <send_opcode_to_slave+0xd4>)
 80009ce:	f7ff fcef 	bl	80003b0 <priority_queue_peak>
 80009d2:	4603      	mov	r3, r0
 80009d4:	73fb      	strb	r3, [r7, #15]
	uint8_t slave_recieving_number = stack_peak(&sheduler.idle_slaves_stack);
 80009d6:	4828      	ldr	r0, [pc, #160]	; (8000a78 <send_opcode_to_slave+0xdc>)
 80009d8:	f7ff ff5a 	bl	8000890 <stack_peak>
 80009dc:	4603      	mov	r3, r0
 80009de:	73bb      	strb	r3, [r7, #14]
	// if the current operation needs more slaves than available, move on
	if(sheduler.number_of_idle_slaves < sheduler.process_being_sent.number_of_working_slaves){
 80009e0:	4b24      	ldr	r3, [pc, #144]	; (8000a74 <send_opcode_to_slave+0xd8>)
 80009e2:	f893 21ee 	ldrb.w	r2, [r3, #494]	; 0x1ee
 80009e6:	4b23      	ldr	r3, [pc, #140]	; (8000a74 <send_opcode_to_slave+0xd8>)
 80009e8:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80009ec:	429a      	cmp	r2, r3
 80009ee:	d204      	bcs.n	80009fa <send_opcode_to_slave+0x5e>
		sheduler.sheduler_state = WAITING_SIG_STATE;
 80009f0:	4b20      	ldr	r3, [pc, #128]	; (8000a74 <send_opcode_to_slave+0xd8>)
 80009f2:	2205      	movs	r2, #5
 80009f4:	f883 21f2 	strb.w	r2, [r3, #498]	; 0x1f2
		return;
 80009f8:	e037      	b.n	8000a6a <send_opcode_to_slave+0xce>
	}
	// extract operation data to be sent
	uint8_t data[8];
	data[0] = (uint8_t)FRAME_SIGNAL;
 80009fa:	2330      	movs	r3, #48	; 0x30
 80009fc:	713b      	strb	r3, [r7, #4]
	data[1] = sheduler.operation_blocks[operation_id].operation_ID;
 80009fe:	7bfa      	ldrb	r2, [r7, #15]
 8000a00:	491c      	ldr	r1, [pc, #112]	; (8000a74 <send_opcode_to_slave+0xd8>)
 8000a02:	4613      	mov	r3, r2
 8000a04:	005b      	lsls	r3, r3, #1
 8000a06:	4413      	add	r3, r2
 8000a08:	005b      	lsls	r3, r3, #1
 8000a0a:	440b      	add	r3, r1
 8000a0c:	3318      	adds	r3, #24
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	717b      	strb	r3, [r7, #5]
	data[2] = (uint8_t)(sheduler.operation_blocks[operation_id].operation_length >> 8);
 8000a12:	7bfa      	ldrb	r2, [r7, #15]
 8000a14:	4917      	ldr	r1, [pc, #92]	; (8000a74 <send_opcode_to_slave+0xd8>)
 8000a16:	4613      	mov	r3, r2
 8000a18:	005b      	lsls	r3, r3, #1
 8000a1a:	4413      	add	r3, r2
 8000a1c:	005b      	lsls	r3, r3, #1
 8000a1e:	440b      	add	r3, r1
 8000a20:	331a      	adds	r3, #26
 8000a22:	881b      	ldrh	r3, [r3, #0]
 8000a24:	0a1b      	lsrs	r3, r3, #8
 8000a26:	b29b      	uxth	r3, r3
 8000a28:	b2db      	uxtb	r3, r3
 8000a2a:	71bb      	strb	r3, [r7, #6]
	data[3] = (uint8_t)(sheduler.operation_blocks[operation_id].operation_length & 0xFF);
 8000a2c:	7bfa      	ldrb	r2, [r7, #15]
 8000a2e:	4911      	ldr	r1, [pc, #68]	; (8000a74 <send_opcode_to_slave+0xd8>)
 8000a30:	4613      	mov	r3, r2
 8000a32:	005b      	lsls	r3, r3, #1
 8000a34:	4413      	add	r3, r2
 8000a36:	005b      	lsls	r3, r3, #1
 8000a38:	440b      	add	r3, r1
 8000a3a:	331a      	adds	r3, #26
 8000a3c:	881b      	ldrh	r3, [r3, #0]
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	71fb      	strb	r3, [r7, #7]
	// set state to waiting ack then send to ensure interrupt works
	Can_Send(&hcan, sheduler.slave_blocks[slave_recieving_number].slave_ID, 4, data, &Can_TxMailBox[0]);
 8000a42:	7bba      	ldrb	r2, [r7, #14]
 8000a44:	490b      	ldr	r1, [pc, #44]	; (8000a74 <send_opcode_to_slave+0xd8>)
 8000a46:	4613      	mov	r3, r2
 8000a48:	005b      	lsls	r3, r3, #1
 8000a4a:	4413      	add	r3, r2
 8000a4c:	005b      	lsls	r3, r3, #1
 8000a4e:	440b      	add	r3, r1
 8000a50:	7819      	ldrb	r1, [r3, #0]
 8000a52:	1d3b      	adds	r3, r7, #4
 8000a54:	4a09      	ldr	r2, [pc, #36]	; (8000a7c <send_opcode_to_slave+0xe0>)
 8000a56:	9200      	str	r2, [sp, #0]
 8000a58:	2204      	movs	r2, #4
 8000a5a:	4809      	ldr	r0, [pc, #36]	; (8000a80 <send_opcode_to_slave+0xe4>)
 8000a5c:	f7ff fbea 	bl	8000234 <Can_Send>
	sheduler.sheduler_state = WAITING_ACK_STATE;
 8000a60:	4b04      	ldr	r3, [pc, #16]	; (8000a74 <send_opcode_to_slave+0xd8>)
 8000a62:	2204      	movs	r2, #4
 8000a64:	f883 21f2 	strb.w	r2, [r3, #498]	; 0x1f2
	return;
 8000a68:	bf00      	nop
}
 8000a6a:	3710      	adds	r7, #16
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	2000033e 	.word	0x2000033e
 8000a74:	20000174 	.word	0x20000174
 8000a78:	2000030c 	.word	0x2000030c
 8000a7c:	20000064 	.word	0x20000064
 8000a80:	20000074 	.word	0x20000074

08000a84 <give_rom_to_slave>:

void give_rom_to_slave(void){
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af02      	add	r7, sp, #8
	give_slave_access_to_ROM(&sheduler);
 8000a8a:	480d      	ldr	r0, [pc, #52]	; (8000ac0 <give_rom_to_slave+0x3c>)
 8000a8c:	f7ff fe90 	bl	80007b0 <give_slave_access_to_ROM>
	// send ROM signal to the slave to be in the ROM
	uint8_t data[8];
	data[0] = ROM_SIGNAL;
 8000a90:	2340      	movs	r3, #64	; 0x40
 8000a92:	703b      	strb	r3, [r7, #0]
	Can_Send(&hcan, sheduler.slave_blocks[sheduler.current_slave_in_ROM].slave_ID, 1, data, &Can_TxMailBox[0]);
 8000a94:	4b0a      	ldr	r3, [pc, #40]	; (8000ac0 <give_rom_to_slave+0x3c>)
 8000a96:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4a08      	ldr	r2, [pc, #32]	; (8000ac0 <give_rom_to_slave+0x3c>)
 8000a9e:	460b      	mov	r3, r1
 8000aa0:	005b      	lsls	r3, r3, #1
 8000aa2:	440b      	add	r3, r1
 8000aa4:	005b      	lsls	r3, r3, #1
 8000aa6:	4413      	add	r3, r2
 8000aa8:	7819      	ldrb	r1, [r3, #0]
 8000aaa:	463b      	mov	r3, r7
 8000aac:	4a05      	ldr	r2, [pc, #20]	; (8000ac4 <give_rom_to_slave+0x40>)
 8000aae:	9200      	str	r2, [sp, #0]
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	4805      	ldr	r0, [pc, #20]	; (8000ac8 <give_rom_to_slave+0x44>)
 8000ab4:	f7ff fbbe 	bl	8000234 <Can_Send>
}
 8000ab8:	bf00      	nop
 8000aba:	3708      	adds	r7, #8
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	20000174 	.word	0x20000174
 8000ac4:	20000064 	.word	0x20000064
 8000ac8:	20000074 	.word	0x20000074

08000acc <add_slave_to_waiting_queue>:

void add_slave_to_waiting_queue(void){
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
//		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
	uint8_t operation_id = priority_queue_peak(&sheduler.operations);
 8000ad2:	481c      	ldr	r0, [pc, #112]	; (8000b44 <add_slave_to_waiting_queue+0x78>)
 8000ad4:	f7ff fc6c 	bl	80003b0 <priority_queue_peak>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	71fb      	strb	r3, [r7, #7]
	uint8_t slave_recieving_number = stack_pop(&sheduler.idle_slaves_stack);
 8000adc:	481a      	ldr	r0, [pc, #104]	; (8000b48 <add_slave_to_waiting_queue+0x7c>)
 8000ade:	f7ff febc 	bl	800085a <stack_pop>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	71bb      	strb	r3, [r7, #6]
	// give the slave the current operation
	give_slave_opcode(&sheduler, sheduler.operation_blocks[operation_id], slave_recieving_number);
 8000ae6:	79fa      	ldrb	r2, [r7, #7]
 8000ae8:	79b9      	ldrb	r1, [r7, #6]
 8000aea:	4818      	ldr	r0, [pc, #96]	; (8000b4c <add_slave_to_waiting_queue+0x80>)
 8000aec:	4613      	mov	r3, r2
 8000aee:	005b      	lsls	r3, r3, #1
 8000af0:	4413      	add	r3, r2
 8000af2:	005b      	lsls	r3, r3, #1
 8000af4:	4403      	add	r3, r0
 8000af6:	3318      	adds	r3, #24
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	4610      	mov	r0, r2
 8000afc:	889b      	ldrh	r3, [r3, #4]
 8000afe:	2200      	movs	r2, #0
 8000b00:	f363 020f 	bfi	r2, r3, #0, #16
 8000b04:	460b      	mov	r3, r1
 8000b06:	4601      	mov	r1, r0
 8000b08:	4810      	ldr	r0, [pc, #64]	; (8000b4c <add_slave_to_waiting_queue+0x80>)
 8000b0a:	f7ff fdc6 	bl	800069a <give_slave_opcode>
	// change state to sending code again if there are still operations to send and slaves to receive
	// if slave received the opcode, the slave sends a RCV_ACK
	if(sheduler.is_ROM_available){
 8000b0e:	4b0f      	ldr	r3, [pc, #60]	; (8000b4c <add_slave_to_waiting_queue+0x80>)
 8000b10:	f893 31ec 	ldrb.w	r3, [r3, #492]	; 0x1ec
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <add_slave_to_waiting_queue+0x50>
		// move the slave from the waiting queue
		give_rom_to_slave();
 8000b18:	f7ff ffb4 	bl	8000a84 <give_rom_to_slave>
	}
	if(sheduler.number_of_idle_slaves != 0 && sheduler.number_of_available_operations != 0)
 8000b1c:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <add_slave_to_waiting_queue+0x80>)
 8000b1e:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d009      	beq.n	8000b3a <add_slave_to_waiting_queue+0x6e>
 8000b26:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <add_slave_to_waiting_queue+0x80>)
 8000b28:	f893 31f1 	ldrb.w	r3, [r3, #497]	; 0x1f1
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d004      	beq.n	8000b3a <add_slave_to_waiting_queue+0x6e>
		sheduler.sheduler_state = SENDING_CODE_STATE;
 8000b30:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <add_slave_to_waiting_queue+0x80>)
 8000b32:	2203      	movs	r2, #3
 8000b34:	f883 21f2 	strb.w	r2, [r3, #498]	; 0x1f2
	return;
 8000b38:	bf00      	nop
 8000b3a:	bf00      	nop
}
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	2000033e 	.word	0x2000033e
 8000b48:	2000030c 	.word	0x2000030c
 8000b4c:	20000174 	.word	0x20000174

08000b50 <set_slave_free>:

void set_slave_free(void){
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
	// set rom is available
	sheduler.is_ROM_available = 1;
 8000b54:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <set_slave_free+0x38>)
 8000b56:	2201      	movs	r2, #1
 8000b58:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
	// change the slave's state to idle
	sheduler.slave_blocks[sheduler.current_slave_in_ROM].slave_state = SLAVE_IDLE;
 8000b5c:	4b0a      	ldr	r3, [pc, #40]	; (8000b88 <set_slave_free+0x38>)
 8000b5e:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8000b62:	4619      	mov	r1, r3
 8000b64:	4a08      	ldr	r2, [pc, #32]	; (8000b88 <set_slave_free+0x38>)
 8000b66:	460b      	mov	r3, r1
 8000b68:	005b      	lsls	r3, r3, #1
 8000b6a:	440b      	add	r3, r1
 8000b6c:	005b      	lsls	r3, r3, #1
 8000b6e:	4413      	add	r3, r2
 8000b70:	3301      	adds	r3, #1
 8000b72:	2200      	movs	r2, #0
 8000b74:	701a      	strb	r2, [r3, #0]
	// if there are more waiting slaves, give one access to ROM
	if(sheduler.number_of_waiting_slaves != 0)
 8000b76:	4b04      	ldr	r3, [pc, #16]	; (8000b88 <set_slave_free+0x38>)
 8000b78:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <set_slave_free+0x34>
		give_rom_to_slave();
 8000b80:	f7ff ff80 	bl	8000a84 <give_rom_to_slave>
}
 8000b84:	bf00      	nop
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20000174 	.word	0x20000174

08000b8c <select_reset_slave>:

void select_reset_slave(uint32_t id){
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
	for(uint8_t i=0; i<sheduler.number_of_slaves; i++){
 8000b94:	2300      	movs	r3, #0
 8000b96:	73fb      	strb	r3, [r7, #15]
 8000b98:	e01c      	b.n	8000bd4 <select_reset_slave+0x48>
		if(sheduler.slave_blocks[i].slave_ID == id){
 8000b9a:	7bfa      	ldrb	r2, [r7, #15]
 8000b9c:	4914      	ldr	r1, [pc, #80]	; (8000bf0 <select_reset_slave+0x64>)
 8000b9e:	4613      	mov	r3, r2
 8000ba0:	005b      	lsls	r3, r3, #1
 8000ba2:	4413      	add	r3, r2
 8000ba4:	005b      	lsls	r3, r3, #1
 8000ba6:	440b      	add	r3, r1
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	461a      	mov	r2, r3
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d10d      	bne.n	8000bce <select_reset_slave+0x42>
			sheduler.selected_pin = sheduler.slave_blocks[i].pin;
 8000bb2:	7bfa      	ldrb	r2, [r7, #15]
 8000bb4:	490e      	ldr	r1, [pc, #56]	; (8000bf0 <select_reset_slave+0x64>)
 8000bb6:	4613      	mov	r3, r2
 8000bb8:	005b      	lsls	r3, r3, #1
 8000bba:	4413      	add	r3, r2
 8000bbc:	005b      	lsls	r3, r3, #1
 8000bbe:	440b      	add	r3, r1
 8000bc0:	3304      	adds	r3, #4
 8000bc2:	881b      	ldrh	r3, [r3, #0]
 8000bc4:	b21a      	sxth	r2, r3
 8000bc6:	4b0a      	ldr	r3, [pc, #40]	; (8000bf0 <select_reset_slave+0x64>)
 8000bc8:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
			break;
 8000bcc:	e008      	b.n	8000be0 <select_reset_slave+0x54>
	for(uint8_t i=0; i<sheduler.number_of_slaves; i++){
 8000bce:	7bfb      	ldrb	r3, [r7, #15]
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	73fb      	strb	r3, [r7, #15]
 8000bd4:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <select_reset_slave+0x64>)
 8000bd6:	f893 31ed 	ldrb.w	r3, [r3, #493]	; 0x1ed
 8000bda:	7bfa      	ldrb	r2, [r7, #15]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d3dc      	bcc.n	8000b9a <select_reset_slave+0xe>
		}
	}
	reset_all_select_pins();
 8000be0:	f7ff fe66 	bl	80008b0 <reset_all_select_pins>
	set_current_pin();
 8000be4:	f7ff fe84 	bl	80008f0 <set_current_pin>
}
 8000be8:	bf00      	nop
 8000bea:	3710      	adds	r7, #16
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	20000174 	.word	0x20000174

08000bf4 <set_slave_idle>:

void set_slave_idle(uint32_t id){
 8000bf4:	b480      	push	{r7}
 8000bf6:	b085      	sub	sp, #20
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
	for(uint8_t i=0; i<sheduler.number_of_slaves; i++){
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	73fb      	strb	r3, [r7, #15]
 8000c00:	e023      	b.n	8000c4a <set_slave_idle+0x56>
		if(sheduler.slave_blocks[i].slave_ID == id){
 8000c02:	7bfa      	ldrb	r2, [r7, #15]
 8000c04:	4916      	ldr	r1, [pc, #88]	; (8000c60 <set_slave_idle+0x6c>)
 8000c06:	4613      	mov	r3, r2
 8000c08:	005b      	lsls	r3, r3, #1
 8000c0a:	4413      	add	r3, r2
 8000c0c:	005b      	lsls	r3, r3, #1
 8000c0e:	440b      	add	r3, r1
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	461a      	mov	r2, r3
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d114      	bne.n	8000c44 <set_slave_idle+0x50>
			sheduler.slave_blocks[i].slave_state = SLAVE_IDLE;
 8000c1a:	7bfa      	ldrb	r2, [r7, #15]
 8000c1c:	4910      	ldr	r1, [pc, #64]	; (8000c60 <set_slave_idle+0x6c>)
 8000c1e:	4613      	mov	r3, r2
 8000c20:	005b      	lsls	r3, r3, #1
 8000c22:	4413      	add	r3, r2
 8000c24:	005b      	lsls	r3, r3, #1
 8000c26:	440b      	add	r3, r1
 8000c28:	3301      	adds	r3, #1
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	701a      	strb	r2, [r3, #0]
			sheduler.slave_blocks[i].current_opcode = 0x00;
 8000c2e:	7bfa      	ldrb	r2, [r7, #15]
 8000c30:	490b      	ldr	r1, [pc, #44]	; (8000c60 <set_slave_idle+0x6c>)
 8000c32:	4613      	mov	r3, r2
 8000c34:	005b      	lsls	r3, r3, #1
 8000c36:	4413      	add	r3, r2
 8000c38:	005b      	lsls	r3, r3, #1
 8000c3a:	440b      	add	r3, r1
 8000c3c:	3303      	adds	r3, #3
 8000c3e:	2200      	movs	r2, #0
 8000c40:	701a      	strb	r2, [r3, #0]
			return;
 8000c42:	e008      	b.n	8000c56 <set_slave_idle+0x62>
	for(uint8_t i=0; i<sheduler.number_of_slaves; i++){
 8000c44:	7bfb      	ldrb	r3, [r7, #15]
 8000c46:	3301      	adds	r3, #1
 8000c48:	73fb      	strb	r3, [r7, #15]
 8000c4a:	4b05      	ldr	r3, [pc, #20]	; (8000c60 <set_slave_idle+0x6c>)
 8000c4c:	f893 31ed 	ldrb.w	r3, [r3, #493]	; 0x1ed
 8000c50:	7bfa      	ldrb	r2, [r7, #15]
 8000c52:	429a      	cmp	r2, r3
 8000c54:	d3d5      	bcc.n	8000c02 <set_slave_idle+0xe>
		}
	}
}
 8000c56:	3714      	adds	r7, #20
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bc80      	pop	{r7}
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	20000174 	.word	0x20000174

08000c64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c6a:	f000 fc25 	bl	80014b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c6e:	f000 f84d 	bl	8000d0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c72:	f000 f98d 	bl	8000f90 <MX_GPIO_Init>
  MX_CAN_Init();
 8000c76:	f000 f88f 	bl	8000d98 <MX_CAN_Init>
  MX_TIM2_Init();
 8000c7a:	f000 f8c3 	bl	8000e04 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000c7e:	f000 f90f 	bl	8000ea0 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000c82:	f000 f95b 	bl	8000f3c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  Can_Filter_Config(&hcan, master);
 8000c86:	2101      	movs	r1, #1
 8000c88:	481b      	ldr	r0, [pc, #108]	; (8000cf8 <main+0x94>)
 8000c8a:	f7ff fa5f 	bl	800014c <Can_Filter_Config>
  // initiate can receive callback
  Can_InterruptCallBack(system_callback);
 8000c8e:	481b      	ldr	r0, [pc, #108]	; (8000cfc <main+0x98>)
 8000c90:	f7ff faf8 	bl	8000284 <Can_InterruptCallBack>
  // select pins for initialization
  sheduler_init(&sheduler);
 8000c94:	481a      	ldr	r0, [pc, #104]	; (8000d00 <main+0x9c>)
 8000c96:	f7ff fc0a 	bl	80004ae <sheduler_init>
  // create 2 dummy operations then add it to the operation priority queue
  // this approach is used since the interface microcontroller is not ready
  operation_control_block operation;
  operation.operation_ID = 0x00;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	703b      	strb	r3, [r7, #0]
  operation.operation_length = 0x1900;
 8000c9e:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000ca2:	807b      	strh	r3, [r7, #2]
  operation.number_of_working_slaves = 1;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	713b      	strb	r3, [r7, #4]
  operation.operation_priority = 1;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	707b      	strb	r3, [r7, #1]
  add_operation(&sheduler, operation);
 8000cac:	463b      	mov	r3, r7
 8000cae:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000cb2:	4813      	ldr	r0, [pc, #76]	; (8000d00 <main+0x9c>)
 8000cb4:	f7ff fcb0 	bl	8000618 <add_operation>
  add_operation(&sheduler, operation);
 8000cb8:	463b      	mov	r3, r7
 8000cba:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000cbe:	4810      	ldr	r0, [pc, #64]	; (8000d00 <main+0x9c>)
 8000cc0:	f7ff fcaa 	bl	8000618 <add_operation>
  add_operation(&sheduler, operation);
 8000cc4:	463b      	mov	r3, r7
 8000cc6:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000cca:	480d      	ldr	r0, [pc, #52]	; (8000d00 <main+0x9c>)
 8000ccc:	f7ff fca4 	bl	8000618 <add_operation>
  add_operation(&sheduler, operation);
 8000cd0:	463b      	mov	r3, r7
 8000cd2:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000cd6:	480a      	ldr	r0, [pc, #40]	; (8000d00 <main+0x9c>)
 8000cd8:	f7ff fc9e 	bl	8000618 <add_operation>
  // select the first slave
  reset_all_select_pins();
 8000cdc:	f7ff fde8 	bl	80008b0 <reset_all_select_pins>
  set_current_pin();
 8000ce0:	f7ff fe06 	bl	80008f0 <set_current_pin>
  HAL_TIM_Base_Start_IT(&htim2);
 8000ce4:	4807      	ldr	r0, [pc, #28]	; (8000d04 <main+0xa0>)
 8000ce6:	f002 fa45 	bl	8003174 <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000cea:	2201      	movs	r2, #1
 8000cec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cf0:	4805      	ldr	r0, [pc, #20]	; (8000d08 <main+0xa4>)
 8000cf2:	f001 fdc7 	bl	8002884 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
 8000cf6:	e7fe      	b.n	8000cf6 <main+0x92>
 8000cf8:	20000074 	.word	0x20000074
 8000cfc:	080010c1 	.word	0x080010c1
 8000d00:	20000174 	.word	0x20000174
 8000d04:	2000009c 	.word	0x2000009c
 8000d08:	40011000 	.word	0x40011000

08000d0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b090      	sub	sp, #64	; 0x40
 8000d10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d12:	f107 0318 	add.w	r3, r7, #24
 8000d16:	2228      	movs	r2, #40	; 0x28
 8000d18:	2100      	movs	r1, #0
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f003 fb38 	bl	8004390 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d20:	1d3b      	adds	r3, r7, #4
 8000d22:	2200      	movs	r2, #0
 8000d24:	601a      	str	r2, [r3, #0]
 8000d26:	605a      	str	r2, [r3, #4]
 8000d28:	609a      	str	r2, [r3, #8]
 8000d2a:	60da      	str	r2, [r3, #12]
 8000d2c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d36:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d40:	2302      	movs	r3, #2
 8000d42:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d48:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d4a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d50:	f107 0318 	add.w	r3, r7, #24
 8000d54:	4618      	mov	r0, r3
 8000d56:	f001 fdad 	bl	80028b4 <HAL_RCC_OscConfig>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000d60:	f000 fa20 	bl	80011a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d64:	230f      	movs	r3, #15
 8000d66:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d74:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d76:	2300      	movs	r3, #0
 8000d78:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d7a:	1d3b      	adds	r3, r7, #4
 8000d7c:	2102      	movs	r1, #2
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f002 f81a 	bl	8002db8 <HAL_RCC_ClockConfig>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000d8a:	f000 fa0b 	bl	80011a4 <Error_Handler>
  }
}
 8000d8e:	bf00      	nop
 8000d90:	3740      	adds	r7, #64	; 0x40
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
	...

08000d98 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000d9c:	4b17      	ldr	r3, [pc, #92]	; (8000dfc <MX_CAN_Init+0x64>)
 8000d9e:	4a18      	ldr	r2, [pc, #96]	; (8000e00 <MX_CAN_Init+0x68>)
 8000da0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 8000da2:	4b16      	ldr	r3, [pc, #88]	; (8000dfc <MX_CAN_Init+0x64>)
 8000da4:	2212      	movs	r2, #18
 8000da6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000da8:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <MX_CAN_Init+0x64>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000dae:	4b13      	ldr	r3, [pc, #76]	; (8000dfc <MX_CAN_Init+0x64>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000db4:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <MX_CAN_Init+0x64>)
 8000db6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000dba:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000dbc:	4b0f      	ldr	r3, [pc, #60]	; (8000dfc <MX_CAN_Init+0x64>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000dc2:	4b0e      	ldr	r3, [pc, #56]	; (8000dfc <MX_CAN_Init+0x64>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000dc8:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <MX_CAN_Init+0x64>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000dce:	4b0b      	ldr	r3, [pc, #44]	; (8000dfc <MX_CAN_Init+0x64>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000dd4:	4b09      	ldr	r3, [pc, #36]	; (8000dfc <MX_CAN_Init+0x64>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000dda:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <MX_CAN_Init+0x64>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000de0:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <MX_CAN_Init+0x64>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000de6:	4805      	ldr	r0, [pc, #20]	; (8000dfc <MX_CAN_Init+0x64>)
 8000de8:	f000 fbc8 	bl	800157c <HAL_CAN_Init>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 8000df2:	f000 f9d7 	bl	80011a4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	20000074 	.word	0x20000074
 8000e00:	40006400 	.word	0x40006400

08000e04 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b086      	sub	sp, #24
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e0a:	f107 0308 	add.w	r3, r7, #8
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	605a      	str	r2, [r3, #4]
 8000e14:	609a      	str	r2, [r3, #8]
 8000e16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e18:	463b      	mov	r3, r7
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e20:	4b1e      	ldr	r3, [pc, #120]	; (8000e9c <MX_TIM2_Init+0x98>)
 8000e22:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e26:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200-1;
 8000e28:	4b1c      	ldr	r3, [pc, #112]	; (8000e9c <MX_TIM2_Init+0x98>)
 8000e2a:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000e2e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e30:	4b1a      	ldr	r3, [pc, #104]	; (8000e9c <MX_TIM2_Init+0x98>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8000e36:	4b19      	ldr	r3, [pc, #100]	; (8000e9c <MX_TIM2_Init+0x98>)
 8000e38:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000e3c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e3e:	4b17      	ldr	r3, [pc, #92]	; (8000e9c <MX_TIM2_Init+0x98>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e44:	4b15      	ldr	r3, [pc, #84]	; (8000e9c <MX_TIM2_Init+0x98>)
 8000e46:	2280      	movs	r2, #128	; 0x80
 8000e48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e4a:	4814      	ldr	r0, [pc, #80]	; (8000e9c <MX_TIM2_Init+0x98>)
 8000e4c:	f002 f942 	bl	80030d4 <HAL_TIM_Base_Init>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000e56:	f000 f9a5 	bl	80011a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e5e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e60:	f107 0308 	add.w	r3, r7, #8
 8000e64:	4619      	mov	r1, r3
 8000e66:	480d      	ldr	r0, [pc, #52]	; (8000e9c <MX_TIM2_Init+0x98>)
 8000e68:	f002 fb0c 	bl	8003484 <HAL_TIM_ConfigClockSource>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000e72:	f000 f997 	bl	80011a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e76:	2300      	movs	r3, #0
 8000e78:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e7e:	463b      	mov	r3, r7
 8000e80:	4619      	mov	r1, r3
 8000e82:	4806      	ldr	r0, [pc, #24]	; (8000e9c <MX_TIM2_Init+0x98>)
 8000e84:	f002 fce2 	bl	800384c <HAL_TIMEx_MasterConfigSynchronization>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000e8e:	f000 f989 	bl	80011a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e92:	bf00      	nop
 8000e94:	3718      	adds	r7, #24
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	2000009c 	.word	0x2000009c

08000ea0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ea6:	f107 0308 	add.w	r3, r7, #8
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	605a      	str	r2, [r3, #4]
 8000eb0:	609a      	str	r2, [r3, #8]
 8000eb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eb4:	463b      	mov	r3, r7
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ebc:	4b1d      	ldr	r3, [pc, #116]	; (8000f34 <MX_TIM3_Init+0x94>)
 8000ebe:	4a1e      	ldr	r2, [pc, #120]	; (8000f38 <MX_TIM3_Init+0x98>)
 8000ec0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200-1;
 8000ec2:	4b1c      	ldr	r3, [pc, #112]	; (8000f34 <MX_TIM3_Init+0x94>)
 8000ec4:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000ec8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eca:	4b1a      	ldr	r3, [pc, #104]	; (8000f34 <MX_TIM3_Init+0x94>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500;
 8000ed0:	4b18      	ldr	r3, [pc, #96]	; (8000f34 <MX_TIM3_Init+0x94>)
 8000ed2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000ed6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ed8:	4b16      	ldr	r3, [pc, #88]	; (8000f34 <MX_TIM3_Init+0x94>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ede:	4b15      	ldr	r3, [pc, #84]	; (8000f34 <MX_TIM3_Init+0x94>)
 8000ee0:	2280      	movs	r2, #128	; 0x80
 8000ee2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ee4:	4813      	ldr	r0, [pc, #76]	; (8000f34 <MX_TIM3_Init+0x94>)
 8000ee6:	f002 f8f5 	bl	80030d4 <HAL_TIM_Base_Init>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000ef0:	f000 f958 	bl	80011a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ef4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ef8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000efa:	f107 0308 	add.w	r3, r7, #8
 8000efe:	4619      	mov	r1, r3
 8000f00:	480c      	ldr	r0, [pc, #48]	; (8000f34 <MX_TIM3_Init+0x94>)
 8000f02:	f002 fabf 	bl	8003484 <HAL_TIM_ConfigClockSource>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000f0c:	f000 f94a 	bl	80011a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f10:	2300      	movs	r3, #0
 8000f12:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f14:	2300      	movs	r3, #0
 8000f16:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f18:	463b      	mov	r3, r7
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4805      	ldr	r0, [pc, #20]	; (8000f34 <MX_TIM3_Init+0x94>)
 8000f1e:	f002 fc95 	bl	800384c <HAL_TIMEx_MasterConfigSynchronization>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000f28:	f000 f93c 	bl	80011a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000f2c:	bf00      	nop
 8000f2e:	3718      	adds	r7, #24
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	200000e4 	.word	0x200000e4
 8000f38:	40000400 	.word	0x40000400

08000f3c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f40:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <MX_USART2_UART_Init+0x4c>)
 8000f42:	4a12      	ldr	r2, [pc, #72]	; (8000f8c <MX_USART2_UART_Init+0x50>)
 8000f44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f46:	4b10      	ldr	r3, [pc, #64]	; (8000f88 <MX_USART2_UART_Init+0x4c>)
 8000f48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <MX_USART2_UART_Init+0x4c>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f54:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <MX_USART2_UART_Init+0x4c>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f5a:	4b0b      	ldr	r3, [pc, #44]	; (8000f88 <MX_USART2_UART_Init+0x4c>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f60:	4b09      	ldr	r3, [pc, #36]	; (8000f88 <MX_USART2_UART_Init+0x4c>)
 8000f62:	220c      	movs	r2, #12
 8000f64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f66:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <MX_USART2_UART_Init+0x4c>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f6c:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <MX_USART2_UART_Init+0x4c>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f72:	4805      	ldr	r0, [pc, #20]	; (8000f88 <MX_USART2_UART_Init+0x4c>)
 8000f74:	f002 fcda 	bl	800392c <HAL_UART_Init>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f7e:	f000 f911 	bl	80011a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	2000012c 	.word	0x2000012c
 8000f8c:	40004400 	.word	0x40004400

08000f90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b088      	sub	sp, #32
 8000f94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f96:	f107 0310 	add.w	r3, r7, #16
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]
 8000fa0:	609a      	str	r2, [r3, #8]
 8000fa2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa4:	4b42      	ldr	r3, [pc, #264]	; (80010b0 <MX_GPIO_Init+0x120>)
 8000fa6:	699b      	ldr	r3, [r3, #24]
 8000fa8:	4a41      	ldr	r2, [pc, #260]	; (80010b0 <MX_GPIO_Init+0x120>)
 8000faa:	f043 0310 	orr.w	r3, r3, #16
 8000fae:	6193      	str	r3, [r2, #24]
 8000fb0:	4b3f      	ldr	r3, [pc, #252]	; (80010b0 <MX_GPIO_Init+0x120>)
 8000fb2:	699b      	ldr	r3, [r3, #24]
 8000fb4:	f003 0310 	and.w	r3, r3, #16
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fbc:	4b3c      	ldr	r3, [pc, #240]	; (80010b0 <MX_GPIO_Init+0x120>)
 8000fbe:	699b      	ldr	r3, [r3, #24]
 8000fc0:	4a3b      	ldr	r2, [pc, #236]	; (80010b0 <MX_GPIO_Init+0x120>)
 8000fc2:	f043 0320 	orr.w	r3, r3, #32
 8000fc6:	6193      	str	r3, [r2, #24]
 8000fc8:	4b39      	ldr	r3, [pc, #228]	; (80010b0 <MX_GPIO_Init+0x120>)
 8000fca:	699b      	ldr	r3, [r3, #24]
 8000fcc:	f003 0320 	and.w	r3, r3, #32
 8000fd0:	60bb      	str	r3, [r7, #8]
 8000fd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd4:	4b36      	ldr	r3, [pc, #216]	; (80010b0 <MX_GPIO_Init+0x120>)
 8000fd6:	699b      	ldr	r3, [r3, #24]
 8000fd8:	4a35      	ldr	r2, [pc, #212]	; (80010b0 <MX_GPIO_Init+0x120>)
 8000fda:	f043 0304 	orr.w	r3, r3, #4
 8000fde:	6193      	str	r3, [r2, #24]
 8000fe0:	4b33      	ldr	r3, [pc, #204]	; (80010b0 <MX_GPIO_Init+0x120>)
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	f003 0304 	and.w	r3, r3, #4
 8000fe8:	607b      	str	r3, [r7, #4]
 8000fea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fec:	4b30      	ldr	r3, [pc, #192]	; (80010b0 <MX_GPIO_Init+0x120>)
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	4a2f      	ldr	r2, [pc, #188]	; (80010b0 <MX_GPIO_Init+0x120>)
 8000ff2:	f043 0308 	orr.w	r3, r3, #8
 8000ff6:	6193      	str	r3, [r2, #24]
 8000ff8:	4b2d      	ldr	r3, [pc, #180]	; (80010b0 <MX_GPIO_Init+0x120>)
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	f003 0308 	and.w	r3, r3, #8
 8001000:	603b      	str	r3, [r7, #0]
 8001002:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001004:	2200      	movs	r2, #0
 8001006:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800100a:	482a      	ldr	r0, [pc, #168]	; (80010b4 <MX_GPIO_Init+0x124>)
 800100c:	f001 fc3a 	bl	8002884 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001010:	2201      	movs	r2, #1
 8001012:	2120      	movs	r1, #32
 8001014:	4828      	ldr	r0, [pc, #160]	; (80010b8 <MX_GPIO_Init+0x128>)
 8001016:	f001 fc35 	bl	8002884 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10, GPIO_PIN_RESET);
 800101a:	2200      	movs	r2, #0
 800101c:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
 8001020:	4825      	ldr	r0, [pc, #148]	; (80010b8 <MX_GPIO_Init+0x128>)
 8001022:	f001 fc2f 	bl	8002884 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 8001026:	2200      	movs	r2, #0
 8001028:	f44f 71cc 	mov.w	r1, #408	; 0x198
 800102c:	4823      	ldr	r0, [pc, #140]	; (80010bc <MX_GPIO_Init+0x12c>)
 800102e:	f001 fc29 	bl	8002884 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001032:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001036:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001038:	2301      	movs	r3, #1
 800103a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001040:	2302      	movs	r3, #2
 8001042:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001044:	f107 0310 	add.w	r3, r7, #16
 8001048:	4619      	mov	r1, r3
 800104a:	481a      	ldr	r0, [pc, #104]	; (80010b4 <MX_GPIO_Init+0x124>)
 800104c:	f001 fa96 	bl	800257c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001050:	2320      	movs	r3, #32
 8001052:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001054:	2301      	movs	r3, #1
 8001056:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001058:	2301      	movs	r3, #1
 800105a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105c:	2302      	movs	r3, #2
 800105e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001060:	f107 0310 	add.w	r3, r7, #16
 8001064:	4619      	mov	r1, r3
 8001066:	4814      	ldr	r0, [pc, #80]	; (80010b8 <MX_GPIO_Init+0x128>)
 8001068:	f001 fa88 	bl	800257c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 800106c:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001070:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001072:	2301      	movs	r3, #1
 8001074:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107a:	2302      	movs	r3, #2
 800107c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107e:	f107 0310 	add.w	r3, r7, #16
 8001082:	4619      	mov	r1, r3
 8001084:	480c      	ldr	r0, [pc, #48]	; (80010b8 <MX_GPIO_Init+0x128>)
 8001086:	f001 fa79 	bl	800257c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_8;
 800108a:	f44f 73cc 	mov.w	r3, #408	; 0x198
 800108e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001090:	2301      	movs	r3, #1
 8001092:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	2300      	movs	r3, #0
 8001096:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001098:	2302      	movs	r3, #2
 800109a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800109c:	f107 0310 	add.w	r3, r7, #16
 80010a0:	4619      	mov	r1, r3
 80010a2:	4806      	ldr	r0, [pc, #24]	; (80010bc <MX_GPIO_Init+0x12c>)
 80010a4:	f001 fa6a 	bl	800257c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010a8:	bf00      	nop
 80010aa:	3720      	adds	r7, #32
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40021000 	.word	0x40021000
 80010b4:	40011000 	.word	0x40011000
 80010b8:	40010800 	.word	0x40010800
 80010bc:	40010c00 	.word	0x40010c00

080010c0 <system_callback>:

/* USER CODE BEGIN 4 */
void system_callback(){
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
	// INIT state adds slaves to the slave control block
	if(sheduler.sheduler_state == INIT_STATE){
 80010c4:	4b1e      	ldr	r3, [pc, #120]	; (8001140 <system_callback+0x80>)
 80010c6:	f893 31f2 	ldrb.w	r3, [r3, #498]	; 0x1f2
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d102      	bne.n	80010d4 <system_callback+0x14>
		add_slave_to_sheduler();
 80010ce:	f7ff fc2f 	bl	8000930 <add_slave_to_sheduler>
		return;
 80010d2:	e034      	b.n	800113e <system_callback+0x7e>
	}
	// if slave was reset after initialization
	if(Can_RxData[0] == START_SIGNAL){
 80010d4:	4b1b      	ldr	r3, [pc, #108]	; (8001144 <system_callback+0x84>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d10b      	bne.n	80010f4 <system_callback+0x34>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80010dc:	2200      	movs	r2, #0
 80010de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010e2:	4819      	ldr	r0, [pc, #100]	; (8001148 <system_callback+0x88>)
 80010e4:	f001 fbce 	bl	8002884 <HAL_GPIO_WritePin>
		select_reset_slave(RxHeader.StdId);
 80010e8:	4b18      	ldr	r3, [pc, #96]	; (800114c <system_callback+0x8c>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff fd4d 	bl	8000b8c <select_reset_slave>
		return;
 80010f2:	e024      	b.n	800113e <system_callback+0x7e>
	}
	// if the reset slave sends ack
	if(Can_RxData[0] == RESET_SIGNAL){
 80010f4:	4b13      	ldr	r3, [pc, #76]	; (8001144 <system_callback+0x84>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	2b50      	cmp	r3, #80	; 0x50
 80010fa:	d105      	bne.n	8001108 <system_callback+0x48>
		set_slave_idle(RxHeader.StdId);
 80010fc:	4b13      	ldr	r3, [pc, #76]	; (800114c <system_callback+0x8c>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff fd77 	bl	8000bf4 <set_slave_idle>
		return;
 8001106:	e01a      	b.n	800113e <system_callback+0x7e>
	}
	// send opcode to any slave
	if(sheduler.sheduler_state == SENDING_CODE_STATE){
 8001108:	4b0d      	ldr	r3, [pc, #52]	; (8001140 <system_callback+0x80>)
 800110a:	f893 31f2 	ldrb.w	r3, [r3, #498]	; 0x1f2
 800110e:	2b03      	cmp	r3, #3
 8001110:	d102      	bne.n	8001118 <system_callback+0x58>
		send_opcode_to_slave();
 8001112:	f7ff fc43 	bl	800099c <send_opcode_to_slave>
		return;
 8001116:	e012      	b.n	800113e <system_callback+0x7e>
	}
	// received ACK and now adding the slave to the waiting queue
	if(sheduler.sheduler_state == WAITING_ACK_STATE && Can_RxData[0] == RCVD_ACK){
 8001118:	4b09      	ldr	r3, [pc, #36]	; (8001140 <system_callback+0x80>)
 800111a:	f893 31f2 	ldrb.w	r3, [r3, #498]	; 0x1f2
 800111e:	2b04      	cmp	r3, #4
 8001120:	d106      	bne.n	8001130 <system_callback+0x70>
 8001122:	4b08      	ldr	r3, [pc, #32]	; (8001144 <system_callback+0x84>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	2b02      	cmp	r3, #2
 8001128:	d102      	bne.n	8001130 <system_callback+0x70>
		add_slave_to_waiting_queue();
 800112a:	f7ff fccf 	bl	8000acc <add_slave_to_waiting_queue>
		return;
 800112e:	e006      	b.n	800113e <system_callback+0x7e>
	}
	// if slave is finished accessing the ROM
	if(Can_RxData[0] == MEM_FREE_ACK){
 8001130:	4b04      	ldr	r3, [pc, #16]	; (8001144 <system_callback+0x84>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	2b03      	cmp	r3, #3
 8001136:	d102      	bne.n	800113e <system_callback+0x7e>
		set_slave_free();
 8001138:	f7ff fd0a 	bl	8000b50 <set_slave_free>
		return;
 800113c:	bf00      	nop
	}
}
 800113e:	bd80      	pop	{r7, pc}
 8001140:	20000174 	.word	0x20000174
 8001144:	2000005c 	.word	0x2000005c
 8001148:	40011000 	.word	0x40011000
 800114c:	20000040 	.word	0x20000040

08001150 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM2){
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001160:	d109      	bne.n	8001176 <HAL_TIM_PeriodElapsedCallback+0x26>
    	if(sheduler.sheduler_state == INIT_STATE){
 8001162:	4b0e      	ldr	r3, [pc, #56]	; (800119c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001164:	f893 31f2 	ldrb.w	r3, [r3, #498]	; 0x1f2
 8001168:	2b01      	cmp	r3, #1
 800116a:	d111      	bne.n	8001190 <HAL_TIM_PeriodElapsedCallback+0x40>
    		reset_all_select_pins();
 800116c:	f7ff fba0 	bl	80008b0 <reset_all_select_pins>
    		set_current_pin();
 8001170:	f7ff fbbe 	bl	80008f0 <set_current_pin>
    		return;
 8001174:	e00f      	b.n	8001196 <HAL_TIM_PeriodElapsedCallback+0x46>
    	}
    	return;
    }
    if(htim->Instance == TIM3){
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a09      	ldr	r2, [pc, #36]	; (80011a0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d10a      	bne.n	8001196 <HAL_TIM_PeriodElapsedCallback+0x46>
    	if(sheduler.sheduler_state == SENDING_CODE_STATE){
 8001180:	4b06      	ldr	r3, [pc, #24]	; (800119c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001182:	f893 31f2 	ldrb.w	r3, [r3, #498]	; 0x1f2
 8001186:	2b03      	cmp	r3, #3
 8001188:	d104      	bne.n	8001194 <HAL_TIM_PeriodElapsedCallback+0x44>
    		send_opcode_to_slave();
 800118a:	f7ff fc07 	bl	800099c <send_opcode_to_slave>
			return;
 800118e:	e002      	b.n	8001196 <HAL_TIM_PeriodElapsedCallback+0x46>
    	return;
 8001190:	bf00      	nop
 8001192:	e000      	b.n	8001196 <HAL_TIM_PeriodElapsedCallback+0x46>
    	}
    	return;
 8001194:	bf00      	nop
    }
}
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	20000174 	.word	0x20000174
 80011a0:	40000400 	.word	0x40000400

080011a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011a8:	b672      	cpsid	i
}
 80011aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80011ac:	e7fe      	b.n	80011ac <Error_Handler+0x8>
	...

080011b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011b6:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <HAL_MspInit+0x40>)
 80011b8:	699b      	ldr	r3, [r3, #24]
 80011ba:	4a0d      	ldr	r2, [pc, #52]	; (80011f0 <HAL_MspInit+0x40>)
 80011bc:	f043 0301 	orr.w	r3, r3, #1
 80011c0:	6193      	str	r3, [r2, #24]
 80011c2:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <HAL_MspInit+0x40>)
 80011c4:	699b      	ldr	r3, [r3, #24]
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	607b      	str	r3, [r7, #4]
 80011cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ce:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <HAL_MspInit+0x40>)
 80011d0:	69db      	ldr	r3, [r3, #28]
 80011d2:	4a07      	ldr	r2, [pc, #28]	; (80011f0 <HAL_MspInit+0x40>)
 80011d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d8:	61d3      	str	r3, [r2, #28]
 80011da:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <HAL_MspInit+0x40>)
 80011dc:	69db      	ldr	r3, [r3, #28]
 80011de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e2:	603b      	str	r3, [r7, #0]
 80011e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011e6:	bf00      	nop
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bc80      	pop	{r7}
 80011ee:	4770      	bx	lr
 80011f0:	40021000 	.word	0x40021000

080011f4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b088      	sub	sp, #32
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fc:	f107 0310 	add.w	r3, r7, #16
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a20      	ldr	r2, [pc, #128]	; (8001290 <HAL_CAN_MspInit+0x9c>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d139      	bne.n	8001288 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001214:	4b1f      	ldr	r3, [pc, #124]	; (8001294 <HAL_CAN_MspInit+0xa0>)
 8001216:	69db      	ldr	r3, [r3, #28]
 8001218:	4a1e      	ldr	r2, [pc, #120]	; (8001294 <HAL_CAN_MspInit+0xa0>)
 800121a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800121e:	61d3      	str	r3, [r2, #28]
 8001220:	4b1c      	ldr	r3, [pc, #112]	; (8001294 <HAL_CAN_MspInit+0xa0>)
 8001222:	69db      	ldr	r3, [r3, #28]
 8001224:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001228:	60fb      	str	r3, [r7, #12]
 800122a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800122c:	4b19      	ldr	r3, [pc, #100]	; (8001294 <HAL_CAN_MspInit+0xa0>)
 800122e:	699b      	ldr	r3, [r3, #24]
 8001230:	4a18      	ldr	r2, [pc, #96]	; (8001294 <HAL_CAN_MspInit+0xa0>)
 8001232:	f043 0304 	orr.w	r3, r3, #4
 8001236:	6193      	str	r3, [r2, #24]
 8001238:	4b16      	ldr	r3, [pc, #88]	; (8001294 <HAL_CAN_MspInit+0xa0>)
 800123a:	699b      	ldr	r3, [r3, #24]
 800123c:	f003 0304 	and.w	r3, r3, #4
 8001240:	60bb      	str	r3, [r7, #8]
 8001242:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001244:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001248:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800124a:	2300      	movs	r3, #0
 800124c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124e:	2300      	movs	r3, #0
 8001250:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001252:	f107 0310 	add.w	r3, r7, #16
 8001256:	4619      	mov	r1, r3
 8001258:	480f      	ldr	r0, [pc, #60]	; (8001298 <HAL_CAN_MspInit+0xa4>)
 800125a:	f001 f98f 	bl	800257c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800125e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001262:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001264:	2302      	movs	r3, #2
 8001266:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001268:	2303      	movs	r3, #3
 800126a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126c:	f107 0310 	add.w	r3, r7, #16
 8001270:	4619      	mov	r1, r3
 8001272:	4809      	ldr	r0, [pc, #36]	; (8001298 <HAL_CAN_MspInit+0xa4>)
 8001274:	f001 f982 	bl	800257c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8001278:	2200      	movs	r2, #0
 800127a:	2100      	movs	r1, #0
 800127c:	2014      	movs	r0, #20
 800127e:	f001 f894 	bl	80023aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001282:	2014      	movs	r0, #20
 8001284:	f001 f8ad 	bl	80023e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001288:	bf00      	nop
 800128a:	3720      	adds	r7, #32
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40006400 	.word	0x40006400
 8001294:	40021000 	.word	0x40021000
 8001298:	40010800 	.word	0x40010800

0800129c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012ac:	d114      	bne.n	80012d8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012ae:	4b19      	ldr	r3, [pc, #100]	; (8001314 <HAL_TIM_Base_MspInit+0x78>)
 80012b0:	69db      	ldr	r3, [r3, #28]
 80012b2:	4a18      	ldr	r2, [pc, #96]	; (8001314 <HAL_TIM_Base_MspInit+0x78>)
 80012b4:	f043 0301 	orr.w	r3, r3, #1
 80012b8:	61d3      	str	r3, [r2, #28]
 80012ba:	4b16      	ldr	r3, [pc, #88]	; (8001314 <HAL_TIM_Base_MspInit+0x78>)
 80012bc:	69db      	ldr	r3, [r3, #28]
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80012c6:	2200      	movs	r2, #0
 80012c8:	2100      	movs	r1, #0
 80012ca:	201c      	movs	r0, #28
 80012cc:	f001 f86d 	bl	80023aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80012d0:	201c      	movs	r0, #28
 80012d2:	f001 f886 	bl	80023e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80012d6:	e018      	b.n	800130a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a0e      	ldr	r2, [pc, #56]	; (8001318 <HAL_TIM_Base_MspInit+0x7c>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d113      	bne.n	800130a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012e2:	4b0c      	ldr	r3, [pc, #48]	; (8001314 <HAL_TIM_Base_MspInit+0x78>)
 80012e4:	69db      	ldr	r3, [r3, #28]
 80012e6:	4a0b      	ldr	r2, [pc, #44]	; (8001314 <HAL_TIM_Base_MspInit+0x78>)
 80012e8:	f043 0302 	orr.w	r3, r3, #2
 80012ec:	61d3      	str	r3, [r2, #28]
 80012ee:	4b09      	ldr	r3, [pc, #36]	; (8001314 <HAL_TIM_Base_MspInit+0x78>)
 80012f0:	69db      	ldr	r3, [r3, #28]
 80012f2:	f003 0302 	and.w	r3, r3, #2
 80012f6:	60bb      	str	r3, [r7, #8]
 80012f8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80012fa:	2200      	movs	r2, #0
 80012fc:	2100      	movs	r1, #0
 80012fe:	201d      	movs	r0, #29
 8001300:	f001 f853 	bl	80023aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001304:	201d      	movs	r0, #29
 8001306:	f001 f86c 	bl	80023e2 <HAL_NVIC_EnableIRQ>
}
 800130a:	bf00      	nop
 800130c:	3710      	adds	r7, #16
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40021000 	.word	0x40021000
 8001318:	40000400 	.word	0x40000400

0800131c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b088      	sub	sp, #32
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001324:	f107 0310 	add.w	r3, r7, #16
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	605a      	str	r2, [r3, #4]
 800132e:	609a      	str	r2, [r3, #8]
 8001330:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a1f      	ldr	r2, [pc, #124]	; (80013b4 <HAL_UART_MspInit+0x98>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d137      	bne.n	80013ac <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800133c:	4b1e      	ldr	r3, [pc, #120]	; (80013b8 <HAL_UART_MspInit+0x9c>)
 800133e:	69db      	ldr	r3, [r3, #28]
 8001340:	4a1d      	ldr	r2, [pc, #116]	; (80013b8 <HAL_UART_MspInit+0x9c>)
 8001342:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001346:	61d3      	str	r3, [r2, #28]
 8001348:	4b1b      	ldr	r3, [pc, #108]	; (80013b8 <HAL_UART_MspInit+0x9c>)
 800134a:	69db      	ldr	r3, [r3, #28]
 800134c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001350:	60fb      	str	r3, [r7, #12]
 8001352:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001354:	4b18      	ldr	r3, [pc, #96]	; (80013b8 <HAL_UART_MspInit+0x9c>)
 8001356:	699b      	ldr	r3, [r3, #24]
 8001358:	4a17      	ldr	r2, [pc, #92]	; (80013b8 <HAL_UART_MspInit+0x9c>)
 800135a:	f043 0304 	orr.w	r3, r3, #4
 800135e:	6193      	str	r3, [r2, #24]
 8001360:	4b15      	ldr	r3, [pc, #84]	; (80013b8 <HAL_UART_MspInit+0x9c>)
 8001362:	699b      	ldr	r3, [r3, #24]
 8001364:	f003 0304 	and.w	r3, r3, #4
 8001368:	60bb      	str	r3, [r7, #8]
 800136a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800136c:	2304      	movs	r3, #4
 800136e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001370:	2302      	movs	r3, #2
 8001372:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001374:	2303      	movs	r3, #3
 8001376:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001378:	f107 0310 	add.w	r3, r7, #16
 800137c:	4619      	mov	r1, r3
 800137e:	480f      	ldr	r0, [pc, #60]	; (80013bc <HAL_UART_MspInit+0xa0>)
 8001380:	f001 f8fc 	bl	800257c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001384:	2308      	movs	r3, #8
 8001386:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001388:	2300      	movs	r3, #0
 800138a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001390:	f107 0310 	add.w	r3, r7, #16
 8001394:	4619      	mov	r1, r3
 8001396:	4809      	ldr	r0, [pc, #36]	; (80013bc <HAL_UART_MspInit+0xa0>)
 8001398:	f001 f8f0 	bl	800257c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800139c:	2200      	movs	r2, #0
 800139e:	2100      	movs	r1, #0
 80013a0:	2026      	movs	r0, #38	; 0x26
 80013a2:	f001 f802 	bl	80023aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80013a6:	2026      	movs	r0, #38	; 0x26
 80013a8:	f001 f81b 	bl	80023e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013ac:	bf00      	nop
 80013ae:	3720      	adds	r7, #32
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	40004400 	.word	0x40004400
 80013b8:	40021000 	.word	0x40021000
 80013bc:	40010800 	.word	0x40010800

080013c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013c4:	e7fe      	b.n	80013c4 <NMI_Handler+0x4>

080013c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013c6:	b480      	push	{r7}
 80013c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ca:	e7fe      	b.n	80013ca <HardFault_Handler+0x4>

080013cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013d0:	e7fe      	b.n	80013d0 <MemManage_Handler+0x4>

080013d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013d2:	b480      	push	{r7}
 80013d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013d6:	e7fe      	b.n	80013d6 <BusFault_Handler+0x4>

080013d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013dc:	e7fe      	b.n	80013dc <UsageFault_Handler+0x4>

080013de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013de:	b480      	push	{r7}
 80013e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013e2:	bf00      	nop
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bc80      	pop	{r7}
 80013e8:	4770      	bx	lr

080013ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013ea:	b480      	push	{r7}
 80013ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013ee:	bf00      	nop
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bc80      	pop	{r7}
 80013f4:	4770      	bx	lr

080013f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013fa:	bf00      	nop
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bc80      	pop	{r7}
 8001400:	4770      	bx	lr

08001402 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001406:	f000 f89d 	bl	8001544 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800140a:	bf00      	nop
 800140c:	bd80      	pop	{r7, pc}
	...

08001410 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001414:	4802      	ldr	r0, [pc, #8]	; (8001420 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001416:	f000 fcce 	bl	8001db6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000074 	.word	0x20000074

08001424 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001428:	4802      	ldr	r0, [pc, #8]	; (8001434 <TIM2_IRQHandler+0x10>)
 800142a:	f001 ff23 	bl	8003274 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	2000009c 	.word	0x2000009c

08001438 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800143c:	4802      	ldr	r0, [pc, #8]	; (8001448 <TIM3_IRQHandler+0x10>)
 800143e:	f001 ff19 	bl	8003274 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	200000e4 	.word	0x200000e4

0800144c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001450:	4802      	ldr	r0, [pc, #8]	; (800145c <USART2_IRQHandler+0x10>)
 8001452:	f002 fabb 	bl	80039cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	2000012c 	.word	0x2000012c

08001460 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	bc80      	pop	{r7}
 800146a:	4770      	bx	lr

0800146c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800146c:	f7ff fff8 	bl	8001460 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001470:	480b      	ldr	r0, [pc, #44]	; (80014a0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001472:	490c      	ldr	r1, [pc, #48]	; (80014a4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001474:	4a0c      	ldr	r2, [pc, #48]	; (80014a8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001476:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001478:	e002      	b.n	8001480 <LoopCopyDataInit>

0800147a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800147a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800147c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800147e:	3304      	adds	r3, #4

08001480 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001480:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001482:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001484:	d3f9      	bcc.n	800147a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001486:	4a09      	ldr	r2, [pc, #36]	; (80014ac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001488:	4c09      	ldr	r4, [pc, #36]	; (80014b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800148a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800148c:	e001      	b.n	8001492 <LoopFillZerobss>

0800148e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800148e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001490:	3204      	adds	r2, #4

08001492 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001492:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001494:	d3fb      	bcc.n	800148e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001496:	f002 ff83 	bl	80043a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800149a:	f7ff fbe3 	bl	8000c64 <main>
  bx lr
 800149e:	4770      	bx	lr
  ldr r0, =_sdata
 80014a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014a4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80014a8:	08004434 	.word	0x08004434
  ldr r2, =_sbss
 80014ac:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80014b0:	2000037c 	.word	0x2000037c

080014b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014b4:	e7fe      	b.n	80014b4 <ADC1_2_IRQHandler>
	...

080014b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014bc:	4b08      	ldr	r3, [pc, #32]	; (80014e0 <HAL_Init+0x28>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a07      	ldr	r2, [pc, #28]	; (80014e0 <HAL_Init+0x28>)
 80014c2:	f043 0310 	orr.w	r3, r3, #16
 80014c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014c8:	2003      	movs	r0, #3
 80014ca:	f000 ff63 	bl	8002394 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014ce:	200f      	movs	r0, #15
 80014d0:	f000 f808 	bl	80014e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014d4:	f7ff fe6c 	bl	80011b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40022000 	.word	0x40022000

080014e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014ec:	4b12      	ldr	r3, [pc, #72]	; (8001538 <HAL_InitTick+0x54>)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	4b12      	ldr	r3, [pc, #72]	; (800153c <HAL_InitTick+0x58>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	4619      	mov	r1, r3
 80014f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80014fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001502:	4618      	mov	r0, r3
 8001504:	f000 ff7b 	bl	80023fe <HAL_SYSTICK_Config>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e00e      	b.n	8001530 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2b0f      	cmp	r3, #15
 8001516:	d80a      	bhi.n	800152e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001518:	2200      	movs	r2, #0
 800151a:	6879      	ldr	r1, [r7, #4]
 800151c:	f04f 30ff 	mov.w	r0, #4294967295
 8001520:	f000 ff43 	bl	80023aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001524:	4a06      	ldr	r2, [pc, #24]	; (8001540 <HAL_InitTick+0x5c>)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800152a:	2300      	movs	r3, #0
 800152c:	e000      	b.n	8001530 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
}
 8001530:	4618      	mov	r0, r3
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	20000000 	.word	0x20000000
 800153c:	20000008 	.word	0x20000008
 8001540:	20000004 	.word	0x20000004

08001544 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001548:	4b05      	ldr	r3, [pc, #20]	; (8001560 <HAL_IncTick+0x1c>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	461a      	mov	r2, r3
 800154e:	4b05      	ldr	r3, [pc, #20]	; (8001564 <HAL_IncTick+0x20>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4413      	add	r3, r2
 8001554:	4a03      	ldr	r2, [pc, #12]	; (8001564 <HAL_IncTick+0x20>)
 8001556:	6013      	str	r3, [r2, #0]
}
 8001558:	bf00      	nop
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr
 8001560:	20000008 	.word	0x20000008
 8001564:	20000378 	.word	0x20000378

08001568 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  return uwTick;
 800156c:	4b02      	ldr	r3, [pc, #8]	; (8001578 <HAL_GetTick+0x10>)
 800156e:	681b      	ldr	r3, [r3, #0]
}
 8001570:	4618      	mov	r0, r3
 8001572:	46bd      	mov	sp, r7
 8001574:	bc80      	pop	{r7}
 8001576:	4770      	bx	lr
 8001578:	20000378 	.word	0x20000378

0800157c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d101      	bne.n	800158e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e0ed      	b.n	800176a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001594:	b2db      	uxtb	r3, r3
 8001596:	2b00      	cmp	r3, #0
 8001598:	d102      	bne.n	80015a0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f7ff fe2a 	bl	80011f4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f042 0201 	orr.w	r2, r2, #1
 80015ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015b0:	f7ff ffda 	bl	8001568 <HAL_GetTick>
 80015b4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80015b6:	e012      	b.n	80015de <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015b8:	f7ff ffd6 	bl	8001568 <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b0a      	cmp	r3, #10
 80015c4:	d90b      	bls.n	80015de <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2205      	movs	r2, #5
 80015d6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e0c5      	b.n	800176a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f003 0301 	and.w	r3, r3, #1
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d0e5      	beq.n	80015b8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f022 0202 	bic.w	r2, r2, #2
 80015fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015fc:	f7ff ffb4 	bl	8001568 <HAL_GetTick>
 8001600:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001602:	e012      	b.n	800162a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001604:	f7ff ffb0 	bl	8001568 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	2b0a      	cmp	r3, #10
 8001610:	d90b      	bls.n	800162a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001616:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2205      	movs	r2, #5
 8001622:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e09f      	b.n	800176a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f003 0302 	and.w	r3, r3, #2
 8001634:	2b00      	cmp	r3, #0
 8001636:	d1e5      	bne.n	8001604 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	7e1b      	ldrb	r3, [r3, #24]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d108      	bne.n	8001652 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	e007      	b.n	8001662 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001660:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	7e5b      	ldrb	r3, [r3, #25]
 8001666:	2b01      	cmp	r3, #1
 8001668:	d108      	bne.n	800167c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	e007      	b.n	800168c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800168a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	7e9b      	ldrb	r3, [r3, #26]
 8001690:	2b01      	cmp	r3, #1
 8001692:	d108      	bne.n	80016a6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f042 0220 	orr.w	r2, r2, #32
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	e007      	b.n	80016b6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f022 0220 	bic.w	r2, r2, #32
 80016b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	7edb      	ldrb	r3, [r3, #27]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d108      	bne.n	80016d0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f022 0210 	bic.w	r2, r2, #16
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	e007      	b.n	80016e0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f042 0210 	orr.w	r2, r2, #16
 80016de:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	7f1b      	ldrb	r3, [r3, #28]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d108      	bne.n	80016fa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f042 0208 	orr.w	r2, r2, #8
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	e007      	b.n	800170a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f022 0208 	bic.w	r2, r2, #8
 8001708:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	7f5b      	ldrb	r3, [r3, #29]
 800170e:	2b01      	cmp	r3, #1
 8001710:	d108      	bne.n	8001724 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f042 0204 	orr.w	r2, r2, #4
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	e007      	b.n	8001734 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f022 0204 	bic.w	r2, r2, #4
 8001732:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	689a      	ldr	r2, [r3, #8]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	431a      	orrs	r2, r3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	691b      	ldr	r3, [r3, #16]
 8001742:	431a      	orrs	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	695b      	ldr	r3, [r3, #20]
 8001748:	ea42 0103 	orr.w	r1, r2, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	1e5a      	subs	r2, r3, #1
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	430a      	orrs	r2, r1
 8001758:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2200      	movs	r2, #0
 800175e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2201      	movs	r2, #1
 8001764:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	3710      	adds	r7, #16
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001772:	b480      	push	{r7}
 8001774:	b087      	sub	sp, #28
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
 800177a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001788:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800178a:	7cfb      	ldrb	r3, [r7, #19]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d003      	beq.n	8001798 <HAL_CAN_ConfigFilter+0x26>
 8001790:	7cfb      	ldrb	r3, [r7, #19]
 8001792:	2b02      	cmp	r3, #2
 8001794:	f040 80aa 	bne.w	80018ec <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800179e:	f043 0201 	orr.w	r2, r3, #1
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	695b      	ldr	r3, [r3, #20]
 80017ac:	f003 031f 	and.w	r3, r3, #31
 80017b0:	2201      	movs	r2, #1
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	43db      	mvns	r3, r3
 80017c2:	401a      	ands	r2, r3
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	69db      	ldr	r3, [r3, #28]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d123      	bne.n	800181a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	43db      	mvns	r3, r3
 80017dc:	401a      	ands	r2, r3
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80017f0:	683a      	ldr	r2, [r7, #0]
 80017f2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80017f4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	3248      	adds	r2, #72	; 0x48
 80017fa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800180e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001810:	6979      	ldr	r1, [r7, #20]
 8001812:	3348      	adds	r3, #72	; 0x48
 8001814:	00db      	lsls	r3, r3, #3
 8001816:	440b      	add	r3, r1
 8001818:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	69db      	ldr	r3, [r3, #28]
 800181e:	2b01      	cmp	r3, #1
 8001820:	d122      	bne.n	8001868 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	431a      	orrs	r2, r3
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800183e:	683a      	ldr	r2, [r7, #0]
 8001840:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001842:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	3248      	adds	r2, #72	; 0x48
 8001848:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800185c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800185e:	6979      	ldr	r1, [r7, #20]
 8001860:	3348      	adds	r3, #72	; 0x48
 8001862:	00db      	lsls	r3, r3, #3
 8001864:	440b      	add	r3, r1
 8001866:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	699b      	ldr	r3, [r3, #24]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d109      	bne.n	8001884 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	43db      	mvns	r3, r3
 800187a:	401a      	ands	r2, r3
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001882:	e007      	b.n	8001894 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	431a      	orrs	r2, r3
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	691b      	ldr	r3, [r3, #16]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d109      	bne.n	80018b0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	43db      	mvns	r3, r3
 80018a6:	401a      	ands	r2, r3
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80018ae:	e007      	b.n	80018c0 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	431a      	orrs	r2, r3
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	6a1b      	ldr	r3, [r3, #32]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d107      	bne.n	80018d8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	431a      	orrs	r2, r3
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80018de:	f023 0201 	bic.w	r2, r3, #1
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80018e8:	2300      	movs	r3, #0
 80018ea:	e006      	b.n	80018fa <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
  }
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	371c      	adds	r7, #28
 80018fe:	46bd      	mov	sp, r7
 8001900:	bc80      	pop	{r7}
 8001902:	4770      	bx	lr

08001904 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001912:	b2db      	uxtb	r3, r3
 8001914:	2b01      	cmp	r3, #1
 8001916:	d12e      	bne.n	8001976 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2202      	movs	r2, #2
 800191c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f022 0201 	bic.w	r2, r2, #1
 800192e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001930:	f7ff fe1a 	bl	8001568 <HAL_GetTick>
 8001934:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001936:	e012      	b.n	800195e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001938:	f7ff fe16 	bl	8001568 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b0a      	cmp	r3, #10
 8001944:	d90b      	bls.n	800195e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2205      	movs	r2, #5
 8001956:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e012      	b.n	8001984 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f003 0301 	and.w	r3, r3, #1
 8001968:	2b00      	cmp	r3, #0
 800196a:	d1e5      	bne.n	8001938 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2200      	movs	r2, #0
 8001970:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001972:	2300      	movs	r3, #0
 8001974:	e006      	b.n	8001984 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
  }
}
 8001984:	4618      	mov	r0, r3
 8001986:	3710      	adds	r7, #16
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}

0800198c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800198c:	b480      	push	{r7}
 800198e:	b089      	sub	sp, #36	; 0x24
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
 8001998:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019a0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80019aa:	7ffb      	ldrb	r3, [r7, #31]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d003      	beq.n	80019b8 <HAL_CAN_AddTxMessage+0x2c>
 80019b0:	7ffb      	ldrb	r3, [r7, #31]
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	f040 80ad 	bne.w	8001b12 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d10a      	bne.n	80019d8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d105      	bne.n	80019d8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	f000 8095 	beq.w	8001b02 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	0e1b      	lsrs	r3, r3, #24
 80019dc:	f003 0303 	and.w	r3, r3, #3
 80019e0:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80019e2:	2201      	movs	r2, #1
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	409a      	lsls	r2, r3
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d10d      	bne.n	8001a10 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80019fe:	68f9      	ldr	r1, [r7, #12]
 8001a00:	6809      	ldr	r1, [r1, #0]
 8001a02:	431a      	orrs	r2, r3
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	3318      	adds	r3, #24
 8001a08:	011b      	lsls	r3, r3, #4
 8001a0a:	440b      	add	r3, r1
 8001a0c:	601a      	str	r2, [r3, #0]
 8001a0e:	e00f      	b.n	8001a30 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a1a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a20:	68f9      	ldr	r1, [r7, #12]
 8001a22:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001a24:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	3318      	adds	r3, #24
 8001a2a:	011b      	lsls	r3, r3, #4
 8001a2c:	440b      	add	r3, r1
 8001a2e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	6819      	ldr	r1, [r3, #0]
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	691a      	ldr	r2, [r3, #16]
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	3318      	adds	r3, #24
 8001a3c:	011b      	lsls	r3, r3, #4
 8001a3e:	440b      	add	r3, r1
 8001a40:	3304      	adds	r3, #4
 8001a42:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	7d1b      	ldrb	r3, [r3, #20]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d111      	bne.n	8001a70 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	3318      	adds	r3, #24
 8001a54:	011b      	lsls	r3, r3, #4
 8001a56:	4413      	add	r3, r2
 8001a58:	3304      	adds	r3, #4
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	68fa      	ldr	r2, [r7, #12]
 8001a5e:	6811      	ldr	r1, [r2, #0]
 8001a60:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	3318      	adds	r3, #24
 8001a68:	011b      	lsls	r3, r3, #4
 8001a6a:	440b      	add	r3, r1
 8001a6c:	3304      	adds	r3, #4
 8001a6e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	3307      	adds	r3, #7
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	061a      	lsls	r2, r3, #24
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	3306      	adds	r3, #6
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	041b      	lsls	r3, r3, #16
 8001a80:	431a      	orrs	r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	3305      	adds	r3, #5
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	021b      	lsls	r3, r3, #8
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	3204      	adds	r2, #4
 8001a90:	7812      	ldrb	r2, [r2, #0]
 8001a92:	4610      	mov	r0, r2
 8001a94:	68fa      	ldr	r2, [r7, #12]
 8001a96:	6811      	ldr	r1, [r2, #0]
 8001a98:	ea43 0200 	orr.w	r2, r3, r0
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	011b      	lsls	r3, r3, #4
 8001aa0:	440b      	add	r3, r1
 8001aa2:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001aa6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	3303      	adds	r3, #3
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	061a      	lsls	r2, r3, #24
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	3302      	adds	r3, #2
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	041b      	lsls	r3, r3, #16
 8001ab8:	431a      	orrs	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	3301      	adds	r3, #1
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	021b      	lsls	r3, r3, #8
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	7812      	ldrb	r2, [r2, #0]
 8001ac8:	4610      	mov	r0, r2
 8001aca:	68fa      	ldr	r2, [r7, #12]
 8001acc:	6811      	ldr	r1, [r2, #0]
 8001ace:	ea43 0200 	orr.w	r2, r3, r0
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	011b      	lsls	r3, r3, #4
 8001ad6:	440b      	add	r3, r1
 8001ad8:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001adc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	3318      	adds	r3, #24
 8001ae6:	011b      	lsls	r3, r3, #4
 8001ae8:	4413      	add	r3, r2
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	68fa      	ldr	r2, [r7, #12]
 8001aee:	6811      	ldr	r1, [r2, #0]
 8001af0:	f043 0201 	orr.w	r2, r3, #1
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	3318      	adds	r3, #24
 8001af8:	011b      	lsls	r3, r3, #4
 8001afa:	440b      	add	r3, r1
 8001afc:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001afe:	2300      	movs	r3, #0
 8001b00:	e00e      	b.n	8001b20 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b06:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e006      	b.n	8001b20 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b16:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
  }
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3724      	adds	r7, #36	; 0x24
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bc80      	pop	{r7}
 8001b28:	4770      	bx	lr

08001b2a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	b087      	sub	sp, #28
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	60f8      	str	r0, [r7, #12]
 8001b32:	60b9      	str	r1, [r7, #8]
 8001b34:	607a      	str	r2, [r7, #4]
 8001b36:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b3e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001b40:	7dfb      	ldrb	r3, [r7, #23]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d003      	beq.n	8001b4e <HAL_CAN_GetRxMessage+0x24>
 8001b46:	7dfb      	ldrb	r3, [r7, #23]
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	f040 8103 	bne.w	8001d54 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d10e      	bne.n	8001b72 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	68db      	ldr	r3, [r3, #12]
 8001b5a:	f003 0303 	and.w	r3, r3, #3
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d116      	bne.n	8001b90 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b66:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e0f7      	b.n	8001d62 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	691b      	ldr	r3, [r3, #16]
 8001b78:	f003 0303 	and.w	r3, r3, #3
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d107      	bne.n	8001b90 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b84:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e0e8      	b.n	8001d62 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	331b      	adds	r3, #27
 8001b98:	011b      	lsls	r3, r3, #4
 8001b9a:	4413      	add	r3, r2
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0204 	and.w	r2, r3, #4
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d10c      	bne.n	8001bc8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	331b      	adds	r3, #27
 8001bb6:	011b      	lsls	r3, r3, #4
 8001bb8:	4413      	add	r3, r2
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	0d5b      	lsrs	r3, r3, #21
 8001bbe:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	601a      	str	r2, [r3, #0]
 8001bc6:	e00b      	b.n	8001be0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	331b      	adds	r3, #27
 8001bd0:	011b      	lsls	r3, r3, #4
 8001bd2:	4413      	add	r3, r2
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	08db      	lsrs	r3, r3, #3
 8001bd8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	331b      	adds	r3, #27
 8001be8:	011b      	lsls	r3, r3, #4
 8001bea:	4413      	add	r3, r2
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0202 	and.w	r2, r3, #2
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	331b      	adds	r3, #27
 8001bfe:	011b      	lsls	r3, r3, #4
 8001c00:	4413      	add	r3, r2
 8001c02:	3304      	adds	r3, #4
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0308 	and.w	r3, r3, #8
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d003      	beq.n	8001c16 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2208      	movs	r2, #8
 8001c12:	611a      	str	r2, [r3, #16]
 8001c14:	e00b      	b.n	8001c2e <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	331b      	adds	r3, #27
 8001c1e:	011b      	lsls	r3, r3, #4
 8001c20:	4413      	add	r3, r2
 8001c22:	3304      	adds	r3, #4
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 020f 	and.w	r2, r3, #15
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	331b      	adds	r3, #27
 8001c36:	011b      	lsls	r3, r3, #4
 8001c38:	4413      	add	r3, r2
 8001c3a:	3304      	adds	r3, #4
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	0a1b      	lsrs	r3, r3, #8
 8001c40:	b2da      	uxtb	r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	331b      	adds	r3, #27
 8001c4e:	011b      	lsls	r3, r3, #4
 8001c50:	4413      	add	r3, r2
 8001c52:	3304      	adds	r3, #4
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	0c1b      	lsrs	r3, r3, #16
 8001c58:	b29a      	uxth	r2, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	011b      	lsls	r3, r3, #4
 8001c66:	4413      	add	r3, r2
 8001c68:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	b2da      	uxtb	r2, r3
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	011b      	lsls	r3, r3, #4
 8001c7c:	4413      	add	r3, r2
 8001c7e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	0a1a      	lsrs	r2, r3, #8
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	b2d2      	uxtb	r2, r2
 8001c8c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	011b      	lsls	r3, r3, #4
 8001c96:	4413      	add	r3, r2
 8001c98:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	0c1a      	lsrs	r2, r3, #16
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	3302      	adds	r3, #2
 8001ca4:	b2d2      	uxtb	r2, r2
 8001ca6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	011b      	lsls	r3, r3, #4
 8001cb0:	4413      	add	r3, r2
 8001cb2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	0e1a      	lsrs	r2, r3, #24
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	3303      	adds	r3, #3
 8001cbe:	b2d2      	uxtb	r2, r2
 8001cc0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	011b      	lsls	r3, r3, #4
 8001cca:	4413      	add	r3, r2
 8001ccc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	3304      	adds	r3, #4
 8001cd6:	b2d2      	uxtb	r2, r2
 8001cd8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	011b      	lsls	r3, r3, #4
 8001ce2:	4413      	add	r3, r2
 8001ce4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	0a1a      	lsrs	r2, r3, #8
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	3305      	adds	r3, #5
 8001cf0:	b2d2      	uxtb	r2, r2
 8001cf2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	011b      	lsls	r3, r3, #4
 8001cfc:	4413      	add	r3, r2
 8001cfe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	0c1a      	lsrs	r2, r3, #16
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	3306      	adds	r3, #6
 8001d0a:	b2d2      	uxtb	r2, r2
 8001d0c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	011b      	lsls	r3, r3, #4
 8001d16:	4413      	add	r3, r2
 8001d18:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	0e1a      	lsrs	r2, r3, #24
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	3307      	adds	r3, #7
 8001d24:	b2d2      	uxtb	r2, r2
 8001d26:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d108      	bne.n	8001d40 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	68da      	ldr	r2, [r3, #12]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f042 0220 	orr.w	r2, r2, #32
 8001d3c:	60da      	str	r2, [r3, #12]
 8001d3e:	e007      	b.n	8001d50 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	691a      	ldr	r2, [r3, #16]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f042 0220 	orr.w	r2, r2, #32
 8001d4e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001d50:	2300      	movs	r3, #0
 8001d52:	e006      	b.n	8001d62 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d58:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
  }
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	371c      	adds	r7, #28
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bc80      	pop	{r7}
 8001d6a:	4770      	bx	lr

08001d6c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d7c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d7e:	7bfb      	ldrb	r3, [r7, #15]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d002      	beq.n	8001d8a <HAL_CAN_ActivateNotification+0x1e>
 8001d84:	7bfb      	ldrb	r3, [r7, #15]
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d109      	bne.n	8001d9e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	6959      	ldr	r1, [r3, #20]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	683a      	ldr	r2, [r7, #0]
 8001d96:	430a      	orrs	r2, r1
 8001d98:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	e006      	b.n	8001dac <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
  }
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3714      	adds	r7, #20
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bc80      	pop	{r7}
 8001db4:	4770      	bx	lr

08001db6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b08a      	sub	sp, #40	; 0x28
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	695b      	ldr	r3, [r3, #20]
 8001dc8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001df2:	6a3b      	ldr	r3, [r7, #32]
 8001df4:	f003 0301 	and.w	r3, r3, #1
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d07c      	beq.n	8001ef6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d023      	beq.n	8001e4e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	f003 0302 	and.w	r3, r3, #2
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d003      	beq.n	8001e20 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f000 f983 	bl	8002124 <HAL_CAN_TxMailbox0CompleteCallback>
 8001e1e:	e016      	b.n	8001e4e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	f003 0304 	and.w	r3, r3, #4
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d004      	beq.n	8001e34 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e30:	627b      	str	r3, [r7, #36]	; 0x24
 8001e32:	e00c      	b.n	8001e4e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	f003 0308 	and.w	r3, r3, #8
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d004      	beq.n	8001e48 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e44:	627b      	str	r3, [r7, #36]	; 0x24
 8001e46:	e002      	b.n	8001e4e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f000 f986 	bl	800215a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d024      	beq.n	8001ea2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e60:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d003      	beq.n	8001e74 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f000 f962 	bl	8002136 <HAL_CAN_TxMailbox1CompleteCallback>
 8001e72:	e016      	b.n	8001ea2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d004      	beq.n	8001e88 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e80:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e84:	627b      	str	r3, [r7, #36]	; 0x24
 8001e86:	e00c      	b.n	8001ea2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d004      	beq.n	8001e9c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e98:	627b      	str	r3, [r7, #36]	; 0x24
 8001e9a:	e002      	b.n	8001ea2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f000 f965 	bl	800216c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d024      	beq.n	8001ef6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001eb4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d003      	beq.n	8001ec8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f000 f941 	bl	8002148 <HAL_CAN_TxMailbox2CompleteCallback>
 8001ec6:	e016      	b.n	8001ef6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d004      	beq.n	8001edc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ed8:	627b      	str	r3, [r7, #36]	; 0x24
 8001eda:	e00c      	b.n	8001ef6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d004      	beq.n	8001ef0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eec:	627b      	str	r3, [r7, #36]	; 0x24
 8001eee:	e002      	b.n	8001ef6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f000 f944 	bl	800217e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001ef6:	6a3b      	ldr	r3, [r7, #32]
 8001ef8:	f003 0308 	and.w	r3, r3, #8
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d00c      	beq.n	8001f1a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	f003 0310 	and.w	r3, r3, #16
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d007      	beq.n	8001f1a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f10:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	2210      	movs	r2, #16
 8001f18:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001f1a:	6a3b      	ldr	r3, [r7, #32]
 8001f1c:	f003 0304 	and.w	r3, r3, #4
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d00b      	beq.n	8001f3c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	f003 0308 	and.w	r3, r3, #8
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d006      	beq.n	8001f3c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2208      	movs	r2, #8
 8001f34:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 f92a 	bl	8002190 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001f3c:	6a3b      	ldr	r3, [r7, #32]
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d009      	beq.n	8001f5a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	f003 0303 	and.w	r3, r3, #3
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d002      	beq.n	8001f5a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f7fe f9a7 	bl	80002a8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001f5a:	6a3b      	ldr	r3, [r7, #32]
 8001f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d00c      	beq.n	8001f7e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	f003 0310 	and.w	r3, r3, #16
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d007      	beq.n	8001f7e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f70:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f74:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2210      	movs	r2, #16
 8001f7c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001f7e:	6a3b      	ldr	r3, [r7, #32]
 8001f80:	f003 0320 	and.w	r3, r3, #32
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d00b      	beq.n	8001fa0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	f003 0308 	and.w	r3, r3, #8
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d006      	beq.n	8001fa0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2208      	movs	r2, #8
 8001f98:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 f90a 	bl	80021b4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001fa0:	6a3b      	ldr	r3, [r7, #32]
 8001fa2:	f003 0310 	and.w	r3, r3, #16
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d009      	beq.n	8001fbe <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	691b      	ldr	r3, [r3, #16]
 8001fb0:	f003 0303 	and.w	r3, r3, #3
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d002      	beq.n	8001fbe <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f000 f8f2 	bl	80021a2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001fbe:	6a3b      	ldr	r3, [r7, #32]
 8001fc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d00b      	beq.n	8001fe0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	f003 0310 	and.w	r3, r3, #16
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d006      	beq.n	8001fe0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	2210      	movs	r2, #16
 8001fd8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 f8f3 	bl	80021c6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001fe0:	6a3b      	ldr	r3, [r7, #32]
 8001fe2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d00b      	beq.n	8002002 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	f003 0308 	and.w	r3, r3, #8
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d006      	beq.n	8002002 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2208      	movs	r2, #8
 8001ffa:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f000 f8eb 	bl	80021d8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002002:	6a3b      	ldr	r3, [r7, #32]
 8002004:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d07b      	beq.n	8002104 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	f003 0304 	and.w	r3, r3, #4
 8002012:	2b00      	cmp	r3, #0
 8002014:	d072      	beq.n	80020fc <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002016:	6a3b      	ldr	r3, [r7, #32]
 8002018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800201c:	2b00      	cmp	r3, #0
 800201e:	d008      	beq.n	8002032 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002026:	2b00      	cmp	r3, #0
 8002028:	d003      	beq.n	8002032 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800202a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202c:	f043 0301 	orr.w	r3, r3, #1
 8002030:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002032:	6a3b      	ldr	r3, [r7, #32]
 8002034:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002038:	2b00      	cmp	r3, #0
 800203a:	d008      	beq.n	800204e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002042:	2b00      	cmp	r3, #0
 8002044:	d003      	beq.n	800204e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002048:	f043 0302 	orr.w	r3, r3, #2
 800204c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800204e:	6a3b      	ldr	r3, [r7, #32]
 8002050:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002054:	2b00      	cmp	r3, #0
 8002056:	d008      	beq.n	800206a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800205e:	2b00      	cmp	r3, #0
 8002060:	d003      	beq.n	800206a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002064:	f043 0304 	orr.w	r3, r3, #4
 8002068:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800206a:	6a3b      	ldr	r3, [r7, #32]
 800206c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002070:	2b00      	cmp	r3, #0
 8002072:	d043      	beq.n	80020fc <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800207a:	2b00      	cmp	r3, #0
 800207c:	d03e      	beq.n	80020fc <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002084:	2b60      	cmp	r3, #96	; 0x60
 8002086:	d02b      	beq.n	80020e0 <HAL_CAN_IRQHandler+0x32a>
 8002088:	2b60      	cmp	r3, #96	; 0x60
 800208a:	d82e      	bhi.n	80020ea <HAL_CAN_IRQHandler+0x334>
 800208c:	2b50      	cmp	r3, #80	; 0x50
 800208e:	d022      	beq.n	80020d6 <HAL_CAN_IRQHandler+0x320>
 8002090:	2b50      	cmp	r3, #80	; 0x50
 8002092:	d82a      	bhi.n	80020ea <HAL_CAN_IRQHandler+0x334>
 8002094:	2b40      	cmp	r3, #64	; 0x40
 8002096:	d019      	beq.n	80020cc <HAL_CAN_IRQHandler+0x316>
 8002098:	2b40      	cmp	r3, #64	; 0x40
 800209a:	d826      	bhi.n	80020ea <HAL_CAN_IRQHandler+0x334>
 800209c:	2b30      	cmp	r3, #48	; 0x30
 800209e:	d010      	beq.n	80020c2 <HAL_CAN_IRQHandler+0x30c>
 80020a0:	2b30      	cmp	r3, #48	; 0x30
 80020a2:	d822      	bhi.n	80020ea <HAL_CAN_IRQHandler+0x334>
 80020a4:	2b10      	cmp	r3, #16
 80020a6:	d002      	beq.n	80020ae <HAL_CAN_IRQHandler+0x2f8>
 80020a8:	2b20      	cmp	r3, #32
 80020aa:	d005      	beq.n	80020b8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80020ac:	e01d      	b.n	80020ea <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80020ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b0:	f043 0308 	orr.w	r3, r3, #8
 80020b4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80020b6:	e019      	b.n	80020ec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80020b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ba:	f043 0310 	orr.w	r3, r3, #16
 80020be:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80020c0:	e014      	b.n	80020ec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80020c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c4:	f043 0320 	orr.w	r3, r3, #32
 80020c8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80020ca:	e00f      	b.n	80020ec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80020cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020d2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80020d4:	e00a      	b.n	80020ec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80020d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020dc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80020de:	e005      	b.n	80020ec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80020e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020e6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80020e8:	e000      	b.n	80020ec <HAL_CAN_IRQHandler+0x336>
            break;
 80020ea:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	699a      	ldr	r2, [r3, #24]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80020fa:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2204      	movs	r2, #4
 8002102:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002106:	2b00      	cmp	r3, #0
 8002108:	d008      	beq.n	800211c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800210e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002110:	431a      	orrs	r2, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f000 f867 	bl	80021ea <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800211c:	bf00      	nop
 800211e:	3728      	adds	r7, #40	; 0x28
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800212c:	bf00      	nop
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	bc80      	pop	{r7}
 8002134:	4770      	bx	lr

08002136 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002136:	b480      	push	{r7}
 8002138:	b083      	sub	sp, #12
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800213e:	bf00      	nop
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	bc80      	pop	{r7}
 8002146:	4770      	bx	lr

08002148 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002150:	bf00      	nop
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	bc80      	pop	{r7}
 8002158:	4770      	bx	lr

0800215a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800215a:	b480      	push	{r7}
 800215c:	b083      	sub	sp, #12
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002162:	bf00      	nop
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	bc80      	pop	{r7}
 800216a:	4770      	bx	lr

0800216c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	bc80      	pop	{r7}
 800217c:	4770      	bx	lr

0800217e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800217e:	b480      	push	{r7}
 8002180:	b083      	sub	sp, #12
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002186:	bf00      	nop
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	bc80      	pop	{r7}
 800218e:	4770      	bx	lr

08002190 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	bc80      	pop	{r7}
 80021a0:	4770      	bx	lr

080021a2 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80021a2:	b480      	push	{r7}
 80021a4:	b083      	sub	sp, #12
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80021aa:	bf00      	nop
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bc80      	pop	{r7}
 80021b2:	4770      	bx	lr

080021b4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80021bc:	bf00      	nop
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bc80      	pop	{r7}
 80021c4:	4770      	bx	lr

080021c6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80021c6:	b480      	push	{r7}
 80021c8:	b083      	sub	sp, #12
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80021ce:	bf00      	nop
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bc80      	pop	{r7}
 80021d6:	4770      	bx	lr

080021d8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80021e0:	bf00      	nop
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bc80      	pop	{r7}
 80021e8:	4770      	bx	lr

080021ea <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b083      	sub	sp, #12
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80021f2:	bf00      	nop
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bc80      	pop	{r7}
 80021fa:	4770      	bx	lr

080021fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f003 0307 	and.w	r3, r3, #7
 800220a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800220c:	4b0c      	ldr	r3, [pc, #48]	; (8002240 <__NVIC_SetPriorityGrouping+0x44>)
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002212:	68ba      	ldr	r2, [r7, #8]
 8002214:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002218:	4013      	ands	r3, r2
 800221a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002224:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002228:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800222c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800222e:	4a04      	ldr	r2, [pc, #16]	; (8002240 <__NVIC_SetPriorityGrouping+0x44>)
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	60d3      	str	r3, [r2, #12]
}
 8002234:	bf00      	nop
 8002236:	3714      	adds	r7, #20
 8002238:	46bd      	mov	sp, r7
 800223a:	bc80      	pop	{r7}
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	e000ed00 	.word	0xe000ed00

08002244 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002248:	4b04      	ldr	r3, [pc, #16]	; (800225c <__NVIC_GetPriorityGrouping+0x18>)
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	0a1b      	lsrs	r3, r3, #8
 800224e:	f003 0307 	and.w	r3, r3, #7
}
 8002252:	4618      	mov	r0, r3
 8002254:	46bd      	mov	sp, r7
 8002256:	bc80      	pop	{r7}
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	e000ed00 	.word	0xe000ed00

08002260 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	4603      	mov	r3, r0
 8002268:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800226a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800226e:	2b00      	cmp	r3, #0
 8002270:	db0b      	blt.n	800228a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002272:	79fb      	ldrb	r3, [r7, #7]
 8002274:	f003 021f 	and.w	r2, r3, #31
 8002278:	4906      	ldr	r1, [pc, #24]	; (8002294 <__NVIC_EnableIRQ+0x34>)
 800227a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227e:	095b      	lsrs	r3, r3, #5
 8002280:	2001      	movs	r0, #1
 8002282:	fa00 f202 	lsl.w	r2, r0, r2
 8002286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800228a:	bf00      	nop
 800228c:	370c      	adds	r7, #12
 800228e:	46bd      	mov	sp, r7
 8002290:	bc80      	pop	{r7}
 8002292:	4770      	bx	lr
 8002294:	e000e100 	.word	0xe000e100

08002298 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	4603      	mov	r3, r0
 80022a0:	6039      	str	r1, [r7, #0]
 80022a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	db0a      	blt.n	80022c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	b2da      	uxtb	r2, r3
 80022b0:	490c      	ldr	r1, [pc, #48]	; (80022e4 <__NVIC_SetPriority+0x4c>)
 80022b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b6:	0112      	lsls	r2, r2, #4
 80022b8:	b2d2      	uxtb	r2, r2
 80022ba:	440b      	add	r3, r1
 80022bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022c0:	e00a      	b.n	80022d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	b2da      	uxtb	r2, r3
 80022c6:	4908      	ldr	r1, [pc, #32]	; (80022e8 <__NVIC_SetPriority+0x50>)
 80022c8:	79fb      	ldrb	r3, [r7, #7]
 80022ca:	f003 030f 	and.w	r3, r3, #15
 80022ce:	3b04      	subs	r3, #4
 80022d0:	0112      	lsls	r2, r2, #4
 80022d2:	b2d2      	uxtb	r2, r2
 80022d4:	440b      	add	r3, r1
 80022d6:	761a      	strb	r2, [r3, #24]
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	bc80      	pop	{r7}
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	e000e100 	.word	0xe000e100
 80022e8:	e000ed00 	.word	0xe000ed00

080022ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b089      	sub	sp, #36	; 0x24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f003 0307 	and.w	r3, r3, #7
 80022fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	f1c3 0307 	rsb	r3, r3, #7
 8002306:	2b04      	cmp	r3, #4
 8002308:	bf28      	it	cs
 800230a:	2304      	movcs	r3, #4
 800230c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	3304      	adds	r3, #4
 8002312:	2b06      	cmp	r3, #6
 8002314:	d902      	bls.n	800231c <NVIC_EncodePriority+0x30>
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	3b03      	subs	r3, #3
 800231a:	e000      	b.n	800231e <NVIC_EncodePriority+0x32>
 800231c:	2300      	movs	r3, #0
 800231e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002320:	f04f 32ff 	mov.w	r2, #4294967295
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	43da      	mvns	r2, r3
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	401a      	ands	r2, r3
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002334:	f04f 31ff 	mov.w	r1, #4294967295
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	fa01 f303 	lsl.w	r3, r1, r3
 800233e:	43d9      	mvns	r1, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002344:	4313      	orrs	r3, r2
         );
}
 8002346:	4618      	mov	r0, r3
 8002348:	3724      	adds	r7, #36	; 0x24
 800234a:	46bd      	mov	sp, r7
 800234c:	bc80      	pop	{r7}
 800234e:	4770      	bx	lr

08002350 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	3b01      	subs	r3, #1
 800235c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002360:	d301      	bcc.n	8002366 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002362:	2301      	movs	r3, #1
 8002364:	e00f      	b.n	8002386 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002366:	4a0a      	ldr	r2, [pc, #40]	; (8002390 <SysTick_Config+0x40>)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	3b01      	subs	r3, #1
 800236c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800236e:	210f      	movs	r1, #15
 8002370:	f04f 30ff 	mov.w	r0, #4294967295
 8002374:	f7ff ff90 	bl	8002298 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002378:	4b05      	ldr	r3, [pc, #20]	; (8002390 <SysTick_Config+0x40>)
 800237a:	2200      	movs	r2, #0
 800237c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800237e:	4b04      	ldr	r3, [pc, #16]	; (8002390 <SysTick_Config+0x40>)
 8002380:	2207      	movs	r2, #7
 8002382:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	e000e010 	.word	0xe000e010

08002394 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f7ff ff2d 	bl	80021fc <__NVIC_SetPriorityGrouping>
}
 80023a2:	bf00      	nop
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b086      	sub	sp, #24
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	4603      	mov	r3, r0
 80023b2:	60b9      	str	r1, [r7, #8]
 80023b4:	607a      	str	r2, [r7, #4]
 80023b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023b8:	2300      	movs	r3, #0
 80023ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023bc:	f7ff ff42 	bl	8002244 <__NVIC_GetPriorityGrouping>
 80023c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	68b9      	ldr	r1, [r7, #8]
 80023c6:	6978      	ldr	r0, [r7, #20]
 80023c8:	f7ff ff90 	bl	80022ec <NVIC_EncodePriority>
 80023cc:	4602      	mov	r2, r0
 80023ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023d2:	4611      	mov	r1, r2
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7ff ff5f 	bl	8002298 <__NVIC_SetPriority>
}
 80023da:	bf00      	nop
 80023dc:	3718      	adds	r7, #24
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b082      	sub	sp, #8
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	4603      	mov	r3, r0
 80023ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7ff ff35 	bl	8002260 <__NVIC_EnableIRQ>
}
 80023f6:	bf00      	nop
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b082      	sub	sp, #8
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f7ff ffa2 	bl	8002350 <SysTick_Config>
 800240c:	4603      	mov	r3, r0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}

08002416 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002416:	b480      	push	{r7}
 8002418:	b085      	sub	sp, #20
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800241e:	2300      	movs	r3, #0
 8002420:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002428:	b2db      	uxtb	r3, r3
 800242a:	2b02      	cmp	r3, #2
 800242c:	d008      	beq.n	8002440 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2204      	movs	r2, #4
 8002432:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e020      	b.n	8002482 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f022 020e 	bic.w	r2, r2, #14
 800244e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f022 0201 	bic.w	r2, r2, #1
 800245e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002468:	2101      	movs	r1, #1
 800246a:	fa01 f202 	lsl.w	r2, r1, r2
 800246e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002480:	7bfb      	ldrb	r3, [r7, #15]
}
 8002482:	4618      	mov	r0, r3
 8002484:	3714      	adds	r7, #20
 8002486:	46bd      	mov	sp, r7
 8002488:	bc80      	pop	{r7}
 800248a:	4770      	bx	lr

0800248c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002494:	2300      	movs	r3, #0
 8002496:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d005      	beq.n	80024b0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2204      	movs	r2, #4
 80024a8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	73fb      	strb	r3, [r7, #15]
 80024ae:	e051      	b.n	8002554 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f022 020e 	bic.w	r2, r2, #14
 80024be:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f022 0201 	bic.w	r2, r2, #1
 80024ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a22      	ldr	r2, [pc, #136]	; (8002560 <HAL_DMA_Abort_IT+0xd4>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d029      	beq.n	800252e <HAL_DMA_Abort_IT+0xa2>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a21      	ldr	r2, [pc, #132]	; (8002564 <HAL_DMA_Abort_IT+0xd8>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d022      	beq.n	800252a <HAL_DMA_Abort_IT+0x9e>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a1f      	ldr	r2, [pc, #124]	; (8002568 <HAL_DMA_Abort_IT+0xdc>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d01a      	beq.n	8002524 <HAL_DMA_Abort_IT+0x98>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a1e      	ldr	r2, [pc, #120]	; (800256c <HAL_DMA_Abort_IT+0xe0>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d012      	beq.n	800251e <HAL_DMA_Abort_IT+0x92>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a1c      	ldr	r2, [pc, #112]	; (8002570 <HAL_DMA_Abort_IT+0xe4>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d00a      	beq.n	8002518 <HAL_DMA_Abort_IT+0x8c>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a1b      	ldr	r2, [pc, #108]	; (8002574 <HAL_DMA_Abort_IT+0xe8>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d102      	bne.n	8002512 <HAL_DMA_Abort_IT+0x86>
 800250c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002510:	e00e      	b.n	8002530 <HAL_DMA_Abort_IT+0xa4>
 8002512:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002516:	e00b      	b.n	8002530 <HAL_DMA_Abort_IT+0xa4>
 8002518:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800251c:	e008      	b.n	8002530 <HAL_DMA_Abort_IT+0xa4>
 800251e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002522:	e005      	b.n	8002530 <HAL_DMA_Abort_IT+0xa4>
 8002524:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002528:	e002      	b.n	8002530 <HAL_DMA_Abort_IT+0xa4>
 800252a:	2310      	movs	r3, #16
 800252c:	e000      	b.n	8002530 <HAL_DMA_Abort_IT+0xa4>
 800252e:	2301      	movs	r3, #1
 8002530:	4a11      	ldr	r2, [pc, #68]	; (8002578 <HAL_DMA_Abort_IT+0xec>)
 8002532:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002548:	2b00      	cmp	r3, #0
 800254a:	d003      	beq.n	8002554 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	4798      	blx	r3
    } 
  }
  return status;
 8002554:	7bfb      	ldrb	r3, [r7, #15]
}
 8002556:	4618      	mov	r0, r3
 8002558:	3710      	adds	r7, #16
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	40020008 	.word	0x40020008
 8002564:	4002001c 	.word	0x4002001c
 8002568:	40020030 	.word	0x40020030
 800256c:	40020044 	.word	0x40020044
 8002570:	40020058 	.word	0x40020058
 8002574:	4002006c 	.word	0x4002006c
 8002578:	40020000 	.word	0x40020000

0800257c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800257c:	b480      	push	{r7}
 800257e:	b08b      	sub	sp, #44	; 0x2c
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002586:	2300      	movs	r3, #0
 8002588:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800258a:	2300      	movs	r3, #0
 800258c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800258e:	e169      	b.n	8002864 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002590:	2201      	movs	r2, #1
 8002592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	69fa      	ldr	r2, [r7, #28]
 80025a0:	4013      	ands	r3, r2
 80025a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	f040 8158 	bne.w	800285e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	4a9a      	ldr	r2, [pc, #616]	; (800281c <HAL_GPIO_Init+0x2a0>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d05e      	beq.n	8002676 <HAL_GPIO_Init+0xfa>
 80025b8:	4a98      	ldr	r2, [pc, #608]	; (800281c <HAL_GPIO_Init+0x2a0>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d875      	bhi.n	80026aa <HAL_GPIO_Init+0x12e>
 80025be:	4a98      	ldr	r2, [pc, #608]	; (8002820 <HAL_GPIO_Init+0x2a4>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d058      	beq.n	8002676 <HAL_GPIO_Init+0xfa>
 80025c4:	4a96      	ldr	r2, [pc, #600]	; (8002820 <HAL_GPIO_Init+0x2a4>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d86f      	bhi.n	80026aa <HAL_GPIO_Init+0x12e>
 80025ca:	4a96      	ldr	r2, [pc, #600]	; (8002824 <HAL_GPIO_Init+0x2a8>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d052      	beq.n	8002676 <HAL_GPIO_Init+0xfa>
 80025d0:	4a94      	ldr	r2, [pc, #592]	; (8002824 <HAL_GPIO_Init+0x2a8>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d869      	bhi.n	80026aa <HAL_GPIO_Init+0x12e>
 80025d6:	4a94      	ldr	r2, [pc, #592]	; (8002828 <HAL_GPIO_Init+0x2ac>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d04c      	beq.n	8002676 <HAL_GPIO_Init+0xfa>
 80025dc:	4a92      	ldr	r2, [pc, #584]	; (8002828 <HAL_GPIO_Init+0x2ac>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d863      	bhi.n	80026aa <HAL_GPIO_Init+0x12e>
 80025e2:	4a92      	ldr	r2, [pc, #584]	; (800282c <HAL_GPIO_Init+0x2b0>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d046      	beq.n	8002676 <HAL_GPIO_Init+0xfa>
 80025e8:	4a90      	ldr	r2, [pc, #576]	; (800282c <HAL_GPIO_Init+0x2b0>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d85d      	bhi.n	80026aa <HAL_GPIO_Init+0x12e>
 80025ee:	2b12      	cmp	r3, #18
 80025f0:	d82a      	bhi.n	8002648 <HAL_GPIO_Init+0xcc>
 80025f2:	2b12      	cmp	r3, #18
 80025f4:	d859      	bhi.n	80026aa <HAL_GPIO_Init+0x12e>
 80025f6:	a201      	add	r2, pc, #4	; (adr r2, 80025fc <HAL_GPIO_Init+0x80>)
 80025f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025fc:	08002677 	.word	0x08002677
 8002600:	08002651 	.word	0x08002651
 8002604:	08002663 	.word	0x08002663
 8002608:	080026a5 	.word	0x080026a5
 800260c:	080026ab 	.word	0x080026ab
 8002610:	080026ab 	.word	0x080026ab
 8002614:	080026ab 	.word	0x080026ab
 8002618:	080026ab 	.word	0x080026ab
 800261c:	080026ab 	.word	0x080026ab
 8002620:	080026ab 	.word	0x080026ab
 8002624:	080026ab 	.word	0x080026ab
 8002628:	080026ab 	.word	0x080026ab
 800262c:	080026ab 	.word	0x080026ab
 8002630:	080026ab 	.word	0x080026ab
 8002634:	080026ab 	.word	0x080026ab
 8002638:	080026ab 	.word	0x080026ab
 800263c:	080026ab 	.word	0x080026ab
 8002640:	08002659 	.word	0x08002659
 8002644:	0800266d 	.word	0x0800266d
 8002648:	4a79      	ldr	r2, [pc, #484]	; (8002830 <HAL_GPIO_Init+0x2b4>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d013      	beq.n	8002676 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800264e:	e02c      	b.n	80026aa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	623b      	str	r3, [r7, #32]
          break;
 8002656:	e029      	b.n	80026ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	3304      	adds	r3, #4
 800265e:	623b      	str	r3, [r7, #32]
          break;
 8002660:	e024      	b.n	80026ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	3308      	adds	r3, #8
 8002668:	623b      	str	r3, [r7, #32]
          break;
 800266a:	e01f      	b.n	80026ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	330c      	adds	r3, #12
 8002672:	623b      	str	r3, [r7, #32]
          break;
 8002674:	e01a      	b.n	80026ac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d102      	bne.n	8002684 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800267e:	2304      	movs	r3, #4
 8002680:	623b      	str	r3, [r7, #32]
          break;
 8002682:	e013      	b.n	80026ac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	2b01      	cmp	r3, #1
 800268a:	d105      	bne.n	8002698 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800268c:	2308      	movs	r3, #8
 800268e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	69fa      	ldr	r2, [r7, #28]
 8002694:	611a      	str	r2, [r3, #16]
          break;
 8002696:	e009      	b.n	80026ac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002698:	2308      	movs	r3, #8
 800269a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	69fa      	ldr	r2, [r7, #28]
 80026a0:	615a      	str	r2, [r3, #20]
          break;
 80026a2:	e003      	b.n	80026ac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80026a4:	2300      	movs	r3, #0
 80026a6:	623b      	str	r3, [r7, #32]
          break;
 80026a8:	e000      	b.n	80026ac <HAL_GPIO_Init+0x130>
          break;
 80026aa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	2bff      	cmp	r3, #255	; 0xff
 80026b0:	d801      	bhi.n	80026b6 <HAL_GPIO_Init+0x13a>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	e001      	b.n	80026ba <HAL_GPIO_Init+0x13e>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	3304      	adds	r3, #4
 80026ba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	2bff      	cmp	r3, #255	; 0xff
 80026c0:	d802      	bhi.n	80026c8 <HAL_GPIO_Init+0x14c>
 80026c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	e002      	b.n	80026ce <HAL_GPIO_Init+0x152>
 80026c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ca:	3b08      	subs	r3, #8
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	210f      	movs	r1, #15
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	fa01 f303 	lsl.w	r3, r1, r3
 80026dc:	43db      	mvns	r3, r3
 80026de:	401a      	ands	r2, r3
 80026e0:	6a39      	ldr	r1, [r7, #32]
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	fa01 f303 	lsl.w	r3, r1, r3
 80026e8:	431a      	orrs	r2, r3
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	f000 80b1 	beq.w	800285e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80026fc:	4b4d      	ldr	r3, [pc, #308]	; (8002834 <HAL_GPIO_Init+0x2b8>)
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	4a4c      	ldr	r2, [pc, #304]	; (8002834 <HAL_GPIO_Init+0x2b8>)
 8002702:	f043 0301 	orr.w	r3, r3, #1
 8002706:	6193      	str	r3, [r2, #24]
 8002708:	4b4a      	ldr	r3, [pc, #296]	; (8002834 <HAL_GPIO_Init+0x2b8>)
 800270a:	699b      	ldr	r3, [r3, #24]
 800270c:	f003 0301 	and.w	r3, r3, #1
 8002710:	60bb      	str	r3, [r7, #8]
 8002712:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002714:	4a48      	ldr	r2, [pc, #288]	; (8002838 <HAL_GPIO_Init+0x2bc>)
 8002716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002718:	089b      	lsrs	r3, r3, #2
 800271a:	3302      	adds	r3, #2
 800271c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002720:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002724:	f003 0303 	and.w	r3, r3, #3
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	220f      	movs	r2, #15
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	43db      	mvns	r3, r3
 8002732:	68fa      	ldr	r2, [r7, #12]
 8002734:	4013      	ands	r3, r2
 8002736:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	4a40      	ldr	r2, [pc, #256]	; (800283c <HAL_GPIO_Init+0x2c0>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d013      	beq.n	8002768 <HAL_GPIO_Init+0x1ec>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4a3f      	ldr	r2, [pc, #252]	; (8002840 <HAL_GPIO_Init+0x2c4>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d00d      	beq.n	8002764 <HAL_GPIO_Init+0x1e8>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	4a3e      	ldr	r2, [pc, #248]	; (8002844 <HAL_GPIO_Init+0x2c8>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d007      	beq.n	8002760 <HAL_GPIO_Init+0x1e4>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	4a3d      	ldr	r2, [pc, #244]	; (8002848 <HAL_GPIO_Init+0x2cc>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d101      	bne.n	800275c <HAL_GPIO_Init+0x1e0>
 8002758:	2303      	movs	r3, #3
 800275a:	e006      	b.n	800276a <HAL_GPIO_Init+0x1ee>
 800275c:	2304      	movs	r3, #4
 800275e:	e004      	b.n	800276a <HAL_GPIO_Init+0x1ee>
 8002760:	2302      	movs	r3, #2
 8002762:	e002      	b.n	800276a <HAL_GPIO_Init+0x1ee>
 8002764:	2301      	movs	r3, #1
 8002766:	e000      	b.n	800276a <HAL_GPIO_Init+0x1ee>
 8002768:	2300      	movs	r3, #0
 800276a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800276c:	f002 0203 	and.w	r2, r2, #3
 8002770:	0092      	lsls	r2, r2, #2
 8002772:	4093      	lsls	r3, r2
 8002774:	68fa      	ldr	r2, [r7, #12]
 8002776:	4313      	orrs	r3, r2
 8002778:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800277a:	492f      	ldr	r1, [pc, #188]	; (8002838 <HAL_GPIO_Init+0x2bc>)
 800277c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277e:	089b      	lsrs	r3, r3, #2
 8002780:	3302      	adds	r3, #2
 8002782:	68fa      	ldr	r2, [r7, #12]
 8002784:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d006      	beq.n	80027a2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002794:	4b2d      	ldr	r3, [pc, #180]	; (800284c <HAL_GPIO_Init+0x2d0>)
 8002796:	689a      	ldr	r2, [r3, #8]
 8002798:	492c      	ldr	r1, [pc, #176]	; (800284c <HAL_GPIO_Init+0x2d0>)
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	4313      	orrs	r3, r2
 800279e:	608b      	str	r3, [r1, #8]
 80027a0:	e006      	b.n	80027b0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80027a2:	4b2a      	ldr	r3, [pc, #168]	; (800284c <HAL_GPIO_Init+0x2d0>)
 80027a4:	689a      	ldr	r2, [r3, #8]
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	43db      	mvns	r3, r3
 80027aa:	4928      	ldr	r1, [pc, #160]	; (800284c <HAL_GPIO_Init+0x2d0>)
 80027ac:	4013      	ands	r3, r2
 80027ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d006      	beq.n	80027ca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80027bc:	4b23      	ldr	r3, [pc, #140]	; (800284c <HAL_GPIO_Init+0x2d0>)
 80027be:	68da      	ldr	r2, [r3, #12]
 80027c0:	4922      	ldr	r1, [pc, #136]	; (800284c <HAL_GPIO_Init+0x2d0>)
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	60cb      	str	r3, [r1, #12]
 80027c8:	e006      	b.n	80027d8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80027ca:	4b20      	ldr	r3, [pc, #128]	; (800284c <HAL_GPIO_Init+0x2d0>)
 80027cc:	68da      	ldr	r2, [r3, #12]
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	43db      	mvns	r3, r3
 80027d2:	491e      	ldr	r1, [pc, #120]	; (800284c <HAL_GPIO_Init+0x2d0>)
 80027d4:	4013      	ands	r3, r2
 80027d6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d006      	beq.n	80027f2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80027e4:	4b19      	ldr	r3, [pc, #100]	; (800284c <HAL_GPIO_Init+0x2d0>)
 80027e6:	685a      	ldr	r2, [r3, #4]
 80027e8:	4918      	ldr	r1, [pc, #96]	; (800284c <HAL_GPIO_Init+0x2d0>)
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	604b      	str	r3, [r1, #4]
 80027f0:	e006      	b.n	8002800 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80027f2:	4b16      	ldr	r3, [pc, #88]	; (800284c <HAL_GPIO_Init+0x2d0>)
 80027f4:	685a      	ldr	r2, [r3, #4]
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	43db      	mvns	r3, r3
 80027fa:	4914      	ldr	r1, [pc, #80]	; (800284c <HAL_GPIO_Init+0x2d0>)
 80027fc:	4013      	ands	r3, r2
 80027fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d021      	beq.n	8002850 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800280c:	4b0f      	ldr	r3, [pc, #60]	; (800284c <HAL_GPIO_Init+0x2d0>)
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	490e      	ldr	r1, [pc, #56]	; (800284c <HAL_GPIO_Init+0x2d0>)
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	4313      	orrs	r3, r2
 8002816:	600b      	str	r3, [r1, #0]
 8002818:	e021      	b.n	800285e <HAL_GPIO_Init+0x2e2>
 800281a:	bf00      	nop
 800281c:	10320000 	.word	0x10320000
 8002820:	10310000 	.word	0x10310000
 8002824:	10220000 	.word	0x10220000
 8002828:	10210000 	.word	0x10210000
 800282c:	10120000 	.word	0x10120000
 8002830:	10110000 	.word	0x10110000
 8002834:	40021000 	.word	0x40021000
 8002838:	40010000 	.word	0x40010000
 800283c:	40010800 	.word	0x40010800
 8002840:	40010c00 	.word	0x40010c00
 8002844:	40011000 	.word	0x40011000
 8002848:	40011400 	.word	0x40011400
 800284c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002850:	4b0b      	ldr	r3, [pc, #44]	; (8002880 <HAL_GPIO_Init+0x304>)
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	43db      	mvns	r3, r3
 8002858:	4909      	ldr	r1, [pc, #36]	; (8002880 <HAL_GPIO_Init+0x304>)
 800285a:	4013      	ands	r3, r2
 800285c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800285e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002860:	3301      	adds	r3, #1
 8002862:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286a:	fa22 f303 	lsr.w	r3, r2, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	f47f ae8e 	bne.w	8002590 <HAL_GPIO_Init+0x14>
  }
}
 8002874:	bf00      	nop
 8002876:	bf00      	nop
 8002878:	372c      	adds	r7, #44	; 0x2c
 800287a:	46bd      	mov	sp, r7
 800287c:	bc80      	pop	{r7}
 800287e:	4770      	bx	lr
 8002880:	40010400 	.word	0x40010400

08002884 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	460b      	mov	r3, r1
 800288e:	807b      	strh	r3, [r7, #2]
 8002890:	4613      	mov	r3, r2
 8002892:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002894:	787b      	ldrb	r3, [r7, #1]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d003      	beq.n	80028a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800289a:	887a      	ldrh	r2, [r7, #2]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80028a0:	e003      	b.n	80028aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80028a2:	887b      	ldrh	r3, [r7, #2]
 80028a4:	041a      	lsls	r2, r3, #16
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	611a      	str	r2, [r3, #16]
}
 80028aa:	bf00      	nop
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bc80      	pop	{r7}
 80028b2:	4770      	bx	lr

080028b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b086      	sub	sp, #24
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e272      	b.n	8002dac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f000 8087 	beq.w	80029e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028d4:	4b92      	ldr	r3, [pc, #584]	; (8002b20 <HAL_RCC_OscConfig+0x26c>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f003 030c 	and.w	r3, r3, #12
 80028dc:	2b04      	cmp	r3, #4
 80028de:	d00c      	beq.n	80028fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80028e0:	4b8f      	ldr	r3, [pc, #572]	; (8002b20 <HAL_RCC_OscConfig+0x26c>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f003 030c 	and.w	r3, r3, #12
 80028e8:	2b08      	cmp	r3, #8
 80028ea:	d112      	bne.n	8002912 <HAL_RCC_OscConfig+0x5e>
 80028ec:	4b8c      	ldr	r3, [pc, #560]	; (8002b20 <HAL_RCC_OscConfig+0x26c>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028f8:	d10b      	bne.n	8002912 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028fa:	4b89      	ldr	r3, [pc, #548]	; (8002b20 <HAL_RCC_OscConfig+0x26c>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d06c      	beq.n	80029e0 <HAL_RCC_OscConfig+0x12c>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d168      	bne.n	80029e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e24c      	b.n	8002dac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800291a:	d106      	bne.n	800292a <HAL_RCC_OscConfig+0x76>
 800291c:	4b80      	ldr	r3, [pc, #512]	; (8002b20 <HAL_RCC_OscConfig+0x26c>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a7f      	ldr	r2, [pc, #508]	; (8002b20 <HAL_RCC_OscConfig+0x26c>)
 8002922:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002926:	6013      	str	r3, [r2, #0]
 8002928:	e02e      	b.n	8002988 <HAL_RCC_OscConfig+0xd4>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d10c      	bne.n	800294c <HAL_RCC_OscConfig+0x98>
 8002932:	4b7b      	ldr	r3, [pc, #492]	; (8002b20 <HAL_RCC_OscConfig+0x26c>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a7a      	ldr	r2, [pc, #488]	; (8002b20 <HAL_RCC_OscConfig+0x26c>)
 8002938:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800293c:	6013      	str	r3, [r2, #0]
 800293e:	4b78      	ldr	r3, [pc, #480]	; (8002b20 <HAL_RCC_OscConfig+0x26c>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a77      	ldr	r2, [pc, #476]	; (8002b20 <HAL_RCC_OscConfig+0x26c>)
 8002944:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002948:	6013      	str	r3, [r2, #0]
 800294a:	e01d      	b.n	8002988 <HAL_RCC_OscConfig+0xd4>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002954:	d10c      	bne.n	8002970 <HAL_RCC_OscConfig+0xbc>
 8002956:	4b72      	ldr	r3, [pc, #456]	; (8002b20 <HAL_RCC_OscConfig+0x26c>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a71      	ldr	r2, [pc, #452]	; (8002b20 <HAL_RCC_OscConfig+0x26c>)
 800295c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002960:	6013      	str	r3, [r2, #0]
 8002962:	4b6f      	ldr	r3, [pc, #444]	; (8002b20 <HAL_RCC_OscConfig+0x26c>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a6e      	ldr	r2, [pc, #440]	; (8002b20 <HAL_RCC_OscConfig+0x26c>)
 8002968:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800296c:	6013      	str	r3, [r2, #0]
 800296e:	e00b      	b.n	8002988 <HAL_RCC_OscConfig+0xd4>
 8002970:	4b6b      	ldr	r3, [pc, #428]	; (8002b20 <HAL_RCC_OscConfig+0x26c>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a6a      	ldr	r2, [pc, #424]	; (8002b20 <HAL_RCC_OscConfig+0x26c>)
 8002976:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800297a:	6013      	str	r3, [r2, #0]
 800297c:	4b68      	ldr	r3, [pc, #416]	; (8002b20 <HAL_RCC_OscConfig+0x26c>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a67      	ldr	r2, [pc, #412]	; (8002b20 <HAL_RCC_OscConfig+0x26c>)
 8002982:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002986:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d013      	beq.n	80029b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002990:	f7fe fdea 	bl	8001568 <HAL_GetTick>
 8002994:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002996:	e008      	b.n	80029aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002998:	f7fe fde6 	bl	8001568 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	2b64      	cmp	r3, #100	; 0x64
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e200      	b.n	8002dac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029aa:	4b5d      	ldr	r3, [pc, #372]	; (8002b20 <HAL_RCC_OscConfig+0x26c>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d0f0      	beq.n	8002998 <HAL_RCC_OscConfig+0xe4>
 80029b6:	e014      	b.n	80029e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b8:	f7fe fdd6 	bl	8001568 <HAL_GetTick>
 80029bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029be:	e008      	b.n	80029d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029c0:	f7fe fdd2 	bl	8001568 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b64      	cmp	r3, #100	; 0x64
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e1ec      	b.n	8002dac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029d2:	4b53      	ldr	r3, [pc, #332]	; (8002b20 <HAL_RCC_OscConfig+0x26c>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1f0      	bne.n	80029c0 <HAL_RCC_OscConfig+0x10c>
 80029de:	e000      	b.n	80029e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d063      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029ee:	4b4c      	ldr	r3, [pc, #304]	; (8002b20 <HAL_RCC_OscConfig+0x26c>)
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f003 030c 	and.w	r3, r3, #12
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00b      	beq.n	8002a12 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80029fa:	4b49      	ldr	r3, [pc, #292]	; (8002b20 <HAL_RCC_OscConfig+0x26c>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f003 030c 	and.w	r3, r3, #12
 8002a02:	2b08      	cmp	r3, #8
 8002a04:	d11c      	bne.n	8002a40 <HAL_RCC_OscConfig+0x18c>
 8002a06:	4b46      	ldr	r3, [pc, #280]	; (8002b20 <HAL_RCC_OscConfig+0x26c>)
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d116      	bne.n	8002a40 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a12:	4b43      	ldr	r3, [pc, #268]	; (8002b20 <HAL_RCC_OscConfig+0x26c>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d005      	beq.n	8002a2a <HAL_RCC_OscConfig+0x176>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d001      	beq.n	8002a2a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e1c0      	b.n	8002dac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a2a:	4b3d      	ldr	r3, [pc, #244]	; (8002b20 <HAL_RCC_OscConfig+0x26c>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	695b      	ldr	r3, [r3, #20]
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	4939      	ldr	r1, [pc, #228]	; (8002b20 <HAL_RCC_OscConfig+0x26c>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a3e:	e03a      	b.n	8002ab6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	691b      	ldr	r3, [r3, #16]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d020      	beq.n	8002a8a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a48:	4b36      	ldr	r3, [pc, #216]	; (8002b24 <HAL_RCC_OscConfig+0x270>)
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a4e:	f7fe fd8b 	bl	8001568 <HAL_GetTick>
 8002a52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a54:	e008      	b.n	8002a68 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a56:	f7fe fd87 	bl	8001568 <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d901      	bls.n	8002a68 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e1a1      	b.n	8002dac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a68:	4b2d      	ldr	r3, [pc, #180]	; (8002b20 <HAL_RCC_OscConfig+0x26c>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0302 	and.w	r3, r3, #2
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d0f0      	beq.n	8002a56 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a74:	4b2a      	ldr	r3, [pc, #168]	; (8002b20 <HAL_RCC_OscConfig+0x26c>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	695b      	ldr	r3, [r3, #20]
 8002a80:	00db      	lsls	r3, r3, #3
 8002a82:	4927      	ldr	r1, [pc, #156]	; (8002b20 <HAL_RCC_OscConfig+0x26c>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	600b      	str	r3, [r1, #0]
 8002a88:	e015      	b.n	8002ab6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a8a:	4b26      	ldr	r3, [pc, #152]	; (8002b24 <HAL_RCC_OscConfig+0x270>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a90:	f7fe fd6a 	bl	8001568 <HAL_GetTick>
 8002a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a96:	e008      	b.n	8002aaa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a98:	f7fe fd66 	bl	8001568 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e180      	b.n	8002dac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aaa:	4b1d      	ldr	r3, [pc, #116]	; (8002b20 <HAL_RCC_OscConfig+0x26c>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d1f0      	bne.n	8002a98 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0308 	and.w	r3, r3, #8
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d03a      	beq.n	8002b38 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	699b      	ldr	r3, [r3, #24]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d019      	beq.n	8002afe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002aca:	4b17      	ldr	r3, [pc, #92]	; (8002b28 <HAL_RCC_OscConfig+0x274>)
 8002acc:	2201      	movs	r2, #1
 8002ace:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ad0:	f7fe fd4a 	bl	8001568 <HAL_GetTick>
 8002ad4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ad6:	e008      	b.n	8002aea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ad8:	f7fe fd46 	bl	8001568 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d901      	bls.n	8002aea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e160      	b.n	8002dac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aea:	4b0d      	ldr	r3, [pc, #52]	; (8002b20 <HAL_RCC_OscConfig+0x26c>)
 8002aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aee:	f003 0302 	and.w	r3, r3, #2
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d0f0      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002af6:	2001      	movs	r0, #1
 8002af8:	f000 face 	bl	8003098 <RCC_Delay>
 8002afc:	e01c      	b.n	8002b38 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002afe:	4b0a      	ldr	r3, [pc, #40]	; (8002b28 <HAL_RCC_OscConfig+0x274>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b04:	f7fe fd30 	bl	8001568 <HAL_GetTick>
 8002b08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b0a:	e00f      	b.n	8002b2c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b0c:	f7fe fd2c 	bl	8001568 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d908      	bls.n	8002b2c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e146      	b.n	8002dac <HAL_RCC_OscConfig+0x4f8>
 8002b1e:	bf00      	nop
 8002b20:	40021000 	.word	0x40021000
 8002b24:	42420000 	.word	0x42420000
 8002b28:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b2c:	4b92      	ldr	r3, [pc, #584]	; (8002d78 <HAL_RCC_OscConfig+0x4c4>)
 8002b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b30:	f003 0302 	and.w	r3, r3, #2
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d1e9      	bne.n	8002b0c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0304 	and.w	r3, r3, #4
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	f000 80a6 	beq.w	8002c92 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b46:	2300      	movs	r3, #0
 8002b48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b4a:	4b8b      	ldr	r3, [pc, #556]	; (8002d78 <HAL_RCC_OscConfig+0x4c4>)
 8002b4c:	69db      	ldr	r3, [r3, #28]
 8002b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d10d      	bne.n	8002b72 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b56:	4b88      	ldr	r3, [pc, #544]	; (8002d78 <HAL_RCC_OscConfig+0x4c4>)
 8002b58:	69db      	ldr	r3, [r3, #28]
 8002b5a:	4a87      	ldr	r2, [pc, #540]	; (8002d78 <HAL_RCC_OscConfig+0x4c4>)
 8002b5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b60:	61d3      	str	r3, [r2, #28]
 8002b62:	4b85      	ldr	r3, [pc, #532]	; (8002d78 <HAL_RCC_OscConfig+0x4c4>)
 8002b64:	69db      	ldr	r3, [r3, #28]
 8002b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b6a:	60bb      	str	r3, [r7, #8]
 8002b6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b72:	4b82      	ldr	r3, [pc, #520]	; (8002d7c <HAL_RCC_OscConfig+0x4c8>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d118      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b7e:	4b7f      	ldr	r3, [pc, #508]	; (8002d7c <HAL_RCC_OscConfig+0x4c8>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a7e      	ldr	r2, [pc, #504]	; (8002d7c <HAL_RCC_OscConfig+0x4c8>)
 8002b84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b8a:	f7fe fced 	bl	8001568 <HAL_GetTick>
 8002b8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b90:	e008      	b.n	8002ba4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b92:	f7fe fce9 	bl	8001568 <HAL_GetTick>
 8002b96:	4602      	mov	r2, r0
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	2b64      	cmp	r3, #100	; 0x64
 8002b9e:	d901      	bls.n	8002ba4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e103      	b.n	8002dac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ba4:	4b75      	ldr	r3, [pc, #468]	; (8002d7c <HAL_RCC_OscConfig+0x4c8>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d0f0      	beq.n	8002b92 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d106      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x312>
 8002bb8:	4b6f      	ldr	r3, [pc, #444]	; (8002d78 <HAL_RCC_OscConfig+0x4c4>)
 8002bba:	6a1b      	ldr	r3, [r3, #32]
 8002bbc:	4a6e      	ldr	r2, [pc, #440]	; (8002d78 <HAL_RCC_OscConfig+0x4c4>)
 8002bbe:	f043 0301 	orr.w	r3, r3, #1
 8002bc2:	6213      	str	r3, [r2, #32]
 8002bc4:	e02d      	b.n	8002c22 <HAL_RCC_OscConfig+0x36e>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d10c      	bne.n	8002be8 <HAL_RCC_OscConfig+0x334>
 8002bce:	4b6a      	ldr	r3, [pc, #424]	; (8002d78 <HAL_RCC_OscConfig+0x4c4>)
 8002bd0:	6a1b      	ldr	r3, [r3, #32]
 8002bd2:	4a69      	ldr	r2, [pc, #420]	; (8002d78 <HAL_RCC_OscConfig+0x4c4>)
 8002bd4:	f023 0301 	bic.w	r3, r3, #1
 8002bd8:	6213      	str	r3, [r2, #32]
 8002bda:	4b67      	ldr	r3, [pc, #412]	; (8002d78 <HAL_RCC_OscConfig+0x4c4>)
 8002bdc:	6a1b      	ldr	r3, [r3, #32]
 8002bde:	4a66      	ldr	r2, [pc, #408]	; (8002d78 <HAL_RCC_OscConfig+0x4c4>)
 8002be0:	f023 0304 	bic.w	r3, r3, #4
 8002be4:	6213      	str	r3, [r2, #32]
 8002be6:	e01c      	b.n	8002c22 <HAL_RCC_OscConfig+0x36e>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	2b05      	cmp	r3, #5
 8002bee:	d10c      	bne.n	8002c0a <HAL_RCC_OscConfig+0x356>
 8002bf0:	4b61      	ldr	r3, [pc, #388]	; (8002d78 <HAL_RCC_OscConfig+0x4c4>)
 8002bf2:	6a1b      	ldr	r3, [r3, #32]
 8002bf4:	4a60      	ldr	r2, [pc, #384]	; (8002d78 <HAL_RCC_OscConfig+0x4c4>)
 8002bf6:	f043 0304 	orr.w	r3, r3, #4
 8002bfa:	6213      	str	r3, [r2, #32]
 8002bfc:	4b5e      	ldr	r3, [pc, #376]	; (8002d78 <HAL_RCC_OscConfig+0x4c4>)
 8002bfe:	6a1b      	ldr	r3, [r3, #32]
 8002c00:	4a5d      	ldr	r2, [pc, #372]	; (8002d78 <HAL_RCC_OscConfig+0x4c4>)
 8002c02:	f043 0301 	orr.w	r3, r3, #1
 8002c06:	6213      	str	r3, [r2, #32]
 8002c08:	e00b      	b.n	8002c22 <HAL_RCC_OscConfig+0x36e>
 8002c0a:	4b5b      	ldr	r3, [pc, #364]	; (8002d78 <HAL_RCC_OscConfig+0x4c4>)
 8002c0c:	6a1b      	ldr	r3, [r3, #32]
 8002c0e:	4a5a      	ldr	r2, [pc, #360]	; (8002d78 <HAL_RCC_OscConfig+0x4c4>)
 8002c10:	f023 0301 	bic.w	r3, r3, #1
 8002c14:	6213      	str	r3, [r2, #32]
 8002c16:	4b58      	ldr	r3, [pc, #352]	; (8002d78 <HAL_RCC_OscConfig+0x4c4>)
 8002c18:	6a1b      	ldr	r3, [r3, #32]
 8002c1a:	4a57      	ldr	r2, [pc, #348]	; (8002d78 <HAL_RCC_OscConfig+0x4c4>)
 8002c1c:	f023 0304 	bic.w	r3, r3, #4
 8002c20:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d015      	beq.n	8002c56 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c2a:	f7fe fc9d 	bl	8001568 <HAL_GetTick>
 8002c2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c30:	e00a      	b.n	8002c48 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c32:	f7fe fc99 	bl	8001568 <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d901      	bls.n	8002c48 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002c44:	2303      	movs	r3, #3
 8002c46:	e0b1      	b.n	8002dac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c48:	4b4b      	ldr	r3, [pc, #300]	; (8002d78 <HAL_RCC_OscConfig+0x4c4>)
 8002c4a:	6a1b      	ldr	r3, [r3, #32]
 8002c4c:	f003 0302 	and.w	r3, r3, #2
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d0ee      	beq.n	8002c32 <HAL_RCC_OscConfig+0x37e>
 8002c54:	e014      	b.n	8002c80 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c56:	f7fe fc87 	bl	8001568 <HAL_GetTick>
 8002c5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c5c:	e00a      	b.n	8002c74 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c5e:	f7fe fc83 	bl	8001568 <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d901      	bls.n	8002c74 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e09b      	b.n	8002dac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c74:	4b40      	ldr	r3, [pc, #256]	; (8002d78 <HAL_RCC_OscConfig+0x4c4>)
 8002c76:	6a1b      	ldr	r3, [r3, #32]
 8002c78:	f003 0302 	and.w	r3, r3, #2
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d1ee      	bne.n	8002c5e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c80:	7dfb      	ldrb	r3, [r7, #23]
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d105      	bne.n	8002c92 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c86:	4b3c      	ldr	r3, [pc, #240]	; (8002d78 <HAL_RCC_OscConfig+0x4c4>)
 8002c88:	69db      	ldr	r3, [r3, #28]
 8002c8a:	4a3b      	ldr	r2, [pc, #236]	; (8002d78 <HAL_RCC_OscConfig+0x4c4>)
 8002c8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c90:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	69db      	ldr	r3, [r3, #28]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	f000 8087 	beq.w	8002daa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c9c:	4b36      	ldr	r3, [pc, #216]	; (8002d78 <HAL_RCC_OscConfig+0x4c4>)
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f003 030c 	and.w	r3, r3, #12
 8002ca4:	2b08      	cmp	r3, #8
 8002ca6:	d061      	beq.n	8002d6c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	69db      	ldr	r3, [r3, #28]
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d146      	bne.n	8002d3e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cb0:	4b33      	ldr	r3, [pc, #204]	; (8002d80 <HAL_RCC_OscConfig+0x4cc>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb6:	f7fe fc57 	bl	8001568 <HAL_GetTick>
 8002cba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cbc:	e008      	b.n	8002cd0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cbe:	f7fe fc53 	bl	8001568 <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d901      	bls.n	8002cd0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e06d      	b.n	8002dac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cd0:	4b29      	ldr	r3, [pc, #164]	; (8002d78 <HAL_RCC_OscConfig+0x4c4>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d1f0      	bne.n	8002cbe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a1b      	ldr	r3, [r3, #32]
 8002ce0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ce4:	d108      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002ce6:	4b24      	ldr	r3, [pc, #144]	; (8002d78 <HAL_RCC_OscConfig+0x4c4>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	4921      	ldr	r1, [pc, #132]	; (8002d78 <HAL_RCC_OscConfig+0x4c4>)
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cf8:	4b1f      	ldr	r3, [pc, #124]	; (8002d78 <HAL_RCC_OscConfig+0x4c4>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a19      	ldr	r1, [r3, #32]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d08:	430b      	orrs	r3, r1
 8002d0a:	491b      	ldr	r1, [pc, #108]	; (8002d78 <HAL_RCC_OscConfig+0x4c4>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d10:	4b1b      	ldr	r3, [pc, #108]	; (8002d80 <HAL_RCC_OscConfig+0x4cc>)
 8002d12:	2201      	movs	r2, #1
 8002d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d16:	f7fe fc27 	bl	8001568 <HAL_GetTick>
 8002d1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d1c:	e008      	b.n	8002d30 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d1e:	f7fe fc23 	bl	8001568 <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d901      	bls.n	8002d30 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e03d      	b.n	8002dac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d30:	4b11      	ldr	r3, [pc, #68]	; (8002d78 <HAL_RCC_OscConfig+0x4c4>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d0f0      	beq.n	8002d1e <HAL_RCC_OscConfig+0x46a>
 8002d3c:	e035      	b.n	8002daa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d3e:	4b10      	ldr	r3, [pc, #64]	; (8002d80 <HAL_RCC_OscConfig+0x4cc>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d44:	f7fe fc10 	bl	8001568 <HAL_GetTick>
 8002d48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d4a:	e008      	b.n	8002d5e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d4c:	f7fe fc0c 	bl	8001568 <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e026      	b.n	8002dac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d5e:	4b06      	ldr	r3, [pc, #24]	; (8002d78 <HAL_RCC_OscConfig+0x4c4>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1f0      	bne.n	8002d4c <HAL_RCC_OscConfig+0x498>
 8002d6a:	e01e      	b.n	8002daa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	69db      	ldr	r3, [r3, #28]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d107      	bne.n	8002d84 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e019      	b.n	8002dac <HAL_RCC_OscConfig+0x4f8>
 8002d78:	40021000 	.word	0x40021000
 8002d7c:	40007000 	.word	0x40007000
 8002d80:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d84:	4b0b      	ldr	r3, [pc, #44]	; (8002db4 <HAL_RCC_OscConfig+0x500>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a1b      	ldr	r3, [r3, #32]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d106      	bne.n	8002da6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d001      	beq.n	8002daa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e000      	b.n	8002dac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002daa:	2300      	movs	r3, #0
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3718      	adds	r7, #24
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	40021000 	.word	0x40021000

08002db8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d101      	bne.n	8002dcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e0d0      	b.n	8002f6e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002dcc:	4b6a      	ldr	r3, [pc, #424]	; (8002f78 <HAL_RCC_ClockConfig+0x1c0>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0307 	and.w	r3, r3, #7
 8002dd4:	683a      	ldr	r2, [r7, #0]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d910      	bls.n	8002dfc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dda:	4b67      	ldr	r3, [pc, #412]	; (8002f78 <HAL_RCC_ClockConfig+0x1c0>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f023 0207 	bic.w	r2, r3, #7
 8002de2:	4965      	ldr	r1, [pc, #404]	; (8002f78 <HAL_RCC_ClockConfig+0x1c0>)
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dea:	4b63      	ldr	r3, [pc, #396]	; (8002f78 <HAL_RCC_ClockConfig+0x1c0>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0307 	and.w	r3, r3, #7
 8002df2:	683a      	ldr	r2, [r7, #0]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d001      	beq.n	8002dfc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e0b8      	b.n	8002f6e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0302 	and.w	r3, r3, #2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d020      	beq.n	8002e4a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0304 	and.w	r3, r3, #4
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d005      	beq.n	8002e20 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e14:	4b59      	ldr	r3, [pc, #356]	; (8002f7c <HAL_RCC_ClockConfig+0x1c4>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	4a58      	ldr	r2, [pc, #352]	; (8002f7c <HAL_RCC_ClockConfig+0x1c4>)
 8002e1a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002e1e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0308 	and.w	r3, r3, #8
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d005      	beq.n	8002e38 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e2c:	4b53      	ldr	r3, [pc, #332]	; (8002f7c <HAL_RCC_ClockConfig+0x1c4>)
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	4a52      	ldr	r2, [pc, #328]	; (8002f7c <HAL_RCC_ClockConfig+0x1c4>)
 8002e32:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002e36:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e38:	4b50      	ldr	r3, [pc, #320]	; (8002f7c <HAL_RCC_ClockConfig+0x1c4>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	494d      	ldr	r1, [pc, #308]	; (8002f7c <HAL_RCC_ClockConfig+0x1c4>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d040      	beq.n	8002ed8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d107      	bne.n	8002e6e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e5e:	4b47      	ldr	r3, [pc, #284]	; (8002f7c <HAL_RCC_ClockConfig+0x1c4>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d115      	bne.n	8002e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e07f      	b.n	8002f6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d107      	bne.n	8002e86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e76:	4b41      	ldr	r3, [pc, #260]	; (8002f7c <HAL_RCC_ClockConfig+0x1c4>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d109      	bne.n	8002e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e073      	b.n	8002f6e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e86:	4b3d      	ldr	r3, [pc, #244]	; (8002f7c <HAL_RCC_ClockConfig+0x1c4>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d101      	bne.n	8002e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e06b      	b.n	8002f6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e96:	4b39      	ldr	r3, [pc, #228]	; (8002f7c <HAL_RCC_ClockConfig+0x1c4>)
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f023 0203 	bic.w	r2, r3, #3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	4936      	ldr	r1, [pc, #216]	; (8002f7c <HAL_RCC_ClockConfig+0x1c4>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ea8:	f7fe fb5e 	bl	8001568 <HAL_GetTick>
 8002eac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eae:	e00a      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002eb0:	f7fe fb5a 	bl	8001568 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e053      	b.n	8002f6e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ec6:	4b2d      	ldr	r3, [pc, #180]	; (8002f7c <HAL_RCC_ClockConfig+0x1c4>)
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f003 020c 	and.w	r2, r3, #12
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d1eb      	bne.n	8002eb0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ed8:	4b27      	ldr	r3, [pc, #156]	; (8002f78 <HAL_RCC_ClockConfig+0x1c0>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0307 	and.w	r3, r3, #7
 8002ee0:	683a      	ldr	r2, [r7, #0]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d210      	bcs.n	8002f08 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ee6:	4b24      	ldr	r3, [pc, #144]	; (8002f78 <HAL_RCC_ClockConfig+0x1c0>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f023 0207 	bic.w	r2, r3, #7
 8002eee:	4922      	ldr	r1, [pc, #136]	; (8002f78 <HAL_RCC_ClockConfig+0x1c0>)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ef6:	4b20      	ldr	r3, [pc, #128]	; (8002f78 <HAL_RCC_ClockConfig+0x1c0>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0307 	and.w	r3, r3, #7
 8002efe:	683a      	ldr	r2, [r7, #0]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d001      	beq.n	8002f08 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e032      	b.n	8002f6e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0304 	and.w	r3, r3, #4
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d008      	beq.n	8002f26 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f14:	4b19      	ldr	r3, [pc, #100]	; (8002f7c <HAL_RCC_ClockConfig+0x1c4>)
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	4916      	ldr	r1, [pc, #88]	; (8002f7c <HAL_RCC_ClockConfig+0x1c4>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0308 	and.w	r3, r3, #8
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d009      	beq.n	8002f46 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f32:	4b12      	ldr	r3, [pc, #72]	; (8002f7c <HAL_RCC_ClockConfig+0x1c4>)
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	490e      	ldr	r1, [pc, #56]	; (8002f7c <HAL_RCC_ClockConfig+0x1c4>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f46:	f000 f821 	bl	8002f8c <HAL_RCC_GetSysClockFreq>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	4b0b      	ldr	r3, [pc, #44]	; (8002f7c <HAL_RCC_ClockConfig+0x1c4>)
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	091b      	lsrs	r3, r3, #4
 8002f52:	f003 030f 	and.w	r3, r3, #15
 8002f56:	490a      	ldr	r1, [pc, #40]	; (8002f80 <HAL_RCC_ClockConfig+0x1c8>)
 8002f58:	5ccb      	ldrb	r3, [r1, r3]
 8002f5a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f5e:	4a09      	ldr	r2, [pc, #36]	; (8002f84 <HAL_RCC_ClockConfig+0x1cc>)
 8002f60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f62:	4b09      	ldr	r3, [pc, #36]	; (8002f88 <HAL_RCC_ClockConfig+0x1d0>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7fe fabc 	bl	80014e4 <HAL_InitTick>

  return HAL_OK;
 8002f6c:	2300      	movs	r3, #0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3710      	adds	r7, #16
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	40022000 	.word	0x40022000
 8002f7c:	40021000 	.word	0x40021000
 8002f80:	08004400 	.word	0x08004400
 8002f84:	20000000 	.word	0x20000000
 8002f88:	20000004 	.word	0x20000004

08002f8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b087      	sub	sp, #28
 8002f90:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f92:	2300      	movs	r3, #0
 8002f94:	60fb      	str	r3, [r7, #12]
 8002f96:	2300      	movs	r3, #0
 8002f98:	60bb      	str	r3, [r7, #8]
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	617b      	str	r3, [r7, #20]
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002fa6:	4b1e      	ldr	r3, [pc, #120]	; (8003020 <HAL_RCC_GetSysClockFreq+0x94>)
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f003 030c 	and.w	r3, r3, #12
 8002fb2:	2b04      	cmp	r3, #4
 8002fb4:	d002      	beq.n	8002fbc <HAL_RCC_GetSysClockFreq+0x30>
 8002fb6:	2b08      	cmp	r3, #8
 8002fb8:	d003      	beq.n	8002fc2 <HAL_RCC_GetSysClockFreq+0x36>
 8002fba:	e027      	b.n	800300c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002fbc:	4b19      	ldr	r3, [pc, #100]	; (8003024 <HAL_RCC_GetSysClockFreq+0x98>)
 8002fbe:	613b      	str	r3, [r7, #16]
      break;
 8002fc0:	e027      	b.n	8003012 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	0c9b      	lsrs	r3, r3, #18
 8002fc6:	f003 030f 	and.w	r3, r3, #15
 8002fca:	4a17      	ldr	r2, [pc, #92]	; (8003028 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002fcc:	5cd3      	ldrb	r3, [r2, r3]
 8002fce:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d010      	beq.n	8002ffc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002fda:	4b11      	ldr	r3, [pc, #68]	; (8003020 <HAL_RCC_GetSysClockFreq+0x94>)
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	0c5b      	lsrs	r3, r3, #17
 8002fe0:	f003 0301 	and.w	r3, r3, #1
 8002fe4:	4a11      	ldr	r2, [pc, #68]	; (800302c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002fe6:	5cd3      	ldrb	r3, [r2, r3]
 8002fe8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a0d      	ldr	r2, [pc, #52]	; (8003024 <HAL_RCC_GetSysClockFreq+0x98>)
 8002fee:	fb03 f202 	mul.w	r2, r3, r2
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ff8:	617b      	str	r3, [r7, #20]
 8002ffa:	e004      	b.n	8003006 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	4a0c      	ldr	r2, [pc, #48]	; (8003030 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003000:	fb02 f303 	mul.w	r3, r2, r3
 8003004:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	613b      	str	r3, [r7, #16]
      break;
 800300a:	e002      	b.n	8003012 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800300c:	4b05      	ldr	r3, [pc, #20]	; (8003024 <HAL_RCC_GetSysClockFreq+0x98>)
 800300e:	613b      	str	r3, [r7, #16]
      break;
 8003010:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003012:	693b      	ldr	r3, [r7, #16]
}
 8003014:	4618      	mov	r0, r3
 8003016:	371c      	adds	r7, #28
 8003018:	46bd      	mov	sp, r7
 800301a:	bc80      	pop	{r7}
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	40021000 	.word	0x40021000
 8003024:	007a1200 	.word	0x007a1200
 8003028:	08004418 	.word	0x08004418
 800302c:	08004428 	.word	0x08004428
 8003030:	003d0900 	.word	0x003d0900

08003034 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003038:	4b02      	ldr	r3, [pc, #8]	; (8003044 <HAL_RCC_GetHCLKFreq+0x10>)
 800303a:	681b      	ldr	r3, [r3, #0]
}
 800303c:	4618      	mov	r0, r3
 800303e:	46bd      	mov	sp, r7
 8003040:	bc80      	pop	{r7}
 8003042:	4770      	bx	lr
 8003044:	20000000 	.word	0x20000000

08003048 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800304c:	f7ff fff2 	bl	8003034 <HAL_RCC_GetHCLKFreq>
 8003050:	4602      	mov	r2, r0
 8003052:	4b05      	ldr	r3, [pc, #20]	; (8003068 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	0a1b      	lsrs	r3, r3, #8
 8003058:	f003 0307 	and.w	r3, r3, #7
 800305c:	4903      	ldr	r1, [pc, #12]	; (800306c <HAL_RCC_GetPCLK1Freq+0x24>)
 800305e:	5ccb      	ldrb	r3, [r1, r3]
 8003060:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003064:	4618      	mov	r0, r3
 8003066:	bd80      	pop	{r7, pc}
 8003068:	40021000 	.word	0x40021000
 800306c:	08004410 	.word	0x08004410

08003070 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003074:	f7ff ffde 	bl	8003034 <HAL_RCC_GetHCLKFreq>
 8003078:	4602      	mov	r2, r0
 800307a:	4b05      	ldr	r3, [pc, #20]	; (8003090 <HAL_RCC_GetPCLK2Freq+0x20>)
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	0adb      	lsrs	r3, r3, #11
 8003080:	f003 0307 	and.w	r3, r3, #7
 8003084:	4903      	ldr	r1, [pc, #12]	; (8003094 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003086:	5ccb      	ldrb	r3, [r1, r3]
 8003088:	fa22 f303 	lsr.w	r3, r2, r3
}
 800308c:	4618      	mov	r0, r3
 800308e:	bd80      	pop	{r7, pc}
 8003090:	40021000 	.word	0x40021000
 8003094:	08004410 	.word	0x08004410

08003098 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003098:	b480      	push	{r7}
 800309a:	b085      	sub	sp, #20
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80030a0:	4b0a      	ldr	r3, [pc, #40]	; (80030cc <RCC_Delay+0x34>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a0a      	ldr	r2, [pc, #40]	; (80030d0 <RCC_Delay+0x38>)
 80030a6:	fba2 2303 	umull	r2, r3, r2, r3
 80030aa:	0a5b      	lsrs	r3, r3, #9
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	fb02 f303 	mul.w	r3, r2, r3
 80030b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80030b4:	bf00      	nop
  }
  while (Delay --);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	1e5a      	subs	r2, r3, #1
 80030ba:	60fa      	str	r2, [r7, #12]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d1f9      	bne.n	80030b4 <RCC_Delay+0x1c>
}
 80030c0:	bf00      	nop
 80030c2:	bf00      	nop
 80030c4:	3714      	adds	r7, #20
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bc80      	pop	{r7}
 80030ca:	4770      	bx	lr
 80030cc:	20000000 	.word	0x20000000
 80030d0:	10624dd3 	.word	0x10624dd3

080030d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e041      	b.n	800316a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d106      	bne.n	8003100 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f7fe f8ce 	bl	800129c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2202      	movs	r2, #2
 8003104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	3304      	adds	r3, #4
 8003110:	4619      	mov	r1, r3
 8003112:	4610      	mov	r0, r2
 8003114:	f000 faa2 	bl	800365c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
	...

08003174 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003174:	b480      	push	{r7}
 8003176:	b085      	sub	sp, #20
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003182:	b2db      	uxtb	r3, r3
 8003184:	2b01      	cmp	r3, #1
 8003186:	d001      	beq.n	800318c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e03a      	b.n	8003202 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2202      	movs	r2, #2
 8003190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68da      	ldr	r2, [r3, #12]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f042 0201 	orr.w	r2, r2, #1
 80031a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a18      	ldr	r2, [pc, #96]	; (800320c <HAL_TIM_Base_Start_IT+0x98>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d00e      	beq.n	80031cc <HAL_TIM_Base_Start_IT+0x58>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031b6:	d009      	beq.n	80031cc <HAL_TIM_Base_Start_IT+0x58>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a14      	ldr	r2, [pc, #80]	; (8003210 <HAL_TIM_Base_Start_IT+0x9c>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d004      	beq.n	80031cc <HAL_TIM_Base_Start_IT+0x58>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a13      	ldr	r2, [pc, #76]	; (8003214 <HAL_TIM_Base_Start_IT+0xa0>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d111      	bne.n	80031f0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f003 0307 	and.w	r3, r3, #7
 80031d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2b06      	cmp	r3, #6
 80031dc:	d010      	beq.n	8003200 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f042 0201 	orr.w	r2, r2, #1
 80031ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031ee:	e007      	b.n	8003200 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f042 0201 	orr.w	r2, r2, #1
 80031fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3714      	adds	r7, #20
 8003206:	46bd      	mov	sp, r7
 8003208:	bc80      	pop	{r7}
 800320a:	4770      	bx	lr
 800320c:	40012c00 	.word	0x40012c00
 8003210:	40000400 	.word	0x40000400
 8003214:	40000800 	.word	0x40000800

08003218 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68da      	ldr	r2, [r3, #12]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f022 0201 	bic.w	r2, r2, #1
 800322e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	6a1a      	ldr	r2, [r3, #32]
 8003236:	f241 1311 	movw	r3, #4369	; 0x1111
 800323a:	4013      	ands	r3, r2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d10f      	bne.n	8003260 <HAL_TIM_Base_Stop_IT+0x48>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	6a1a      	ldr	r2, [r3, #32]
 8003246:	f240 4344 	movw	r3, #1092	; 0x444
 800324a:	4013      	ands	r3, r2
 800324c:	2b00      	cmp	r3, #0
 800324e:	d107      	bne.n	8003260 <HAL_TIM_Base_Stop_IT+0x48>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f022 0201 	bic.w	r2, r2, #1
 800325e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	370c      	adds	r7, #12
 800326e:	46bd      	mov	sp, r7
 8003270:	bc80      	pop	{r7}
 8003272:	4770      	bx	lr

08003274 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	2b02      	cmp	r3, #2
 8003288:	d122      	bne.n	80032d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	f003 0302 	and.w	r3, r3, #2
 8003294:	2b02      	cmp	r3, #2
 8003296:	d11b      	bne.n	80032d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f06f 0202 	mvn.w	r2, #2
 80032a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2201      	movs	r2, #1
 80032a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	699b      	ldr	r3, [r3, #24]
 80032ae:	f003 0303 	and.w	r3, r3, #3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d003      	beq.n	80032be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 f9b4 	bl	8003624 <HAL_TIM_IC_CaptureCallback>
 80032bc:	e005      	b.n	80032ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 f9a7 	bl	8003612 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f000 f9b6 	bl	8003636 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	f003 0304 	and.w	r3, r3, #4
 80032da:	2b04      	cmp	r3, #4
 80032dc:	d122      	bne.n	8003324 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	f003 0304 	and.w	r3, r3, #4
 80032e8:	2b04      	cmp	r3, #4
 80032ea:	d11b      	bne.n	8003324 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f06f 0204 	mvn.w	r2, #4
 80032f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2202      	movs	r2, #2
 80032fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	699b      	ldr	r3, [r3, #24]
 8003302:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003306:	2b00      	cmp	r3, #0
 8003308:	d003      	beq.n	8003312 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f000 f98a 	bl	8003624 <HAL_TIM_IC_CaptureCallback>
 8003310:	e005      	b.n	800331e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 f97d 	bl	8003612 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f000 f98c 	bl	8003636 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	f003 0308 	and.w	r3, r3, #8
 800332e:	2b08      	cmp	r3, #8
 8003330:	d122      	bne.n	8003378 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	f003 0308 	and.w	r3, r3, #8
 800333c:	2b08      	cmp	r3, #8
 800333e:	d11b      	bne.n	8003378 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f06f 0208 	mvn.w	r2, #8
 8003348:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2204      	movs	r2, #4
 800334e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	69db      	ldr	r3, [r3, #28]
 8003356:	f003 0303 	and.w	r3, r3, #3
 800335a:	2b00      	cmp	r3, #0
 800335c:	d003      	beq.n	8003366 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f000 f960 	bl	8003624 <HAL_TIM_IC_CaptureCallback>
 8003364:	e005      	b.n	8003372 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 f953 	bl	8003612 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f000 f962 	bl	8003636 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	f003 0310 	and.w	r3, r3, #16
 8003382:	2b10      	cmp	r3, #16
 8003384:	d122      	bne.n	80033cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	f003 0310 	and.w	r3, r3, #16
 8003390:	2b10      	cmp	r3, #16
 8003392:	d11b      	bne.n	80033cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f06f 0210 	mvn.w	r2, #16
 800339c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2208      	movs	r2, #8
 80033a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	69db      	ldr	r3, [r3, #28]
 80033aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d003      	beq.n	80033ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f000 f936 	bl	8003624 <HAL_TIM_IC_CaptureCallback>
 80033b8:	e005      	b.n	80033c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 f929 	bl	8003612 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f000 f938 	bl	8003636 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	f003 0301 	and.w	r3, r3, #1
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d10e      	bne.n	80033f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	f003 0301 	and.w	r3, r3, #1
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d107      	bne.n	80033f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f06f 0201 	mvn.w	r2, #1
 80033f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f7fd feac 	bl	8001150 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003402:	2b80      	cmp	r3, #128	; 0x80
 8003404:	d10e      	bne.n	8003424 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003410:	2b80      	cmp	r3, #128	; 0x80
 8003412:	d107      	bne.n	8003424 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800341c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 fa7b 	bl	800391a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800342e:	2b40      	cmp	r3, #64	; 0x40
 8003430:	d10e      	bne.n	8003450 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800343c:	2b40      	cmp	r3, #64	; 0x40
 800343e:	d107      	bne.n	8003450 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 f8fc 	bl	8003648 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	f003 0320 	and.w	r3, r3, #32
 800345a:	2b20      	cmp	r3, #32
 800345c:	d10e      	bne.n	800347c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	f003 0320 	and.w	r3, r3, #32
 8003468:	2b20      	cmp	r3, #32
 800346a:	d107      	bne.n	800347c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f06f 0220 	mvn.w	r2, #32
 8003474:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 fa46 	bl	8003908 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800347c:	bf00      	nop
 800347e:	3708      	adds	r7, #8
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800348e:	2300      	movs	r3, #0
 8003490:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003498:	2b01      	cmp	r3, #1
 800349a:	d101      	bne.n	80034a0 <HAL_TIM_ConfigClockSource+0x1c>
 800349c:	2302      	movs	r3, #2
 800349e:	e0b4      	b.n	800360a <HAL_TIM_ConfigClockSource+0x186>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2202      	movs	r2, #2
 80034ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80034be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	68ba      	ldr	r2, [r7, #8]
 80034ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034d8:	d03e      	beq.n	8003558 <HAL_TIM_ConfigClockSource+0xd4>
 80034da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034de:	f200 8087 	bhi.w	80035f0 <HAL_TIM_ConfigClockSource+0x16c>
 80034e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034e6:	f000 8086 	beq.w	80035f6 <HAL_TIM_ConfigClockSource+0x172>
 80034ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034ee:	d87f      	bhi.n	80035f0 <HAL_TIM_ConfigClockSource+0x16c>
 80034f0:	2b70      	cmp	r3, #112	; 0x70
 80034f2:	d01a      	beq.n	800352a <HAL_TIM_ConfigClockSource+0xa6>
 80034f4:	2b70      	cmp	r3, #112	; 0x70
 80034f6:	d87b      	bhi.n	80035f0 <HAL_TIM_ConfigClockSource+0x16c>
 80034f8:	2b60      	cmp	r3, #96	; 0x60
 80034fa:	d050      	beq.n	800359e <HAL_TIM_ConfigClockSource+0x11a>
 80034fc:	2b60      	cmp	r3, #96	; 0x60
 80034fe:	d877      	bhi.n	80035f0 <HAL_TIM_ConfigClockSource+0x16c>
 8003500:	2b50      	cmp	r3, #80	; 0x50
 8003502:	d03c      	beq.n	800357e <HAL_TIM_ConfigClockSource+0xfa>
 8003504:	2b50      	cmp	r3, #80	; 0x50
 8003506:	d873      	bhi.n	80035f0 <HAL_TIM_ConfigClockSource+0x16c>
 8003508:	2b40      	cmp	r3, #64	; 0x40
 800350a:	d058      	beq.n	80035be <HAL_TIM_ConfigClockSource+0x13a>
 800350c:	2b40      	cmp	r3, #64	; 0x40
 800350e:	d86f      	bhi.n	80035f0 <HAL_TIM_ConfigClockSource+0x16c>
 8003510:	2b30      	cmp	r3, #48	; 0x30
 8003512:	d064      	beq.n	80035de <HAL_TIM_ConfigClockSource+0x15a>
 8003514:	2b30      	cmp	r3, #48	; 0x30
 8003516:	d86b      	bhi.n	80035f0 <HAL_TIM_ConfigClockSource+0x16c>
 8003518:	2b20      	cmp	r3, #32
 800351a:	d060      	beq.n	80035de <HAL_TIM_ConfigClockSource+0x15a>
 800351c:	2b20      	cmp	r3, #32
 800351e:	d867      	bhi.n	80035f0 <HAL_TIM_ConfigClockSource+0x16c>
 8003520:	2b00      	cmp	r3, #0
 8003522:	d05c      	beq.n	80035de <HAL_TIM_ConfigClockSource+0x15a>
 8003524:	2b10      	cmp	r3, #16
 8003526:	d05a      	beq.n	80035de <HAL_TIM_ConfigClockSource+0x15a>
 8003528:	e062      	b.n	80035f0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800353a:	f000 f968 	bl	800380e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800354c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	68ba      	ldr	r2, [r7, #8]
 8003554:	609a      	str	r2, [r3, #8]
      break;
 8003556:	e04f      	b.n	80035f8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003568:	f000 f951 	bl	800380e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	689a      	ldr	r2, [r3, #8]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800357a:	609a      	str	r2, [r3, #8]
      break;
 800357c:	e03c      	b.n	80035f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800358a:	461a      	mov	r2, r3
 800358c:	f000 f8c8 	bl	8003720 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2150      	movs	r1, #80	; 0x50
 8003596:	4618      	mov	r0, r3
 8003598:	f000 f91f 	bl	80037da <TIM_ITRx_SetConfig>
      break;
 800359c:	e02c      	b.n	80035f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80035aa:	461a      	mov	r2, r3
 80035ac:	f000 f8e6 	bl	800377c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2160      	movs	r1, #96	; 0x60
 80035b6:	4618      	mov	r0, r3
 80035b8:	f000 f90f 	bl	80037da <TIM_ITRx_SetConfig>
      break;
 80035bc:	e01c      	b.n	80035f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035ca:	461a      	mov	r2, r3
 80035cc:	f000 f8a8 	bl	8003720 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2140      	movs	r1, #64	; 0x40
 80035d6:	4618      	mov	r0, r3
 80035d8:	f000 f8ff 	bl	80037da <TIM_ITRx_SetConfig>
      break;
 80035dc:	e00c      	b.n	80035f8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4619      	mov	r1, r3
 80035e8:	4610      	mov	r0, r2
 80035ea:	f000 f8f6 	bl	80037da <TIM_ITRx_SetConfig>
      break;
 80035ee:	e003      	b.n	80035f8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	73fb      	strb	r3, [r7, #15]
      break;
 80035f4:	e000      	b.n	80035f8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80035f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003608:	7bfb      	ldrb	r3, [r7, #15]
}
 800360a:	4618      	mov	r0, r3
 800360c:	3710      	adds	r7, #16
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}

08003612 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003612:	b480      	push	{r7}
 8003614:	b083      	sub	sp, #12
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800361a:	bf00      	nop
 800361c:	370c      	adds	r7, #12
 800361e:	46bd      	mov	sp, r7
 8003620:	bc80      	pop	{r7}
 8003622:	4770      	bx	lr

08003624 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800362c:	bf00      	nop
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	bc80      	pop	{r7}
 8003634:	4770      	bx	lr

08003636 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003636:	b480      	push	{r7}
 8003638:	b083      	sub	sp, #12
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800363e:	bf00      	nop
 8003640:	370c      	adds	r7, #12
 8003642:	46bd      	mov	sp, r7
 8003644:	bc80      	pop	{r7}
 8003646:	4770      	bx	lr

08003648 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003650:	bf00      	nop
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	bc80      	pop	{r7}
 8003658:	4770      	bx	lr
	...

0800365c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800365c:	b480      	push	{r7}
 800365e:	b085      	sub	sp, #20
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	4a29      	ldr	r2, [pc, #164]	; (8003714 <TIM_Base_SetConfig+0xb8>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d00b      	beq.n	800368c <TIM_Base_SetConfig+0x30>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800367a:	d007      	beq.n	800368c <TIM_Base_SetConfig+0x30>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4a26      	ldr	r2, [pc, #152]	; (8003718 <TIM_Base_SetConfig+0xbc>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d003      	beq.n	800368c <TIM_Base_SetConfig+0x30>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	4a25      	ldr	r2, [pc, #148]	; (800371c <TIM_Base_SetConfig+0xc0>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d108      	bne.n	800369e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003692:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	68fa      	ldr	r2, [r7, #12]
 800369a:	4313      	orrs	r3, r2
 800369c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a1c      	ldr	r2, [pc, #112]	; (8003714 <TIM_Base_SetConfig+0xb8>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d00b      	beq.n	80036be <TIM_Base_SetConfig+0x62>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036ac:	d007      	beq.n	80036be <TIM_Base_SetConfig+0x62>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a19      	ldr	r2, [pc, #100]	; (8003718 <TIM_Base_SetConfig+0xbc>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d003      	beq.n	80036be <TIM_Base_SetConfig+0x62>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a18      	ldr	r2, [pc, #96]	; (800371c <TIM_Base_SetConfig+0xc0>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d108      	bne.n	80036d0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	68fa      	ldr	r2, [r7, #12]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	4313      	orrs	r3, r2
 80036dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	68fa      	ldr	r2, [r7, #12]
 80036e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	689a      	ldr	r2, [r3, #8]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	4a07      	ldr	r2, [pc, #28]	; (8003714 <TIM_Base_SetConfig+0xb8>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d103      	bne.n	8003704 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	691a      	ldr	r2, [r3, #16]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	615a      	str	r2, [r3, #20]
}
 800370a:	bf00      	nop
 800370c:	3714      	adds	r7, #20
 800370e:	46bd      	mov	sp, r7
 8003710:	bc80      	pop	{r7}
 8003712:	4770      	bx	lr
 8003714:	40012c00 	.word	0x40012c00
 8003718:	40000400 	.word	0x40000400
 800371c:	40000800 	.word	0x40000800

08003720 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003720:	b480      	push	{r7}
 8003722:	b087      	sub	sp, #28
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6a1b      	ldr	r3, [r3, #32]
 8003730:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6a1b      	ldr	r3, [r3, #32]
 8003736:	f023 0201 	bic.w	r2, r3, #1
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800374a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	011b      	lsls	r3, r3, #4
 8003750:	693a      	ldr	r2, [r7, #16]
 8003752:	4313      	orrs	r3, r2
 8003754:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	f023 030a 	bic.w	r3, r3, #10
 800375c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800375e:	697a      	ldr	r2, [r7, #20]
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	4313      	orrs	r3, r2
 8003764:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	693a      	ldr	r2, [r7, #16]
 800376a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	697a      	ldr	r2, [r7, #20]
 8003770:	621a      	str	r2, [r3, #32]
}
 8003772:	bf00      	nop
 8003774:	371c      	adds	r7, #28
 8003776:	46bd      	mov	sp, r7
 8003778:	bc80      	pop	{r7}
 800377a:	4770      	bx	lr

0800377c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800377c:	b480      	push	{r7}
 800377e:	b087      	sub	sp, #28
 8003780:	af00      	add	r7, sp, #0
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	60b9      	str	r1, [r7, #8]
 8003786:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6a1b      	ldr	r3, [r3, #32]
 800378c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6a1b      	ldr	r3, [r3, #32]
 8003792:	f023 0210 	bic.w	r2, r3, #16
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80037a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	031b      	lsls	r3, r3, #12
 80037ac:	693a      	ldr	r2, [r7, #16]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80037b8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	011b      	lsls	r3, r3, #4
 80037be:	697a      	ldr	r2, [r7, #20]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	693a      	ldr	r2, [r7, #16]
 80037c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	697a      	ldr	r2, [r7, #20]
 80037ce:	621a      	str	r2, [r3, #32]
}
 80037d0:	bf00      	nop
 80037d2:	371c      	adds	r7, #28
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bc80      	pop	{r7}
 80037d8:	4770      	bx	lr

080037da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80037da:	b480      	push	{r7}
 80037dc:	b085      	sub	sp, #20
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
 80037e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80037f2:	683a      	ldr	r2, [r7, #0]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	f043 0307 	orr.w	r3, r3, #7
 80037fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	68fa      	ldr	r2, [r7, #12]
 8003802:	609a      	str	r2, [r3, #8]
}
 8003804:	bf00      	nop
 8003806:	3714      	adds	r7, #20
 8003808:	46bd      	mov	sp, r7
 800380a:	bc80      	pop	{r7}
 800380c:	4770      	bx	lr

0800380e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800380e:	b480      	push	{r7}
 8003810:	b087      	sub	sp, #28
 8003812:	af00      	add	r7, sp, #0
 8003814:	60f8      	str	r0, [r7, #12]
 8003816:	60b9      	str	r1, [r7, #8]
 8003818:	607a      	str	r2, [r7, #4]
 800381a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003828:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	021a      	lsls	r2, r3, #8
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	431a      	orrs	r2, r3
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	4313      	orrs	r3, r2
 8003836:	697a      	ldr	r2, [r7, #20]
 8003838:	4313      	orrs	r3, r2
 800383a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	697a      	ldr	r2, [r7, #20]
 8003840:	609a      	str	r2, [r3, #8]
}
 8003842:	bf00      	nop
 8003844:	371c      	adds	r7, #28
 8003846:	46bd      	mov	sp, r7
 8003848:	bc80      	pop	{r7}
 800384a:	4770      	bx	lr

0800384c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800384c:	b480      	push	{r7}
 800384e:	b085      	sub	sp, #20
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800385c:	2b01      	cmp	r3, #1
 800385e:	d101      	bne.n	8003864 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003860:	2302      	movs	r3, #2
 8003862:	e046      	b.n	80038f2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2202      	movs	r2, #2
 8003870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800388a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	68fa      	ldr	r2, [r7, #12]
 8003892:	4313      	orrs	r3, r2
 8003894:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a16      	ldr	r2, [pc, #88]	; (80038fc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d00e      	beq.n	80038c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038b0:	d009      	beq.n	80038c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a12      	ldr	r2, [pc, #72]	; (8003900 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d004      	beq.n	80038c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a10      	ldr	r2, [pc, #64]	; (8003904 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d10c      	bne.n	80038e0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	68ba      	ldr	r2, [r7, #8]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68ba      	ldr	r2, [r7, #8]
 80038de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3714      	adds	r7, #20
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bc80      	pop	{r7}
 80038fa:	4770      	bx	lr
 80038fc:	40012c00 	.word	0x40012c00
 8003900:	40000400 	.word	0x40000400
 8003904:	40000800 	.word	0x40000800

08003908 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	bc80      	pop	{r7}
 8003918:	4770      	bx	lr

0800391a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800391a:	b480      	push	{r7}
 800391c:	b083      	sub	sp, #12
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003922:	bf00      	nop
 8003924:	370c      	adds	r7, #12
 8003926:	46bd      	mov	sp, r7
 8003928:	bc80      	pop	{r7}
 800392a:	4770      	bx	lr

0800392c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d101      	bne.n	800393e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e042      	b.n	80039c4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003944:	b2db      	uxtb	r3, r3
 8003946:	2b00      	cmp	r3, #0
 8003948:	d106      	bne.n	8003958 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f7fd fce2 	bl	800131c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2224      	movs	r2, #36	; 0x24
 800395c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68da      	ldr	r2, [r3, #12]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800396e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 fc7f 	bl	8004274 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	691a      	ldr	r2, [r3, #16]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003984:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	695a      	ldr	r2, [r3, #20]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003994:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	68da      	ldr	r2, [r3, #12]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2220      	movs	r2, #32
 80039b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2220      	movs	r2, #32
 80039b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80039c2:	2300      	movs	r3, #0
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3708      	adds	r7, #8
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}

080039cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b0ba      	sub	sp, #232	; 0xe8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	695b      	ldr	r3, [r3, #20]
 80039ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80039f2:	2300      	movs	r3, #0
 80039f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80039f8:	2300      	movs	r3, #0
 80039fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80039fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a02:	f003 030f 	and.w	r3, r3, #15
 8003a06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003a0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d10f      	bne.n	8003a32 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a16:	f003 0320 	and.w	r3, r3, #32
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d009      	beq.n	8003a32 <HAL_UART_IRQHandler+0x66>
 8003a1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a22:	f003 0320 	and.w	r3, r3, #32
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d003      	beq.n	8003a32 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 fb63 	bl	80040f6 <UART_Receive_IT>
      return;
 8003a30:	e25b      	b.n	8003eea <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003a32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	f000 80de 	beq.w	8003bf8 <HAL_UART_IRQHandler+0x22c>
 8003a3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a40:	f003 0301 	and.w	r3, r3, #1
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d106      	bne.n	8003a56 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a4c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	f000 80d1 	beq.w	8003bf8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d00b      	beq.n	8003a7a <HAL_UART_IRQHandler+0xae>
 8003a62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d005      	beq.n	8003a7a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a72:	f043 0201 	orr.w	r2, r3, #1
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a7e:	f003 0304 	and.w	r3, r3, #4
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00b      	beq.n	8003a9e <HAL_UART_IRQHandler+0xd2>
 8003a86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a8a:	f003 0301 	and.w	r3, r3, #1
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d005      	beq.n	8003a9e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a96:	f043 0202 	orr.w	r2, r3, #2
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00b      	beq.n	8003ac2 <HAL_UART_IRQHandler+0xf6>
 8003aaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d005      	beq.n	8003ac2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aba:	f043 0204 	orr.w	r2, r3, #4
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ac6:	f003 0308 	and.w	r3, r3, #8
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d011      	beq.n	8003af2 <HAL_UART_IRQHandler+0x126>
 8003ace:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ad2:	f003 0320 	and.w	r3, r3, #32
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d105      	bne.n	8003ae6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003ada:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ade:	f003 0301 	and.w	r3, r3, #1
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d005      	beq.n	8003af2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aea:	f043 0208 	orr.w	r2, r3, #8
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	f000 81f2 	beq.w	8003ee0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003afc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b00:	f003 0320 	and.w	r3, r3, #32
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d008      	beq.n	8003b1a <HAL_UART_IRQHandler+0x14e>
 8003b08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b0c:	f003 0320 	and.w	r3, r3, #32
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d002      	beq.n	8003b1a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f000 faee 	bl	80040f6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	695b      	ldr	r3, [r3, #20]
 8003b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	bf14      	ite	ne
 8003b28:	2301      	movne	r3, #1
 8003b2a:	2300      	moveq	r3, #0
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b36:	f003 0308 	and.w	r3, r3, #8
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d103      	bne.n	8003b46 <HAL_UART_IRQHandler+0x17a>
 8003b3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d04f      	beq.n	8003be6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 f9f8 	bl	8003f3c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d041      	beq.n	8003bde <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	3314      	adds	r3, #20
 8003b60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b68:	e853 3f00 	ldrex	r3, [r3]
 8003b6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003b70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003b74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	3314      	adds	r3, #20
 8003b82:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003b86:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003b8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b8e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003b92:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003b96:	e841 2300 	strex	r3, r2, [r1]
 8003b9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003b9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d1d9      	bne.n	8003b5a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d013      	beq.n	8003bd6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bb2:	4a7e      	ldr	r2, [pc, #504]	; (8003dac <HAL_UART_IRQHandler+0x3e0>)
 8003bb4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f7fe fc66 	bl	800248c <HAL_DMA_Abort_IT>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d016      	beq.n	8003bf4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003bd0:	4610      	mov	r0, r2
 8003bd2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bd4:	e00e      	b.n	8003bf4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 f99c 	bl	8003f14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bdc:	e00a      	b.n	8003bf4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 f998 	bl	8003f14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003be4:	e006      	b.n	8003bf4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 f994 	bl	8003f14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003bf2:	e175      	b.n	8003ee0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bf4:	bf00      	nop
    return;
 8003bf6:	e173      	b.n	8003ee0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	f040 814f 	bne.w	8003ea0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003c02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c06:	f003 0310 	and.w	r3, r3, #16
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	f000 8148 	beq.w	8003ea0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003c10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c14:	f003 0310 	and.w	r3, r3, #16
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	f000 8141 	beq.w	8003ea0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c1e:	2300      	movs	r3, #0
 8003c20:	60bb      	str	r3, [r7, #8]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	60bb      	str	r3, [r7, #8]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	60bb      	str	r3, [r7, #8]
 8003c32:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	f000 80b6 	beq.w	8003db0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003c50:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	f000 8145 	beq.w	8003ee4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003c5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c62:	429a      	cmp	r2, r3
 8003c64:	f080 813e 	bcs.w	8003ee4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c6e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	2b20      	cmp	r3, #32
 8003c78:	f000 8088 	beq.w	8003d8c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	330c      	adds	r3, #12
 8003c82:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c86:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c8a:	e853 3f00 	ldrex	r3, [r3]
 8003c8e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003c92:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c9a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	330c      	adds	r3, #12
 8003ca4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003ca8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003cac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003cb4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003cb8:	e841 2300 	strex	r3, r2, [r1]
 8003cbc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003cc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d1d9      	bne.n	8003c7c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	3314      	adds	r3, #20
 8003cce:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cd2:	e853 3f00 	ldrex	r3, [r3]
 8003cd6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003cd8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003cda:	f023 0301 	bic.w	r3, r3, #1
 8003cde:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	3314      	adds	r3, #20
 8003ce8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003cec:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003cf0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003cf4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003cf8:	e841 2300 	strex	r3, r2, [r1]
 8003cfc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003cfe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d1e1      	bne.n	8003cc8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	3314      	adds	r3, #20
 8003d0a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d0e:	e853 3f00 	ldrex	r3, [r3]
 8003d12:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003d14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	3314      	adds	r3, #20
 8003d24:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003d28:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003d2a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d2c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003d2e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003d30:	e841 2300 	strex	r3, r2, [r1]
 8003d34:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003d36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d1e3      	bne.n	8003d04 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2220      	movs	r2, #32
 8003d40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	330c      	adds	r3, #12
 8003d50:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d54:	e853 3f00 	ldrex	r3, [r3]
 8003d58:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003d5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d5c:	f023 0310 	bic.w	r3, r3, #16
 8003d60:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	330c      	adds	r3, #12
 8003d6a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003d6e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003d70:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d72:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003d74:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d76:	e841 2300 	strex	r3, r2, [r1]
 8003d7a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003d7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1e3      	bne.n	8003d4a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d86:	4618      	mov	r0, r3
 8003d88:	f7fe fb45 	bl	8002416 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2202      	movs	r2, #2
 8003d90:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	4619      	mov	r1, r3
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f000 f8bf 	bl	8003f26 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003da8:	e09c      	b.n	8003ee4 <HAL_UART_IRQHandler+0x518>
 8003daa:	bf00      	nop
 8003dac:	08004001 	.word	0x08004001
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	f000 808e 	beq.w	8003ee8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003dcc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	f000 8089 	beq.w	8003ee8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	330c      	adds	r3, #12
 8003ddc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de0:	e853 3f00 	ldrex	r3, [r3]
 8003de4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003de8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003dec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	330c      	adds	r3, #12
 8003df6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003dfa:	647a      	str	r2, [r7, #68]	; 0x44
 8003dfc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dfe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e00:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e02:	e841 2300 	strex	r3, r2, [r1]
 8003e06:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1e3      	bne.n	8003dd6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	3314      	adds	r3, #20
 8003e14:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e18:	e853 3f00 	ldrex	r3, [r3]
 8003e1c:	623b      	str	r3, [r7, #32]
   return(result);
 8003e1e:	6a3b      	ldr	r3, [r7, #32]
 8003e20:	f023 0301 	bic.w	r3, r3, #1
 8003e24:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	3314      	adds	r3, #20
 8003e2e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003e32:	633a      	str	r2, [r7, #48]	; 0x30
 8003e34:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e3a:	e841 2300 	strex	r3, r2, [r1]
 8003e3e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d1e3      	bne.n	8003e0e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2220      	movs	r2, #32
 8003e4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	330c      	adds	r3, #12
 8003e5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	e853 3f00 	ldrex	r3, [r3]
 8003e62:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f023 0310 	bic.w	r3, r3, #16
 8003e6a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	330c      	adds	r3, #12
 8003e74:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003e78:	61fa      	str	r2, [r7, #28]
 8003e7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e7c:	69b9      	ldr	r1, [r7, #24]
 8003e7e:	69fa      	ldr	r2, [r7, #28]
 8003e80:	e841 2300 	strex	r3, r2, [r1]
 8003e84:	617b      	str	r3, [r7, #20]
   return(result);
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d1e3      	bne.n	8003e54 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2202      	movs	r2, #2
 8003e90:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e92:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e96:	4619      	mov	r1, r3
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f000 f844 	bl	8003f26 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e9e:	e023      	b.n	8003ee8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003ea0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ea4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d009      	beq.n	8003ec0 <HAL_UART_IRQHandler+0x4f4>
 8003eac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003eb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d003      	beq.n	8003ec0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f000 f8b5 	bl	8004028 <UART_Transmit_IT>
    return;
 8003ebe:	e014      	b.n	8003eea <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ec0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d00e      	beq.n	8003eea <HAL_UART_IRQHandler+0x51e>
 8003ecc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d008      	beq.n	8003eea <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f000 f8f4 	bl	80040c6 <UART_EndTransmit_IT>
    return;
 8003ede:	e004      	b.n	8003eea <HAL_UART_IRQHandler+0x51e>
    return;
 8003ee0:	bf00      	nop
 8003ee2:	e002      	b.n	8003eea <HAL_UART_IRQHandler+0x51e>
      return;
 8003ee4:	bf00      	nop
 8003ee6:	e000      	b.n	8003eea <HAL_UART_IRQHandler+0x51e>
      return;
 8003ee8:	bf00      	nop
  }
}
 8003eea:	37e8      	adds	r7, #232	; 0xe8
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003ef8:	bf00      	nop
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bc80      	pop	{r7}
 8003f00:	4770      	bx	lr

08003f02 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f02:	b480      	push	{r7}
 8003f04:	b083      	sub	sp, #12
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003f0a:	bf00      	nop
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bc80      	pop	{r7}
 8003f12:	4770      	bx	lr

08003f14 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003f1c:	bf00      	nop
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bc80      	pop	{r7}
 8003f24:	4770      	bx	lr

08003f26 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f26:	b480      	push	{r7}
 8003f28:	b083      	sub	sp, #12
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	6078      	str	r0, [r7, #4]
 8003f2e:	460b      	mov	r3, r1
 8003f30:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f32:	bf00      	nop
 8003f34:	370c      	adds	r7, #12
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bc80      	pop	{r7}
 8003f3a:	4770      	bx	lr

08003f3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b095      	sub	sp, #84	; 0x54
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	330c      	adds	r3, #12
 8003f4a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f4e:	e853 3f00 	ldrex	r3, [r3]
 8003f52:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f56:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	330c      	adds	r3, #12
 8003f62:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f64:	643a      	str	r2, [r7, #64]	; 0x40
 8003f66:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f68:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003f6a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f6c:	e841 2300 	strex	r3, r2, [r1]
 8003f70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d1e5      	bne.n	8003f44 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	3314      	adds	r3, #20
 8003f7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f80:	6a3b      	ldr	r3, [r7, #32]
 8003f82:	e853 3f00 	ldrex	r3, [r3]
 8003f86:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	f023 0301 	bic.w	r3, r3, #1
 8003f8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	3314      	adds	r3, #20
 8003f96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f98:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fa0:	e841 2300 	strex	r3, r2, [r1]
 8003fa4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d1e5      	bne.n	8003f78 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d119      	bne.n	8003fe8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	330c      	adds	r3, #12
 8003fba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	e853 3f00 	ldrex	r3, [r3]
 8003fc2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	f023 0310 	bic.w	r3, r3, #16
 8003fca:	647b      	str	r3, [r7, #68]	; 0x44
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	330c      	adds	r3, #12
 8003fd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003fd4:	61ba      	str	r2, [r7, #24]
 8003fd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd8:	6979      	ldr	r1, [r7, #20]
 8003fda:	69ba      	ldr	r2, [r7, #24]
 8003fdc:	e841 2300 	strex	r3, r2, [r1]
 8003fe0:	613b      	str	r3, [r7, #16]
   return(result);
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d1e5      	bne.n	8003fb4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2220      	movs	r2, #32
 8003fec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003ff6:	bf00      	nop
 8003ff8:	3754      	adds	r7, #84	; 0x54
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bc80      	pop	{r7}
 8003ffe:	4770      	bx	lr

08004000 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2200      	movs	r2, #0
 8004012:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2200      	movs	r2, #0
 8004018:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800401a:	68f8      	ldr	r0, [r7, #12]
 800401c:	f7ff ff7a 	bl	8003f14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004020:	bf00      	nop
 8004022:	3710      	adds	r7, #16
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004028:	b480      	push	{r7}
 800402a:	b085      	sub	sp, #20
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004036:	b2db      	uxtb	r3, r3
 8004038:	2b21      	cmp	r3, #33	; 0x21
 800403a:	d13e      	bne.n	80040ba <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004044:	d114      	bne.n	8004070 <UART_Transmit_IT+0x48>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d110      	bne.n	8004070 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a1b      	ldr	r3, [r3, #32]
 8004052:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	881b      	ldrh	r3, [r3, #0]
 8004058:	461a      	mov	r2, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004062:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a1b      	ldr	r3, [r3, #32]
 8004068:	1c9a      	adds	r2, r3, #2
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	621a      	str	r2, [r3, #32]
 800406e:	e008      	b.n	8004082 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a1b      	ldr	r3, [r3, #32]
 8004074:	1c59      	adds	r1, r3, #1
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	6211      	str	r1, [r2, #32]
 800407a:	781a      	ldrb	r2, [r3, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004086:	b29b      	uxth	r3, r3
 8004088:	3b01      	subs	r3, #1
 800408a:	b29b      	uxth	r3, r3
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	4619      	mov	r1, r3
 8004090:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004092:	2b00      	cmp	r3, #0
 8004094:	d10f      	bne.n	80040b6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68da      	ldr	r2, [r3, #12]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040a4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	68da      	ldr	r2, [r3, #12]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040b4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80040b6:	2300      	movs	r3, #0
 80040b8:	e000      	b.n	80040bc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80040ba:	2302      	movs	r3, #2
  }
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3714      	adds	r7, #20
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bc80      	pop	{r7}
 80040c4:	4770      	bx	lr

080040c6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80040c6:	b580      	push	{r7, lr}
 80040c8:	b082      	sub	sp, #8
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	68da      	ldr	r2, [r3, #12]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040dc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2220      	movs	r2, #32
 80040e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f7ff ff02 	bl	8003ef0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3708      	adds	r7, #8
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}

080040f6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80040f6:	b580      	push	{r7, lr}
 80040f8:	b08c      	sub	sp, #48	; 0x30
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004104:	b2db      	uxtb	r3, r3
 8004106:	2b22      	cmp	r3, #34	; 0x22
 8004108:	f040 80ae 	bne.w	8004268 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004114:	d117      	bne.n	8004146 <UART_Receive_IT+0x50>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d113      	bne.n	8004146 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800411e:	2300      	movs	r3, #0
 8004120:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004126:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	b29b      	uxth	r3, r3
 8004130:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004134:	b29a      	uxth	r2, r3
 8004136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004138:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800413e:	1c9a      	adds	r2, r3, #2
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	629a      	str	r2, [r3, #40]	; 0x28
 8004144:	e026      	b.n	8004194 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800414a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800414c:	2300      	movs	r3, #0
 800414e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004158:	d007      	beq.n	800416a <UART_Receive_IT+0x74>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d10a      	bne.n	8004178 <UART_Receive_IT+0x82>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	691b      	ldr	r3, [r3, #16]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d106      	bne.n	8004178 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	b2da      	uxtb	r2, r3
 8004172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004174:	701a      	strb	r2, [r3, #0]
 8004176:	e008      	b.n	800418a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	b2db      	uxtb	r3, r3
 8004180:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004184:	b2da      	uxtb	r2, r3
 8004186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004188:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800418e:	1c5a      	adds	r2, r3, #1
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004198:	b29b      	uxth	r3, r3
 800419a:	3b01      	subs	r3, #1
 800419c:	b29b      	uxth	r3, r3
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	4619      	mov	r1, r3
 80041a2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d15d      	bne.n	8004264 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68da      	ldr	r2, [r3, #12]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f022 0220 	bic.w	r2, r2, #32
 80041b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68da      	ldr	r2, [r3, #12]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	695a      	ldr	r2, [r3, #20]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f022 0201 	bic.w	r2, r2, #1
 80041d6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2220      	movs	r2, #32
 80041dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d135      	bne.n	800425a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	330c      	adds	r3, #12
 80041fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	e853 3f00 	ldrex	r3, [r3]
 8004202:	613b      	str	r3, [r7, #16]
   return(result);
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	f023 0310 	bic.w	r3, r3, #16
 800420a:	627b      	str	r3, [r7, #36]	; 0x24
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	330c      	adds	r3, #12
 8004212:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004214:	623a      	str	r2, [r7, #32]
 8004216:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004218:	69f9      	ldr	r1, [r7, #28]
 800421a:	6a3a      	ldr	r2, [r7, #32]
 800421c:	e841 2300 	strex	r3, r2, [r1]
 8004220:	61bb      	str	r3, [r7, #24]
   return(result);
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d1e5      	bne.n	80041f4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0310 	and.w	r3, r3, #16
 8004232:	2b10      	cmp	r3, #16
 8004234:	d10a      	bne.n	800424c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004236:	2300      	movs	r3, #0
 8004238:	60fb      	str	r3, [r7, #12]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	60fb      	str	r3, [r7, #12]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	60fb      	str	r3, [r7, #12]
 800424a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004250:	4619      	mov	r1, r3
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f7ff fe67 	bl	8003f26 <HAL_UARTEx_RxEventCallback>
 8004258:	e002      	b.n	8004260 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f7ff fe51 	bl	8003f02 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004260:	2300      	movs	r3, #0
 8004262:	e002      	b.n	800426a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004264:	2300      	movs	r3, #0
 8004266:	e000      	b.n	800426a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004268:	2302      	movs	r3, #2
  }
}
 800426a:	4618      	mov	r0, r3
 800426c:	3730      	adds	r7, #48	; 0x30
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
	...

08004274 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	68da      	ldr	r2, [r3, #12]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	430a      	orrs	r2, r1
 8004290:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	689a      	ldr	r2, [r3, #8]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	431a      	orrs	r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	695b      	ldr	r3, [r3, #20]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80042ae:	f023 030c 	bic.w	r3, r3, #12
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	6812      	ldr	r2, [r2, #0]
 80042b6:	68b9      	ldr	r1, [r7, #8]
 80042b8:	430b      	orrs	r3, r1
 80042ba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	699a      	ldr	r2, [r3, #24]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	430a      	orrs	r2, r1
 80042d0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a2c      	ldr	r2, [pc, #176]	; (8004388 <UART_SetConfig+0x114>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d103      	bne.n	80042e4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80042dc:	f7fe fec8 	bl	8003070 <HAL_RCC_GetPCLK2Freq>
 80042e0:	60f8      	str	r0, [r7, #12]
 80042e2:	e002      	b.n	80042ea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80042e4:	f7fe feb0 	bl	8003048 <HAL_RCC_GetPCLK1Freq>
 80042e8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042ea:	68fa      	ldr	r2, [r7, #12]
 80042ec:	4613      	mov	r3, r2
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	4413      	add	r3, r2
 80042f2:	009a      	lsls	r2, r3, #2
 80042f4:	441a      	add	r2, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004300:	4a22      	ldr	r2, [pc, #136]	; (800438c <UART_SetConfig+0x118>)
 8004302:	fba2 2303 	umull	r2, r3, r2, r3
 8004306:	095b      	lsrs	r3, r3, #5
 8004308:	0119      	lsls	r1, r3, #4
 800430a:	68fa      	ldr	r2, [r7, #12]
 800430c:	4613      	mov	r3, r2
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	4413      	add	r3, r2
 8004312:	009a      	lsls	r2, r3, #2
 8004314:	441a      	add	r2, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004320:	4b1a      	ldr	r3, [pc, #104]	; (800438c <UART_SetConfig+0x118>)
 8004322:	fba3 0302 	umull	r0, r3, r3, r2
 8004326:	095b      	lsrs	r3, r3, #5
 8004328:	2064      	movs	r0, #100	; 0x64
 800432a:	fb00 f303 	mul.w	r3, r0, r3
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	011b      	lsls	r3, r3, #4
 8004332:	3332      	adds	r3, #50	; 0x32
 8004334:	4a15      	ldr	r2, [pc, #84]	; (800438c <UART_SetConfig+0x118>)
 8004336:	fba2 2303 	umull	r2, r3, r2, r3
 800433a:	095b      	lsrs	r3, r3, #5
 800433c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004340:	4419      	add	r1, r3
 8004342:	68fa      	ldr	r2, [r7, #12]
 8004344:	4613      	mov	r3, r2
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	4413      	add	r3, r2
 800434a:	009a      	lsls	r2, r3, #2
 800434c:	441a      	add	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	fbb2 f2f3 	udiv	r2, r2, r3
 8004358:	4b0c      	ldr	r3, [pc, #48]	; (800438c <UART_SetConfig+0x118>)
 800435a:	fba3 0302 	umull	r0, r3, r3, r2
 800435e:	095b      	lsrs	r3, r3, #5
 8004360:	2064      	movs	r0, #100	; 0x64
 8004362:	fb00 f303 	mul.w	r3, r0, r3
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	011b      	lsls	r3, r3, #4
 800436a:	3332      	adds	r3, #50	; 0x32
 800436c:	4a07      	ldr	r2, [pc, #28]	; (800438c <UART_SetConfig+0x118>)
 800436e:	fba2 2303 	umull	r2, r3, r2, r3
 8004372:	095b      	lsrs	r3, r3, #5
 8004374:	f003 020f 	and.w	r2, r3, #15
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	440a      	add	r2, r1
 800437e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004380:	bf00      	nop
 8004382:	3710      	adds	r7, #16
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}
 8004388:	40013800 	.word	0x40013800
 800438c:	51eb851f 	.word	0x51eb851f

08004390 <memset>:
 8004390:	4603      	mov	r3, r0
 8004392:	4402      	add	r2, r0
 8004394:	4293      	cmp	r3, r2
 8004396:	d100      	bne.n	800439a <memset+0xa>
 8004398:	4770      	bx	lr
 800439a:	f803 1b01 	strb.w	r1, [r3], #1
 800439e:	e7f9      	b.n	8004394 <memset+0x4>

080043a0 <__libc_init_array>:
 80043a0:	b570      	push	{r4, r5, r6, lr}
 80043a2:	2600      	movs	r6, #0
 80043a4:	4d0c      	ldr	r5, [pc, #48]	; (80043d8 <__libc_init_array+0x38>)
 80043a6:	4c0d      	ldr	r4, [pc, #52]	; (80043dc <__libc_init_array+0x3c>)
 80043a8:	1b64      	subs	r4, r4, r5
 80043aa:	10a4      	asrs	r4, r4, #2
 80043ac:	42a6      	cmp	r6, r4
 80043ae:	d109      	bne.n	80043c4 <__libc_init_array+0x24>
 80043b0:	f000 f81a 	bl	80043e8 <_init>
 80043b4:	2600      	movs	r6, #0
 80043b6:	4d0a      	ldr	r5, [pc, #40]	; (80043e0 <__libc_init_array+0x40>)
 80043b8:	4c0a      	ldr	r4, [pc, #40]	; (80043e4 <__libc_init_array+0x44>)
 80043ba:	1b64      	subs	r4, r4, r5
 80043bc:	10a4      	asrs	r4, r4, #2
 80043be:	42a6      	cmp	r6, r4
 80043c0:	d105      	bne.n	80043ce <__libc_init_array+0x2e>
 80043c2:	bd70      	pop	{r4, r5, r6, pc}
 80043c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80043c8:	4798      	blx	r3
 80043ca:	3601      	adds	r6, #1
 80043cc:	e7ee      	b.n	80043ac <__libc_init_array+0xc>
 80043ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80043d2:	4798      	blx	r3
 80043d4:	3601      	adds	r6, #1
 80043d6:	e7f2      	b.n	80043be <__libc_init_array+0x1e>
 80043d8:	0800442c 	.word	0x0800442c
 80043dc:	0800442c 	.word	0x0800442c
 80043e0:	0800442c 	.word	0x0800442c
 80043e4:	08004430 	.word	0x08004430

080043e8 <_init>:
 80043e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ea:	bf00      	nop
 80043ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043ee:	bc08      	pop	{r3}
 80043f0:	469e      	mov	lr, r3
 80043f2:	4770      	bx	lr

080043f4 <_fini>:
 80043f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043f6:	bf00      	nop
 80043f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043fa:	bc08      	pop	{r3}
 80043fc:	469e      	mov	lr, r3
 80043fe:	4770      	bx	lr
