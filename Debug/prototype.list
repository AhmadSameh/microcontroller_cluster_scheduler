
prototype.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d6c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002e78  08002e78  00012e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e9c  08002e9c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002e9c  08002e9c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e9c  08002e9c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e9c  08002e9c  00012e9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ea0  08002ea0  00012ea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002ea4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c8  2000000c  08002eb0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  08002eb0  000202d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a731  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e53  00000000  00000000  0002a7a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b78  00000000  00000000  0002c600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008c5  00000000  00000000  0002d178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000170ff  00000000  00000000  0002da3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c669  00000000  00000000  00044b3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a2fd  00000000  00000000  000511a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002eec  00000000  00000000  000db4a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000de390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002e60 	.word	0x08002e60

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002e60 	.word	0x08002e60

0800014c <Can_Filter_Config>:
uint32_t Can_TxMailBox[3];

static ptrVoidFunction CAN_ISR_FUNCTION = NULL;

HAL_StatusTypeDef Can_Filter_Config(CAN_HandleTypeDef *hcan,uint8_t master_or_slave)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b08c      	sub	sp, #48	; 0x30
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	460b      	mov	r3, r1
 8000156:	70fb      	strb	r3, [r7, #3]
	if(!master_or_slave)
 8000158:	78fb      	ldrb	r3, [r7, #3]
 800015a:	2b00      	cmp	r3, #0
 800015c:	d139      	bne.n	80001d2 <Can_Filter_Config+0x86>
	{

		CAN_FilterTypeDef	CANFilterConfig;
		CANFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 800015e:	2301      	movs	r3, #1
 8000160:	62bb      	str	r3, [r7, #40]	; 0x28
		CANFilterConfig.FilterBank = 10;
 8000162:	230a      	movs	r3, #10
 8000164:	61fb      	str	r3, [r7, #28]
		CANFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000166:	2300      	movs	r3, #0
 8000168:	61bb      	str	r3, [r7, #24]
		CANFilterConfig.FilterIdHigh = can_id<<5;
 800016a:	4b2f      	ldr	r3, [pc, #188]	; (8000228 <Can_Filter_Config+0xdc>)
 800016c:	681a      	ldr	r2, [r3, #0]
 800016e:	4b2f      	ldr	r3, [pc, #188]	; (800022c <Can_Filter_Config+0xe0>)
 8000170:	681b      	ldr	r3, [r3, #0]
 8000172:	405a      	eors	r2, r3
 8000174:	4b2e      	ldr	r3, [pc, #184]	; (8000230 <Can_Filter_Config+0xe4>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4053      	eors	r3, r2
 800017a:	0e1b      	lsrs	r3, r3, #24
 800017c:	015b      	lsls	r3, r3, #5
 800017e:	60bb      	str	r3, [r7, #8]
		CANFilterConfig.FilterIdLow = 0X0000;
 8000180:	2300      	movs	r3, #0
 8000182:	60fb      	str	r3, [r7, #12]
		CANFilterConfig.FilterMaskIdHigh = can_id<<5;
 8000184:	4b28      	ldr	r3, [pc, #160]	; (8000228 <Can_Filter_Config+0xdc>)
 8000186:	681a      	ldr	r2, [r3, #0]
 8000188:	4b28      	ldr	r3, [pc, #160]	; (800022c <Can_Filter_Config+0xe0>)
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	405a      	eors	r2, r3
 800018e:	4b28      	ldr	r3, [pc, #160]	; (8000230 <Can_Filter_Config+0xe4>)
 8000190:	681b      	ldr	r3, [r3, #0]
 8000192:	4053      	eors	r3, r2
 8000194:	0e1b      	lsrs	r3, r3, #24
 8000196:	015b      	lsls	r3, r3, #5
 8000198:	613b      	str	r3, [r7, #16]
		CANFilterConfig.FilterMaskIdLow = 0X0000;
 800019a:	2300      	movs	r3, #0
 800019c:	617b      	str	r3, [r7, #20]
		CANFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800019e:	2300      	movs	r3, #0
 80001a0:	623b      	str	r3, [r7, #32]
		CANFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80001a2:	2301      	movs	r3, #1
 80001a4:	627b      	str	r3, [r7, #36]	; 0x24
		CANFilterConfig.SlaveStartFilterBank = 0;
 80001a6:	2300      	movs	r3, #0
 80001a8:	62fb      	str	r3, [r7, #44]	; 0x2c
		if( HAL_CAN_ConfigFilter(hcan, &CANFilterConfig) != HAL_OK)
 80001aa:	f107 0308 	add.w	r3, r7, #8
 80001ae:	4619      	mov	r1, r3
 80001b0:	6878      	ldr	r0, [r7, #4]
 80001b2:	f000 fff0 	bl	8001196 <HAL_CAN_ConfigFilter>
 80001b6:	4603      	mov	r3, r0
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d001      	beq.n	80001c0 <Can_Filter_Config+0x74>
		{
			return HAL_ERROR;
 80001bc:	2301      	movs	r3, #1
 80001be:	e02f      	b.n	8000220 <Can_Filter_Config+0xd4>
		}
		HAL_CAN_Start(hcan);
 80001c0:	6878      	ldr	r0, [r7, #4]
 80001c2:	f001 f8b1 	bl	8001328 <HAL_CAN_Start>
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80001c6:	2102      	movs	r1, #2
 80001c8:	6878      	ldr	r0, [r7, #4]
 80001ca:	f001 fae1 	bl	8001790 <HAL_CAN_ActivateNotification>

		return HAL_OK;
 80001ce:	2300      	movs	r3, #0
 80001d0:	e026      	b.n	8000220 <Can_Filter_Config+0xd4>
	}
	else
	{
		CAN_FilterTypeDef	CANFilterConfig;
		CANFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 80001d2:	2301      	movs	r3, #1
 80001d4:	62bb      	str	r3, [r7, #40]	; 0x28
		CANFilterConfig.FilterBank = 10;
 80001d6:	230a      	movs	r3, #10
 80001d8:	61fb      	str	r3, [r7, #28]
		CANFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80001da:	2300      	movs	r3, #0
 80001dc:	61bb      	str	r3, [r7, #24]
		CANFilterConfig.FilterIdHigh = CAN_Master_Id<<5;
 80001de:	2300      	movs	r3, #0
 80001e0:	60bb      	str	r3, [r7, #8]
		CANFilterConfig.FilterIdLow = 0X0000;
 80001e2:	2300      	movs	r3, #0
 80001e4:	60fb      	str	r3, [r7, #12]
		CANFilterConfig.FilterMaskIdHigh = CAN_Master_Id<<5;
 80001e6:	2300      	movs	r3, #0
 80001e8:	613b      	str	r3, [r7, #16]
		CANFilterConfig.FilterMaskIdLow = 0X0000;
 80001ea:	2300      	movs	r3, #0
 80001ec:	617b      	str	r3, [r7, #20]
		CANFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80001ee:	2300      	movs	r3, #0
 80001f0:	623b      	str	r3, [r7, #32]
		CANFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80001f2:	2301      	movs	r3, #1
 80001f4:	627b      	str	r3, [r7, #36]	; 0x24
		CANFilterConfig.SlaveStartFilterBank = 0;
 80001f6:	2300      	movs	r3, #0
 80001f8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( HAL_CAN_ConfigFilter(hcan, &CANFilterConfig) != HAL_OK)
 80001fa:	f107 0308 	add.w	r3, r7, #8
 80001fe:	4619      	mov	r1, r3
 8000200:	6878      	ldr	r0, [r7, #4]
 8000202:	f000 ffc8 	bl	8001196 <HAL_CAN_ConfigFilter>
 8000206:	4603      	mov	r3, r0
 8000208:	2b00      	cmp	r3, #0
 800020a:	d001      	beq.n	8000210 <Can_Filter_Config+0xc4>
		{
			return HAL_ERROR;
 800020c:	2301      	movs	r3, #1
 800020e:	e007      	b.n	8000220 <Can_Filter_Config+0xd4>
		}
		HAL_CAN_Start(hcan);
 8000210:	6878      	ldr	r0, [r7, #4]
 8000212:	f001 f889 	bl	8001328 <HAL_CAN_Start>
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000216:	2102      	movs	r1, #2
 8000218:	6878      	ldr	r0, [r7, #4]
 800021a:	f001 fab9 	bl	8001790 <HAL_CAN_ActivateNotification>
		return HAL_OK;
 800021e:	2300      	movs	r3, #0
	}
}
 8000220:	4618      	mov	r0, r3
 8000222:	3730      	adds	r7, #48	; 0x30
 8000224:	46bd      	mov	sp, r7
 8000226:	bd80      	pop	{r7, pc}
 8000228:	1ffff7e8 	.word	0x1ffff7e8
 800022c:	1ffff7ec 	.word	0x1ffff7ec
 8000230:	1ffff7f0 	.word	0x1ffff7f0

08000234 <Can_Send>:

HAL_StatusTypeDef Can_Send(CAN_HandleTypeDef *hcan,uint8_t ID, uint8_t DLC, uint8_t* data,uint32_t* Mailbox)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af00      	add	r7, sp, #0
 800023a:	60f8      	str	r0, [r7, #12]
 800023c:	607b      	str	r3, [r7, #4]
 800023e:	460b      	mov	r3, r1
 8000240:	72fb      	strb	r3, [r7, #11]
 8000242:	4613      	mov	r3, r2
 8000244:	72bb      	strb	r3, [r7, #10]
	TxHeader.IDE = CAN_ID_STD;
 8000246:	4b0e      	ldr	r3, [pc, #56]	; (8000280 <Can_Send+0x4c>)
 8000248:	2200      	movs	r2, #0
 800024a:	609a      	str	r2, [r3, #8]
	TxHeader.StdId = ID;
 800024c:	7afb      	ldrb	r3, [r7, #11]
 800024e:	4a0c      	ldr	r2, [pc, #48]	; (8000280 <Can_Send+0x4c>)
 8000250:	6013      	str	r3, [r2, #0]
	TxHeader.RTR = CAN_RTR_DATA;
 8000252:	4b0b      	ldr	r3, [pc, #44]	; (8000280 <Can_Send+0x4c>)
 8000254:	2200      	movs	r2, #0
 8000256:	60da      	str	r2, [r3, #12]
	TxHeader.DLC = DLC;
 8000258:	7abb      	ldrb	r3, [r7, #10]
 800025a:	4a09      	ldr	r2, [pc, #36]	; (8000280 <Can_Send+0x4c>)
 800025c:	6113      	str	r3, [r2, #16]

	if ( HAL_CAN_AddTxMessage(hcan, &TxHeader, data, Mailbox) != HAL_OK)
 800025e:	69bb      	ldr	r3, [r7, #24]
 8000260:	687a      	ldr	r2, [r7, #4]
 8000262:	4907      	ldr	r1, [pc, #28]	; (8000280 <Can_Send+0x4c>)
 8000264:	68f8      	ldr	r0, [r7, #12]
 8000266:	f001 f8a3 	bl	80013b0 <HAL_CAN_AddTxMessage>
 800026a:	4603      	mov	r3, r0
 800026c:	2b00      	cmp	r3, #0
 800026e:	d001      	beq.n	8000274 <Can_Send+0x40>
	{
		return HAL_ERROR;
 8000270:	2301      	movs	r3, #1
 8000272:	e000      	b.n	8000276 <Can_Send+0x42>
	}
	return HAL_OK;
 8000274:	2300      	movs	r3, #0
}
 8000276:	4618      	mov	r0, r3
 8000278:	3710      	adds	r7, #16
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	20000028 	.word	0x20000028

08000284 <Can_InterruptCallBack>:

void Can_InterruptCallBack(ptrVoidFunction callBackFunction){
 8000284:	b480      	push	{r7}
 8000286:	b083      	sub	sp, #12
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]

	if(callBackFunction != NULL)
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	2b00      	cmp	r3, #0
 8000290:	d002      	beq.n	8000298 <Can_InterruptCallBack+0x14>
		CAN_ISR_FUNCTION = callBackFunction;
 8000292:	4a04      	ldr	r2, [pc, #16]	; (80002a4 <Can_InterruptCallBack+0x20>)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	6013      	str	r3, [r2, #0]

}
 8000298:	bf00      	nop
 800029a:	370c      	adds	r7, #12
 800029c:	46bd      	mov	sp, r7
 800029e:	bc80      	pop	{r7}
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop
 80002a4:	20000070 	.word	0x20000070

080002a8 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b082      	sub	sp, #8
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, Can_RxData);
 80002b0:	4b06      	ldr	r3, [pc, #24]	; (80002cc <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 80002b2:	4a07      	ldr	r2, [pc, #28]	; (80002d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 80002b4:	2100      	movs	r1, #0
 80002b6:	6878      	ldr	r0, [r7, #4]
 80002b8:	f001 f949 	bl	800154e <HAL_CAN_GetRxMessage>

	CAN_ISR_FUNCTION();
 80002bc:	4b05      	ldr	r3, [pc, #20]	; (80002d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	4798      	blx	r3
}
 80002c2:	bf00      	nop
 80002c4:	3708      	adds	r7, #8
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	2000005c 	.word	0x2000005c
 80002d0:	20000040 	.word	0x20000040
 80002d4:	20000070 	.word	0x20000070

080002d8 <priority_queue_init>:
#include <stdint.h>

void heapify(priority_queue* queue, uint8_t index);
void swap_operations(priority_queue* queue, uint8_t index1, uint8_t index2);

void priority_queue_init(priority_queue* queue){
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
	queue->tail = 0;
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	2200      	movs	r2, #0
 80002e4:	701a      	strb	r2, [r3, #0]
}
 80002e6:	bf00      	nop
 80002e8:	370c      	adds	r7, #12
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bc80      	pop	{r7}
 80002ee:	4770      	bx	lr

080002f0 <priority_queue_push>:

void priority_queue_push(priority_queue* queue, uint8_t item, uint8_t priority){
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b084      	sub	sp, #16
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
 80002f8:	460b      	mov	r3, r1
 80002fa:	70fb      	strb	r3, [r7, #3]
 80002fc:	4613      	mov	r3, r2
 80002fe:	70bb      	strb	r3, [r7, #2]
	// TODO: add here an error state
	if(queue->tail >= MAX_ITEM_NUM)
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	2b0f      	cmp	r3, #15
 8000306:	d828      	bhi.n	800035a <priority_queue_push+0x6a>
		return;
	// add queue_item to the queue at index tail [x x x tail] <----- three elements, tail = 3, tail = number of elements
	queue->queue[queue->tail].item = item;
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	687a      	ldr	r2, [r7, #4]
 800030e:	005b      	lsls	r3, r3, #1
 8000310:	4413      	add	r3, r2
 8000312:	78fa      	ldrb	r2, [r7, #3]
 8000314:	705a      	strb	r2, [r3, #1]
	queue->queue[queue->tail].priority = priority;
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	781b      	ldrb	r3, [r3, #0]
 800031a:	687a      	ldr	r2, [r7, #4]
 800031c:	005b      	lsls	r3, r3, #1
 800031e:	4413      	add	r3, r2
 8000320:	78ba      	ldrb	r2, [r7, #2]
 8000322:	709a      	strb	r2, [r3, #2]
	// heapify the queue
	for(int i=(queue->tail-1)/2; i>=0; i--)
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	3b01      	subs	r3, #1
 800032a:	0fda      	lsrs	r2, r3, #31
 800032c:	4413      	add	r3, r2
 800032e:	105b      	asrs	r3, r3, #1
 8000330:	60fb      	str	r3, [r7, #12]
 8000332:	e008      	b.n	8000346 <priority_queue_push+0x56>
		heapify(queue, i);
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	b2db      	uxtb	r3, r3
 8000338:	4619      	mov	r1, r3
 800033a:	6878      	ldr	r0, [r7, #4]
 800033c:	f000 f843 	bl	80003c6 <heapify>
	for(int i=(queue->tail-1)/2; i>=0; i--)
 8000340:	68fb      	ldr	r3, [r7, #12]
 8000342:	3b01      	subs	r3, #1
 8000344:	60fb      	str	r3, [r7, #12]
 8000346:	68fb      	ldr	r3, [r7, #12]
 8000348:	2b00      	cmp	r3, #0
 800034a:	daf3      	bge.n	8000334 <priority_queue_push+0x44>
	// increase number of elements/tail
	queue->tail++;
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	781b      	ldrb	r3, [r3, #0]
 8000350:	3301      	adds	r3, #1
 8000352:	b2da      	uxtb	r2, r3
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	701a      	strb	r2, [r3, #0]
 8000358:	e000      	b.n	800035c <priority_queue_push+0x6c>
		return;
 800035a:	bf00      	nop
}
 800035c:	3710      	adds	r7, #16
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}

08000362 <priority_queue_pop>:

uint8_t priority_queue_pop(priority_queue* queue){
 8000362:	b580      	push	{r7, lr}
 8000364:	b082      	sub	sp, #8
 8000366:	af00      	add	r7, sp, #0
 8000368:	6078      	str	r0, [r7, #4]
	// TODO: add here an errors state
	if(queue->tail <=0)
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	781b      	ldrb	r3, [r3, #0]
 800036e:	2b00      	cmp	r3, #0
 8000370:	d101      	bne.n	8000376 <priority_queue_pop+0x14>
		return 0;
 8000372:	2300      	movs	r3, #0
 8000374:	e018      	b.n	80003a8 <priority_queue_pop+0x46>
	// swap first and last elements
	swap_operations(queue, 0, queue->tail-1);
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	3b01      	subs	r3, #1
 800037c:	b2db      	uxtb	r3, r3
 800037e:	461a      	mov	r2, r3
 8000380:	2100      	movs	r1, #0
 8000382:	6878      	ldr	r0, [r7, #4]
 8000384:	f000 f868 	bl	8000458 <swap_operations>
	// decrement tail so now, last element is out of bounds of the queue
	queue->tail--;
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	781b      	ldrb	r3, [r3, #0]
 800038c:	3b01      	subs	r3, #1
 800038e:	b2da      	uxtb	r2, r3
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	701a      	strb	r2, [r3, #0]
	// heapify the queue
	heapify(queue, 0);
 8000394:	2100      	movs	r1, #0
 8000396:	6878      	ldr	r0, [r7, #4]
 8000398:	f000 f815 	bl	80003c6 <heapify>
	// return the item of the element of the queue, which is discarded
	return queue->queue[queue->tail].item;
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	687a      	ldr	r2, [r7, #4]
 80003a2:	005b      	lsls	r3, r3, #1
 80003a4:	4413      	add	r3, r2
 80003a6:	785b      	ldrb	r3, [r3, #1]
}
 80003a8:	4618      	mov	r0, r3
 80003aa:	3708      	adds	r7, #8
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}

080003b0 <priority_queue_peak>:

uint8_t priority_queue_peak(priority_queue* queue){
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
	return queue->queue[0].item;
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	785b      	ldrb	r3, [r3, #1]
}
 80003bc:	4618      	mov	r0, r3
 80003be:	370c      	adds	r7, #12
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bc80      	pop	{r7}
 80003c4:	4770      	bx	lr

080003c6 <heapify>:

void heapify(priority_queue* queue, uint8_t index){
 80003c6:	b580      	push	{r7, lr}
 80003c8:	b084      	sub	sp, #16
 80003ca:	af00      	add	r7, sp, #0
 80003cc:	6078      	str	r0, [r7, #4]
 80003ce:	460b      	mov	r3, r1
 80003d0:	70fb      	strb	r3, [r7, #3]
	// store current node as the smallest and save left and right children
	uint8_t smallest = index;
 80003d2:	78fb      	ldrb	r3, [r7, #3]
 80003d4:	73fb      	strb	r3, [r7, #15]
	uint8_t left_child = index * 2 + 1;
 80003d6:	78fb      	ldrb	r3, [r7, #3]
 80003d8:	005b      	lsls	r3, r3, #1
 80003da:	b2db      	uxtb	r3, r3
 80003dc:	3301      	adds	r3, #1
 80003de:	73bb      	strb	r3, [r7, #14]
	uint8_t right_child = left_child + 1;
 80003e0:	7bbb      	ldrb	r3, [r7, #14]
 80003e2:	3301      	adds	r3, #1
 80003e4:	737b      	strb	r3, [r7, #13]
	// if left child is smaller than current, left child is the smallest
	if(left_child < queue->tail && queue->queue[left_child].priority < queue->queue[index].priority)
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	781b      	ldrb	r3, [r3, #0]
 80003ea:	7bba      	ldrb	r2, [r7, #14]
 80003ec:	429a      	cmp	r2, r3
 80003ee:	d20d      	bcs.n	800040c <heapify+0x46>
 80003f0:	7bbb      	ldrb	r3, [r7, #14]
 80003f2:	687a      	ldr	r2, [r7, #4]
 80003f4:	005b      	lsls	r3, r3, #1
 80003f6:	4413      	add	r3, r2
 80003f8:	789a      	ldrb	r2, [r3, #2]
 80003fa:	78fb      	ldrb	r3, [r7, #3]
 80003fc:	6879      	ldr	r1, [r7, #4]
 80003fe:	005b      	lsls	r3, r3, #1
 8000400:	440b      	add	r3, r1
 8000402:	789b      	ldrb	r3, [r3, #2]
 8000404:	429a      	cmp	r2, r3
 8000406:	d201      	bcs.n	800040c <heapify+0x46>
		smallest = left_child;
 8000408:	7bbb      	ldrb	r3, [r7, #14]
 800040a:	73fb      	strb	r3, [r7, #15]
	// if right child is smaller than current, right child is the smallest
	if(right_child < queue->tail && queue->queue[right_child].priority < queue->queue[index].priority)
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	7b7a      	ldrb	r2, [r7, #13]
 8000412:	429a      	cmp	r2, r3
 8000414:	d20d      	bcs.n	8000432 <heapify+0x6c>
 8000416:	7b7b      	ldrb	r3, [r7, #13]
 8000418:	687a      	ldr	r2, [r7, #4]
 800041a:	005b      	lsls	r3, r3, #1
 800041c:	4413      	add	r3, r2
 800041e:	789a      	ldrb	r2, [r3, #2]
 8000420:	78fb      	ldrb	r3, [r7, #3]
 8000422:	6879      	ldr	r1, [r7, #4]
 8000424:	005b      	lsls	r3, r3, #1
 8000426:	440b      	add	r3, r1
 8000428:	789b      	ldrb	r3, [r3, #2]
 800042a:	429a      	cmp	r2, r3
 800042c:	d201      	bcs.n	8000432 <heapify+0x6c>
			smallest = right_child;
 800042e:	7b7b      	ldrb	r3, [r7, #13]
 8000430:	73fb      	strb	r3, [r7, #15]
	// if the smallest is not the current, swap smallest with current then heapify again
	if(smallest != index){
 8000432:	7bfa      	ldrb	r2, [r7, #15]
 8000434:	78fb      	ldrb	r3, [r7, #3]
 8000436:	429a      	cmp	r2, r3
 8000438:	d00a      	beq.n	8000450 <heapify+0x8a>
		swap_operations(queue, smallest, index);
 800043a:	78fa      	ldrb	r2, [r7, #3]
 800043c:	7bfb      	ldrb	r3, [r7, #15]
 800043e:	4619      	mov	r1, r3
 8000440:	6878      	ldr	r0, [r7, #4]
 8000442:	f000 f809 	bl	8000458 <swap_operations>
		heapify(queue, smallest);
 8000446:	7bfb      	ldrb	r3, [r7, #15]
 8000448:	4619      	mov	r1, r3
 800044a:	6878      	ldr	r0, [r7, #4]
 800044c:	f7ff ffbb 	bl	80003c6 <heapify>
	}
}
 8000450:	bf00      	nop
 8000452:	3710      	adds	r7, #16
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}

08000458 <swap_operations>:

void swap_operations(priority_queue* queue, uint8_t index1, uint8_t index2){
 8000458:	b480      	push	{r7}
 800045a:	b085      	sub	sp, #20
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
 8000460:	460b      	mov	r3, r1
 8000462:	70fb      	strb	r3, [r7, #3]
 8000464:	4613      	mov	r3, r2
 8000466:	70bb      	strb	r3, [r7, #2]
	queue_item temp = queue->queue[index1];
 8000468:	78fb      	ldrb	r3, [r7, #3]
 800046a:	687a      	ldr	r2, [r7, #4]
 800046c:	005b      	lsls	r3, r3, #1
 800046e:	4413      	add	r3, r2
 8000470:	f107 020c 	add.w	r2, r7, #12
 8000474:	3301      	adds	r3, #1
 8000476:	881b      	ldrh	r3, [r3, #0]
 8000478:	8013      	strh	r3, [r2, #0]
	queue->queue[index1] = queue->queue[index2];
 800047a:	78bb      	ldrb	r3, [r7, #2]
 800047c:	78fa      	ldrb	r2, [r7, #3]
 800047e:	6879      	ldr	r1, [r7, #4]
 8000480:	0052      	lsls	r2, r2, #1
 8000482:	440a      	add	r2, r1
 8000484:	6879      	ldr	r1, [r7, #4]
 8000486:	005b      	lsls	r3, r3, #1
 8000488:	440b      	add	r3, r1
 800048a:	3201      	adds	r2, #1
 800048c:	3301      	adds	r3, #1
 800048e:	881b      	ldrh	r3, [r3, #0]
 8000490:	8013      	strh	r3, [r2, #0]
	queue->queue[index2] = temp;
 8000492:	78bb      	ldrb	r3, [r7, #2]
 8000494:	687a      	ldr	r2, [r7, #4]
 8000496:	005b      	lsls	r3, r3, #1
 8000498:	4413      	add	r3, r2
 800049a:	3301      	adds	r3, #1
 800049c:	f107 020c 	add.w	r2, r7, #12
 80004a0:	8812      	ldrh	r2, [r2, #0]
 80004a2:	801a      	strh	r2, [r3, #0]
}
 80004a4:	bf00      	nop
 80004a6:	3714      	adds	r7, #20
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bc80      	pop	{r7}
 80004ac:	4770      	bx	lr

080004ae <sheduler_init>:
 */

#include "sheduler.h"
#include <stdlib.h>

void sheduler_init(ROM_sheduler* sheduler){
 80004ae:	b580      	push	{r7, lr}
 80004b0:	b082      	sub	sp, #8
 80004b2:	af00      	add	r7, sp, #0
 80004b4:	6078      	str	r0, [r7, #4]
	sheduler->current_slave_in_ROM = 0;
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	2200      	movs	r2, #0
 80004ba:	f883 21db 	strb.w	r2, [r3, #475]	; 0x1db
	sheduler->number_of_slaves = 0;
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	2200      	movs	r2, #0
 80004c2:	f883 21dd 	strb.w	r2, [r3, #477]	; 0x1dd
	sheduler->number_of_available_operations = 0;
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	2200      	movs	r2, #0
 80004ca:	f883 21e1 	strb.w	r2, [r3, #481]	; 0x1e1
	sheduler->number_of_idle_slaves = 0;
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	2200      	movs	r2, #0
 80004d2:	f883 21de 	strb.w	r2, [r3, #478]	; 0x1de
	sheduler->number_of_waiting_slaves = 0;
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	2200      	movs	r2, #0
 80004da:	f883 21df 	strb.w	r2, [r3, #479]	; 0x1df
	sheduler->number_of_working_slaves = 0;
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	2200      	movs	r2, #0
 80004e2:	f883 21e0 	strb.w	r2, [r3, #480]	; 0x1e0
	sheduler->sheduler_state = INIT_STATE;
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	2201      	movs	r2, #1
 80004ea:	f883 21e2 	strb.w	r2, [r3, #482]	; 0x1e2
	sheduler->is_ROM_available = 1;
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	2201      	movs	r2, #1
 80004f2:	f883 21dc 	strb.w	r2, [r3, #476]	; 0x1dc
	sheduler->process_being_sent.operation_ID = 0x00;
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	2200      	movs	r2, #0
 80004fa:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
	sheduler->test = 0;
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	2200      	movs	r2, #0
 8000502:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
	priority_queue_init(&sheduler->operations);
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	f503 73dd 	add.w	r3, r3, #442	; 0x1ba
 800050c:	4618      	mov	r0, r3
 800050e:	f7ff fee3 	bl	80002d8 <priority_queue_init>
	priority_queue_init(&sheduler->waiting_slaves_queue);
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	f203 1399 	addw	r3, r3, #409	; 0x199
 8000518:	4618      	mov	r0, r3
 800051a:	f7ff fedd 	bl	80002d8 <priority_queue_init>
	stack_init(&sheduler->idle_slaves_stack);
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000524:	4618      	mov	r0, r3
 8000526:	f000 f92e 	bl	8000786 <stack_init>
}
 800052a:	bf00      	nop
 800052c:	3708      	adds	r7, #8
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}

08000532 <add_idle_slave>:

void add_idle_slave(ROM_sheduler* sheduler, uint8_t slave_id, uint8_t slave_num){
 8000532:	b580      	push	{r7, lr}
 8000534:	b082      	sub	sp, #8
 8000536:	af00      	add	r7, sp, #0
 8000538:	6078      	str	r0, [r7, #4]
 800053a:	460b      	mov	r3, r1
 800053c:	70fb      	strb	r3, [r7, #3]
 800053e:	4613      	mov	r3, r2
 8000540:	70bb      	strb	r3, [r7, #2]
	// TODO: add here an error state
	if(slave_num >= MAX_SLAVE_NUM)
 8000542:	78bb      	ldrb	r3, [r7, #2]
 8000544:	2b01      	cmp	r3, #1
 8000546:	d82f      	bhi.n	80005a8 <add_idle_slave+0x76>
		return;
	// increase number of saved slaves
	sheduler->number_of_slaves++;
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	f893 31dd 	ldrb.w	r3, [r3, #477]	; 0x1dd
 800054e:	3301      	adds	r3, #1
 8000550:	b2da      	uxtb	r2, r3
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	f883 21dd 	strb.w	r2, [r3, #477]	; 0x1dd
	// increase number of known idle slaves
	sheduler->number_of_idle_slaves++;
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	f893 31de 	ldrb.w	r3, [r3, #478]	; 0x1de
 800055e:	3301      	adds	r3, #1
 8000560:	b2da      	uxtb	r2, r3
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	f883 21de 	strb.w	r2, [r3, #478]	; 0x1de
	// register slave to SCB
	sheduler->slave_blocks[slave_num].slave_ID = slave_id;
 8000568:	78ba      	ldrb	r2, [r7, #2]
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	78f9      	ldrb	r1, [r7, #3]
 800056e:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
	sheduler->slave_blocks[slave_num].slave_number = slave_num;
 8000572:	78bb      	ldrb	r3, [r7, #2]
 8000574:	687a      	ldr	r2, [r7, #4]
 8000576:	009b      	lsls	r3, r3, #2
 8000578:	4413      	add	r3, r2
 800057a:	78ba      	ldrb	r2, [r7, #2]
 800057c:	709a      	strb	r2, [r3, #2]
	sheduler->slave_blocks[slave_num].slave_state = SLAVE_IDLE;
 800057e:	78bb      	ldrb	r3, [r7, #2]
 8000580:	687a      	ldr	r2, [r7, #4]
 8000582:	009b      	lsls	r3, r3, #2
 8000584:	4413      	add	r3, r2
 8000586:	2200      	movs	r2, #0
 8000588:	705a      	strb	r2, [r3, #1]
	sheduler->slave_blocks[slave_num].current_opcode = 0x00;
 800058a:	78bb      	ldrb	r3, [r7, #2]
 800058c:	687a      	ldr	r2, [r7, #4]
 800058e:	009b      	lsls	r3, r3, #2
 8000590:	4413      	add	r3, r2
 8000592:	2200      	movs	r2, #0
 8000594:	70da      	strb	r2, [r3, #3]
	// push slave number to free slave stack
	stack_push(&sheduler->idle_slaves_stack, slave_num);
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800059c:	78ba      	ldrb	r2, [r7, #2]
 800059e:	4611      	mov	r1, r2
 80005a0:	4618      	mov	r0, r3
 80005a2:	f000 f8fc 	bl	800079e <stack_push>
 80005a6:	e000      	b.n	80005aa <add_idle_slave+0x78>
		return;
 80005a8:	bf00      	nop
}
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}

080005b0 <add_operation>:

// TODO: implement send_number_of_idle_slaves(uint8_t num)

void add_operation(ROM_sheduler* sheduler, operation_control_block new_operation){
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	60f8      	str	r0, [r7, #12]
 80005b8:	1d3b      	adds	r3, r7, #4
 80005ba:	e883 0006 	stmia.w	r3, {r1, r2}
	// TODO: add here an error state
	if(sheduler->number_of_available_operations >= MAX_OPERATIONS_NUM)
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	f893 31e1 	ldrb.w	r3, [r3, #481]	; 0x1e1
 80005c4:	2b3f      	cmp	r3, #63	; 0x3f
 80005c6:	d830      	bhi.n	800062a <add_operation+0x7a>
		return;
	// register operation to OCB
	sheduler->operation_blocks[sheduler->number_of_available_operations] = new_operation;
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	f893 31e1 	ldrb.w	r3, [r3, #481]	; 0x1e1
 80005ce:	4619      	mov	r1, r3
 80005d0:	68fa      	ldr	r2, [r7, #12]
 80005d2:	460b      	mov	r3, r1
 80005d4:	005b      	lsls	r3, r3, #1
 80005d6:	440b      	add	r3, r1
 80005d8:	005b      	lsls	r3, r3, #1
 80005da:	4413      	add	r3, r2
 80005dc:	3308      	adds	r3, #8
 80005de:	461a      	mov	r2, r3
 80005e0:	1d3b      	adds	r3, r7, #4
 80005e2:	6818      	ldr	r0, [r3, #0]
 80005e4:	6010      	str	r0, [r2, #0]
 80005e6:	889b      	ldrh	r3, [r3, #4]
 80005e8:	8093      	strh	r3, [r2, #4]
	sheduler->operation_blocks[sheduler->number_of_available_operations].number_of_working_slaves = 0x00;
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	f893 31e1 	ldrb.w	r3, [r3, #481]	; 0x1e1
 80005f0:	4619      	mov	r1, r3
 80005f2:	68fa      	ldr	r2, [r7, #12]
 80005f4:	460b      	mov	r3, r1
 80005f6:	005b      	lsls	r3, r3, #1
 80005f8:	440b      	add	r3, r1
 80005fa:	005b      	lsls	r3, r3, #1
 80005fc:	4413      	add	r3, r2
 80005fe:	330c      	adds	r3, #12
 8000600:	2200      	movs	r2, #0
 8000602:	701a      	strb	r2, [r3, #0]
	// push operation number to operation queue
	priority_queue_push(&sheduler->operations, sheduler->number_of_available_operations, new_operation.operation_priority);
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	f503 70dd 	add.w	r0, r3, #442	; 0x1ba
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	f893 31e1 	ldrb.w	r3, [r3, #481]	; 0x1e1
 8000610:	797a      	ldrb	r2, [r7, #5]
 8000612:	4619      	mov	r1, r3
 8000614:	f7ff fe6c 	bl	80002f0 <priority_queue_push>
	// increase number of available operations
	sheduler->number_of_available_operations++;
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	f893 31e1 	ldrb.w	r3, [r3, #481]	; 0x1e1
 800061e:	3301      	adds	r3, #1
 8000620:	b2da      	uxtb	r2, r3
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	f883 21e1 	strb.w	r2, [r3, #481]	; 0x1e1
 8000628:	e000      	b.n	800062c <add_operation+0x7c>
		return;
 800062a:	bf00      	nop
}
 800062c:	3710      	adds	r7, #16
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}

08000632 <give_slave_opcode>:

// remove slave from the idle stack then push it to the waiting queue with the opcode to be sent
void give_slave_opcode(ROM_sheduler* sheduler, operation_control_block slave_operation, uint8_t slave_recieving_number){
 8000632:	b580      	push	{r7, lr}
 8000634:	b086      	sub	sp, #24
 8000636:	af00      	add	r7, sp, #0
 8000638:	60f8      	str	r0, [r7, #12]
 800063a:	1d38      	adds	r0, r7, #4
 800063c:	e880 0006 	stmia.w	r0, {r1, r2}
 8000640:	70fb      	strb	r3, [r7, #3]
	// TODO: add here an error state
	if(sheduler->number_of_idle_slaves <= 0)
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	f893 31de 	ldrb.w	r3, [r3, #478]	; 0x1de
 8000648:	2b00      	cmp	r3, #0
 800064a:	d071      	beq.n	8000730 <give_slave_opcode+0xfe>
		return;
	// change slave state in SCB
#if SCHEDULING_TECHNIQUE == SCHEDULE_ON_NUMBERS

#else
	for(int i=0; i<slave_operation.number_of_working_slaves; i++){
 800064c:	2300      	movs	r3, #0
 800064e:	617b      	str	r3, [r7, #20]
 8000650:	e002      	b.n	8000658 <give_slave_opcode+0x26>
 8000652:	697b      	ldr	r3, [r7, #20]
 8000654:	3301      	adds	r3, #1
 8000656:	617b      	str	r3, [r7, #20]
 8000658:	7a3b      	ldrb	r3, [r7, #8]
 800065a:	461a      	mov	r2, r3
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	4293      	cmp	r3, r2
 8000660:	dbf7      	blt.n	8000652 <give_slave_opcode+0x20>

	}
	sheduler->slave_blocks[slave_recieving_number].slave_state = SLAVE_WAITING;
 8000662:	78fb      	ldrb	r3, [r7, #3]
 8000664:	68fa      	ldr	r2, [r7, #12]
 8000666:	009b      	lsls	r3, r3, #2
 8000668:	4413      	add	r3, r2
 800066a:	2201      	movs	r2, #1
 800066c:	705a      	strb	r2, [r3, #1]
	// assign slave the operation code in its SCB
	sheduler->slave_blocks[slave_recieving_number].current_opcode = slave_operation.operation_ID;
 800066e:	78fb      	ldrb	r3, [r7, #3]
 8000670:	7939      	ldrb	r1, [r7, #4]
 8000672:	68fa      	ldr	r2, [r7, #12]
 8000674:	009b      	lsls	r3, r3, #2
 8000676:	4413      	add	r3, r2
 8000678:	460a      	mov	r2, r1
 800067a:	70da      	strb	r2, [r3, #3]
	// push slave number to waiting slaves queue and use operation priority
	priority_queue_push(&sheduler->waiting_slaves_queue, slave_recieving_number, slave_operation.operation_priority);
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	f203 1399 	addw	r3, r3, #409	; 0x199
 8000682:	797a      	ldrb	r2, [r7, #5]
 8000684:	78f9      	ldrb	r1, [r7, #3]
 8000686:	4618      	mov	r0, r3
 8000688:	f7ff fe32 	bl	80002f0 <priority_queue_push>
	// increase number of waiting slaves
	sheduler->number_of_waiting_slaves++;
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	f893 31df 	ldrb.w	r3, [r3, #479]	; 0x1df
 8000692:	3301      	adds	r3, #1
 8000694:	b2da      	uxtb	r2, r3
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	f883 21df 	strb.w	r2, [r3, #479]	; 0x1df
	// reduce idle slaves number
	sheduler->number_of_idle_slaves--;
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	f893 31de 	ldrb.w	r3, [r3, #478]	; 0x1de
 80006a2:	3b01      	subs	r3, #1
 80006a4:	b2da      	uxtb	r2, r3
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	f883 21de 	strb.w	r2, [r3, #478]	; 0x1de
	// decrement number of slaves left
	sheduler->process_being_sent.number_of_working_slaves--;
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	f893 31e8 	ldrb.w	r3, [r3, #488]	; 0x1e8
 80006b2:	3b01      	subs	r3, #1
 80006b4:	b2da      	uxtb	r2, r3
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
	// if the operation was sent to the required slaves
	if(sheduler->process_being_sent.number_of_working_slaves == 0){
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	f893 31e8 	ldrb.w	r3, [r3, #488]	; 0x1e8
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d135      	bne.n	8000732 <give_slave_opcode+0x100>
		// set process to be sent to 0 again
		sheduler->process_being_sent.operation_ID = 0x00;
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	2200      	movs	r2, #0
 80006ca:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
		// decrement number of available operations
		sheduler->number_of_available_operations--;
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	f893 31e1 	ldrb.w	r3, [r3, #481]	; 0x1e1
 80006d4:	3b01      	subs	r3, #1
 80006d6:	b2da      	uxtb	r2, r3
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	f883 21e1 	strb.w	r2, [r3, #481]	; 0x1e1
		// remove the operation from queue
		priority_queue_pop(&sheduler->operations);
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	f503 73dd 	add.w	r3, r3, #442	; 0x1ba
 80006e4:	4618      	mov	r0, r3
 80006e6:	f7ff fe3c 	bl	8000362 <priority_queue_pop>
		// if we can still send operations, set process being set
		if(sheduler->number_of_idle_slaves != 0 && sheduler->number_of_available_operations != 0)
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	f893 31de 	ldrb.w	r3, [r3, #478]	; 0x1de
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d01e      	beq.n	8000732 <give_slave_opcode+0x100>
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	f893 31e1 	ldrb.w	r3, [r3, #481]	; 0x1e1
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d019      	beq.n	8000732 <give_slave_opcode+0x100>
			sheduler->process_being_sent = sheduler->operation_blocks[priority_queue_peak(&sheduler->operations)];
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	f503 73dd 	add.w	r3, r3, #442	; 0x1ba
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff fe53 	bl	80003b0 <priority_queue_peak>
 800070a:	4603      	mov	r3, r0
 800070c:	4618      	mov	r0, r3
 800070e:	68fa      	ldr	r2, [r7, #12]
 8000710:	68f9      	ldr	r1, [r7, #12]
 8000712:	4603      	mov	r3, r0
 8000714:	005b      	lsls	r3, r3, #1
 8000716:	4403      	add	r3, r0
 8000718:	005b      	lsls	r3, r3, #1
 800071a:	440b      	add	r3, r1
 800071c:	f103 0108 	add.w	r1, r3, #8
 8000720:	f502 73f2 	add.w	r3, r2, #484	; 0x1e4
 8000724:	460a      	mov	r2, r1
 8000726:	6811      	ldr	r1, [r2, #0]
 8000728:	6019      	str	r1, [r3, #0]
 800072a:	8892      	ldrh	r2, [r2, #4]
 800072c:	809a      	strh	r2, [r3, #4]
 800072e:	e000      	b.n	8000732 <give_slave_opcode+0x100>
		return;
 8000730:	bf00      	nop
	}
#endif
}
 8000732:	3718      	adds	r7, #24
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}

08000738 <give_slave_access_to_ROM>:
// void add_waiting_slave(ROM_sheduler* sheduler, uint8_t acknowledged_opcode){
// 	sheduler->number_of_idle_slaves--;
// 	add_to_waiting_slaves(acknowledged_opcode);
// }

void give_slave_access_to_ROM(ROM_sheduler* sheduler){
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	// pop slave from its waiting queue and set the current_slave_in_ROM to it
	sheduler->current_slave_in_ROM = priority_queue_pop(&sheduler->waiting_slaves_queue);
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	f203 1399 	addw	r3, r3, #409	; 0x199
 8000746:	4618      	mov	r0, r3
 8000748:	f7ff fe0b 	bl	8000362 <priority_queue_pop>
 800074c:	4603      	mov	r3, r0
 800074e:	461a      	mov	r2, r3
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	f883 21db 	strb.w	r2, [r3, #475]	; 0x1db
	// decremnt number of waiting slaves
	sheduler->number_of_waiting_slaves--;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	f893 31df 	ldrb.w	r3, [r3, #479]	; 0x1df
 800075c:	3b01      	subs	r3, #1
 800075e:	b2da      	uxtb	r2, r3
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	f883 21df 	strb.w	r2, [r3, #479]	; 0x1df
	// change the slave's state in the block
	sheduler->slave_blocks[sheduler->current_slave_in_ROM].slave_state = SLAVE_IN_ROM;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	f893 31db 	ldrb.w	r3, [r3, #475]	; 0x1db
 800076c:	687a      	ldr	r2, [r7, #4]
 800076e:	009b      	lsls	r3, r3, #2
 8000770:	4413      	add	r3, r2
 8000772:	2202      	movs	r2, #2
 8000774:	705a      	strb	r2, [r3, #1]
	// set ROM is not available
	sheduler->is_ROM_available = 0;
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	2200      	movs	r2, #0
 800077a:	f883 21dc 	strb.w	r2, [r3, #476]	; 0x1dc
}
 800077e:	bf00      	nop
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}

08000786 <stack_init>:
 *      Author: ahmad
 */

#include "stack.h"

void stack_init(stack* _stack){
 8000786:	b480      	push	{r7}
 8000788:	b083      	sub	sp, #12
 800078a:	af00      	add	r7, sp, #0
 800078c:	6078      	str	r0, [r7, #4]
	_stack->top = 0;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	2200      	movs	r2, #0
 8000792:	701a      	strb	r2, [r3, #0]
}
 8000794:	bf00      	nop
 8000796:	370c      	adds	r7, #12
 8000798:	46bd      	mov	sp, r7
 800079a:	bc80      	pop	{r7}
 800079c:	4770      	bx	lr

0800079e <stack_push>:

void stack_push(stack* _stack, uint8_t item){
 800079e:	b480      	push	{r7}
 80007a0:	b083      	sub	sp, #12
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	6078      	str	r0, [r7, #4]
 80007a6:	460b      	mov	r3, r1
 80007a8:	70fb      	strb	r3, [r7, #3]
	// TODO: add here an error state
	if(_stack->top >= MAX_ITEM_NUM)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	2b0f      	cmp	r3, #15
 80007b0:	d80d      	bhi.n	80007ce <stack_push+0x30>
		return;
	// add item to the top of stack, top = number of elements
	_stack->item[_stack->top] = item;
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	461a      	mov	r2, r3
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	4413      	add	r3, r2
 80007bc:	78fa      	ldrb	r2, [r7, #3]
 80007be:	705a      	strb	r2, [r3, #1]
	_stack->top++;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	3301      	adds	r3, #1
 80007c6:	b2da      	uxtb	r2, r3
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	701a      	strb	r2, [r3, #0]
 80007cc:	e000      	b.n	80007d0 <stack_push+0x32>
		return;
 80007ce:	bf00      	nop
}
 80007d0:	370c      	adds	r7, #12
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bc80      	pop	{r7}
 80007d6:	4770      	bx	lr

080007d8 <stack_peak>:
	// decrement top index, top becomes the last element
	_stack->top--;
	return _stack->item[_stack->top];
}

uint8_t stack_peak(stack* _stack){
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
	return _stack->item[_stack->top-1];
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	3b01      	subs	r3, #1
 80007e6:	687a      	ldr	r2, [r7, #4]
 80007e8:	4413      	add	r3, r2
 80007ea:	785b      	ldrb	r3, [r3, #1]
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	370c      	adds	r7, #12
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bc80      	pop	{r7}
 80007f4:	4770      	bx	lr
	...

080007f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007fe:	f000 fb6d 	bl	8000edc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000802:	f000 f853 	bl	80008ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000806:	f000 f91b 	bl	8000a40 <MX_GPIO_Init>
  MX_CAN_Init();
 800080a:	f000 f895 	bl	8000938 <MX_CAN_Init>
  MX_TIM2_Init();
 800080e:	f000 f8c9 	bl	80009a4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  Can_Filter_Config(&hcan, master);
 8000812:	2101      	movs	r1, #1
 8000814:	481f      	ldr	r0, [pc, #124]	; (8000894 <main+0x9c>)
 8000816:	f7ff fc99 	bl	800014c <Can_Filter_Config>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800081a:	2200      	movs	r2, #0
 800081c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000820:	481d      	ldr	r0, [pc, #116]	; (8000898 <main+0xa0>)
 8000822:	f001 fc8f 	bl	8002144 <HAL_GPIO_WritePin>
//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000826:	2201      	movs	r2, #1
 8000828:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800082c:	481b      	ldr	r0, [pc, #108]	; (800089c <main+0xa4>)
 800082e:	f001 fc89 	bl	8002144 <HAL_GPIO_WritePin>
	// HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
  sheduler_init(&sheduler);
 8000832:	481b      	ldr	r0, [pc, #108]	; (80008a0 <main+0xa8>)
 8000834:	f7ff fe3b 	bl	80004ae <sheduler_init>
  // slaves_init();
  // init_busy_slaves_array(3);
  // create a dummy operation then add it to the operation priority queue
  operation_control_block operation1;
  operation1.operation_ID = 0x00;
 8000838:	2300      	movs	r3, #0
 800083a:	723b      	strb	r3, [r7, #8]
  operation1.operation_length = 0x3724;
 800083c:	f243 7324 	movw	r3, #14116	; 0x3724
 8000840:	817b      	strh	r3, [r7, #10]
  operation1.number_of_working_slaves = 1;
 8000842:	2301      	movs	r3, #1
 8000844:	733b      	strb	r3, [r7, #12]
  operation1.operation_priority = 1;
 8000846:	2301      	movs	r3, #1
 8000848:	727b      	strb	r3, [r7, #9]
  operation_control_block operation2;
  operation2.operation_ID = 0x01;
 800084a:	2301      	movs	r3, #1
 800084c:	703b      	strb	r3, [r7, #0]
  operation2.operation_length = 0x3724;
 800084e:	f243 7324 	movw	r3, #14116	; 0x3724
 8000852:	807b      	strh	r3, [r7, #2]
  operation2.number_of_working_slaves = 1;
 8000854:	2301      	movs	r3, #1
 8000856:	713b      	strb	r3, [r7, #4]
  operation2.operation_priority = 1;
 8000858:	2301      	movs	r3, #1
 800085a:	707b      	strb	r3, [r7, #1]
  add_operation(&sheduler, operation1);
 800085c:	f107 0308 	add.w	r3, r7, #8
 8000860:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000864:	480e      	ldr	r0, [pc, #56]	; (80008a0 <main+0xa8>)
 8000866:	f7ff fea3 	bl	80005b0 <add_operation>
  add_operation(&sheduler, operation2);
 800086a:	463b      	mov	r3, r7
 800086c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000870:	480b      	ldr	r0, [pc, #44]	; (80008a0 <main+0xa8>)
 8000872:	f7ff fe9d 	bl	80005b0 <add_operation>
  // initiate can receive callback
  Can_InterruptCallBack(system_callback);
 8000876:	480b      	ldr	r0, [pc, #44]	; (80008a4 <main+0xac>)
 8000878:	f7ff fd04 	bl	8000284 <Can_InterruptCallBack>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 800087c:	2201      	movs	r2, #1
 800087e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000882:	4809      	ldr	r0, [pc, #36]	; (80008a8 <main+0xb0>)
 8000884:	f001 fc5e 	bl	8002144 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000888:	2200      	movs	r2, #0
 800088a:	2180      	movs	r1, #128	; 0x80
 800088c:	4806      	ldr	r0, [pc, #24]	; (80008a8 <main+0xb0>)
 800088e:	f001 fc59 	bl	8002144 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
 8000892:	e7fe      	b.n	8000892 <main+0x9a>
 8000894:	20000074 	.word	0x20000074
 8000898:	40010800 	.word	0x40010800
 800089c:	40011000 	.word	0x40011000
 80008a0:	200000e4 	.word	0x200000e4
 80008a4:	08000b71 	.word	0x08000b71
 80008a8:	40010c00 	.word	0x40010c00

080008ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b090      	sub	sp, #64	; 0x40
 80008b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008b2:	f107 0318 	add.w	r3, r7, #24
 80008b6:	2228      	movs	r2, #40	; 0x28
 80008b8:	2100      	movs	r1, #0
 80008ba:	4618      	mov	r0, r3
 80008bc:	f002 faa4 	bl	8002e08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
 80008cc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008ce:	2301      	movs	r3, #1
 80008d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80008d8:	2300      	movs	r3, #0
 80008da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008dc:	2301      	movs	r3, #1
 80008de:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008e0:	2302      	movs	r3, #2
 80008e2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80008ea:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80008ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008f0:	f107 0318 	add.w	r3, r7, #24
 80008f4:	4618      	mov	r0, r3
 80008f6:	f001 fc3d 	bl	8002174 <HAL_RCC_OscConfig>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000900:	f000 f9f6 	bl	8000cf0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000904:	230f      	movs	r3, #15
 8000906:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000908:	2302      	movs	r3, #2
 800090a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800090c:	2300      	movs	r3, #0
 800090e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000910:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000914:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000916:	2300      	movs	r3, #0
 8000918:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	2102      	movs	r1, #2
 800091e:	4618      	mov	r0, r3
 8000920:	f001 feaa 	bl	8002678 <HAL_RCC_ClockConfig>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800092a:	f000 f9e1 	bl	8000cf0 <Error_Handler>
  }
}
 800092e:	bf00      	nop
 8000930:	3740      	adds	r7, #64	; 0x40
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
	...

08000938 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800093c:	4b17      	ldr	r3, [pc, #92]	; (800099c <MX_CAN_Init+0x64>)
 800093e:	4a18      	ldr	r2, [pc, #96]	; (80009a0 <MX_CAN_Init+0x68>)
 8000940:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 8000942:	4b16      	ldr	r3, [pc, #88]	; (800099c <MX_CAN_Init+0x64>)
 8000944:	2212      	movs	r2, #18
 8000946:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000948:	4b14      	ldr	r3, [pc, #80]	; (800099c <MX_CAN_Init+0x64>)
 800094a:	2200      	movs	r2, #0
 800094c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800094e:	4b13      	ldr	r3, [pc, #76]	; (800099c <MX_CAN_Init+0x64>)
 8000950:	2200      	movs	r2, #0
 8000952:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000954:	4b11      	ldr	r3, [pc, #68]	; (800099c <MX_CAN_Init+0x64>)
 8000956:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800095a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800095c:	4b0f      	ldr	r3, [pc, #60]	; (800099c <MX_CAN_Init+0x64>)
 800095e:	2200      	movs	r2, #0
 8000960:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000962:	4b0e      	ldr	r3, [pc, #56]	; (800099c <MX_CAN_Init+0x64>)
 8000964:	2200      	movs	r2, #0
 8000966:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000968:	4b0c      	ldr	r3, [pc, #48]	; (800099c <MX_CAN_Init+0x64>)
 800096a:	2200      	movs	r2, #0
 800096c:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800096e:	4b0b      	ldr	r3, [pc, #44]	; (800099c <MX_CAN_Init+0x64>)
 8000970:	2200      	movs	r2, #0
 8000972:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000974:	4b09      	ldr	r3, [pc, #36]	; (800099c <MX_CAN_Init+0x64>)
 8000976:	2200      	movs	r2, #0
 8000978:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800097a:	4b08      	ldr	r3, [pc, #32]	; (800099c <MX_CAN_Init+0x64>)
 800097c:	2200      	movs	r2, #0
 800097e:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000980:	4b06      	ldr	r3, [pc, #24]	; (800099c <MX_CAN_Init+0x64>)
 8000982:	2200      	movs	r2, #0
 8000984:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000986:	4805      	ldr	r0, [pc, #20]	; (800099c <MX_CAN_Init+0x64>)
 8000988:	f000 fb0a 	bl	8000fa0 <HAL_CAN_Init>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 8000992:	f000 f9ad 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20000074 	.word	0x20000074
 80009a0:	40006400 	.word	0x40006400

080009a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b086      	sub	sp, #24
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009aa:	f107 0308 	add.w	r3, r7, #8
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]
 80009b4:	609a      	str	r2, [r3, #8]
 80009b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009b8:	463b      	mov	r3, r7
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009c0:	4b1e      	ldr	r3, [pc, #120]	; (8000a3c <MX_TIM2_Init+0x98>)
 80009c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 80009c8:	4b1c      	ldr	r3, [pc, #112]	; (8000a3c <MX_TIM2_Init+0x98>)
 80009ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009ce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009d0:	4b1a      	ldr	r3, [pc, #104]	; (8000a3c <MX_TIM2_Init+0x98>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 18000;
 80009d6:	4b19      	ldr	r3, [pc, #100]	; (8000a3c <MX_TIM2_Init+0x98>)
 80009d8:	f244 6250 	movw	r2, #18000	; 0x4650
 80009dc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009de:	4b17      	ldr	r3, [pc, #92]	; (8000a3c <MX_TIM2_Init+0x98>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009e4:	4b15      	ldr	r3, [pc, #84]	; (8000a3c <MX_TIM2_Init+0x98>)
 80009e6:	2280      	movs	r2, #128	; 0x80
 80009e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009ea:	4814      	ldr	r0, [pc, #80]	; (8000a3c <MX_TIM2_Init+0x98>)
 80009ec:	f001 ffa0 	bl	8002930 <HAL_TIM_Base_Init>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80009f6:	f000 f97b 	bl	8000cf0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a00:	f107 0308 	add.w	r3, r7, #8
 8000a04:	4619      	mov	r1, r3
 8000a06:	480d      	ldr	r0, [pc, #52]	; (8000a3c <MX_TIM2_Init+0x98>)
 8000a08:	f001 ffe1 	bl	80029ce <HAL_TIM_ConfigClockSource>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000a12:	f000 f96d 	bl	8000cf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a16:	2300      	movs	r3, #0
 8000a18:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a1e:	463b      	mov	r3, r7
 8000a20:	4619      	mov	r1, r3
 8000a22:	4806      	ldr	r0, [pc, #24]	; (8000a3c <MX_TIM2_Init+0x98>)
 8000a24:	f002 f992 	bl	8002d4c <HAL_TIMEx_MasterConfigSynchronization>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000a2e:	f000 f95f 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a32:	bf00      	nop
 8000a34:	3718      	adds	r7, #24
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	2000009c 	.word	0x2000009c

08000a40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b088      	sub	sp, #32
 8000a44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a46:	f107 0310 	add.w	r3, r7, #16
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	605a      	str	r2, [r3, #4]
 8000a50:	609a      	str	r2, [r3, #8]
 8000a52:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a54:	4b42      	ldr	r3, [pc, #264]	; (8000b60 <MX_GPIO_Init+0x120>)
 8000a56:	699b      	ldr	r3, [r3, #24]
 8000a58:	4a41      	ldr	r2, [pc, #260]	; (8000b60 <MX_GPIO_Init+0x120>)
 8000a5a:	f043 0310 	orr.w	r3, r3, #16
 8000a5e:	6193      	str	r3, [r2, #24]
 8000a60:	4b3f      	ldr	r3, [pc, #252]	; (8000b60 <MX_GPIO_Init+0x120>)
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	f003 0310 	and.w	r3, r3, #16
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a6c:	4b3c      	ldr	r3, [pc, #240]	; (8000b60 <MX_GPIO_Init+0x120>)
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	4a3b      	ldr	r2, [pc, #236]	; (8000b60 <MX_GPIO_Init+0x120>)
 8000a72:	f043 0320 	orr.w	r3, r3, #32
 8000a76:	6193      	str	r3, [r2, #24]
 8000a78:	4b39      	ldr	r3, [pc, #228]	; (8000b60 <MX_GPIO_Init+0x120>)
 8000a7a:	699b      	ldr	r3, [r3, #24]
 8000a7c:	f003 0320 	and.w	r3, r3, #32
 8000a80:	60bb      	str	r3, [r7, #8]
 8000a82:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a84:	4b36      	ldr	r3, [pc, #216]	; (8000b60 <MX_GPIO_Init+0x120>)
 8000a86:	699b      	ldr	r3, [r3, #24]
 8000a88:	4a35      	ldr	r2, [pc, #212]	; (8000b60 <MX_GPIO_Init+0x120>)
 8000a8a:	f043 0304 	orr.w	r3, r3, #4
 8000a8e:	6193      	str	r3, [r2, #24]
 8000a90:	4b33      	ldr	r3, [pc, #204]	; (8000b60 <MX_GPIO_Init+0x120>)
 8000a92:	699b      	ldr	r3, [r3, #24]
 8000a94:	f003 0304 	and.w	r3, r3, #4
 8000a98:	607b      	str	r3, [r7, #4]
 8000a9a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a9c:	4b30      	ldr	r3, [pc, #192]	; (8000b60 <MX_GPIO_Init+0x120>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	4a2f      	ldr	r2, [pc, #188]	; (8000b60 <MX_GPIO_Init+0x120>)
 8000aa2:	f043 0308 	orr.w	r3, r3, #8
 8000aa6:	6193      	str	r3, [r2, #24]
 8000aa8:	4b2d      	ldr	r3, [pc, #180]	; (8000b60 <MX_GPIO_Init+0x120>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	f003 0308 	and.w	r3, r3, #8
 8000ab0:	603b      	str	r3, [r7, #0]
 8000ab2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aba:	482a      	ldr	r0, [pc, #168]	; (8000b64 <MX_GPIO_Init+0x124>)
 8000abc:	f001 fb42 	bl	8002144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	2120      	movs	r1, #32
 8000ac4:	4828      	ldr	r0, [pc, #160]	; (8000b68 <MX_GPIO_Init+0x128>)
 8000ac6:	f001 fb3d 	bl	8002144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10, GPIO_PIN_RESET);
 8000aca:	2200      	movs	r2, #0
 8000acc:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
 8000ad0:	4825      	ldr	r0, [pc, #148]	; (8000b68 <MX_GPIO_Init+0x128>)
 8000ad2:	f001 fb37 	bl	8002144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	f44f 71cc 	mov.w	r1, #408	; 0x198
 8000adc:	4823      	ldr	r0, [pc, #140]	; (8000b6c <MX_GPIO_Init+0x12c>)
 8000ade:	f001 fb31 	bl	8002144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ae2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ae6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af0:	2302      	movs	r3, #2
 8000af2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000af4:	f107 0310 	add.w	r3, r7, #16
 8000af8:	4619      	mov	r1, r3
 8000afa:	481a      	ldr	r0, [pc, #104]	; (8000b64 <MX_GPIO_Init+0x124>)
 8000afc:	f001 f99e 	bl	8001e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b00:	2320      	movs	r3, #32
 8000b02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b04:	2301      	movs	r3, #1
 8000b06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b10:	f107 0310 	add.w	r3, r7, #16
 8000b14:	4619      	mov	r1, r3
 8000b16:	4814      	ldr	r0, [pc, #80]	; (8000b68 <MX_GPIO_Init+0x128>)
 8000b18:	f001 f990 	bl	8001e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8000b1c:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000b20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b22:	2301      	movs	r3, #1
 8000b24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2e:	f107 0310 	add.w	r3, r7, #16
 8000b32:	4619      	mov	r1, r3
 8000b34:	480c      	ldr	r0, [pc, #48]	; (8000b68 <MX_GPIO_Init+0x128>)
 8000b36:	f001 f981 	bl	8001e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_8;
 8000b3a:	f44f 73cc 	mov.w	r3, #408	; 0x198
 8000b3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b40:	2301      	movs	r3, #1
 8000b42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b4c:	f107 0310 	add.w	r3, r7, #16
 8000b50:	4619      	mov	r1, r3
 8000b52:	4806      	ldr	r0, [pc, #24]	; (8000b6c <MX_GPIO_Init+0x12c>)
 8000b54:	f001 f972 	bl	8001e3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b58:	bf00      	nop
 8000b5a:	3720      	adds	r7, #32
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	40021000 	.word	0x40021000
 8000b64:	40011000 	.word	0x40011000
 8000b68:	40010800 	.word	0x40010800
 8000b6c:	40010c00 	.word	0x40010c00

08000b70 <system_callback>:

/* USER CODE BEGIN 4 */
void system_callback(){
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b088      	sub	sp, #32
 8000b74:	af02      	add	r7, sp, #8
//			uint8_t data[8];
//			data[0] = ROM_SIGNAL;
//			Can_Send(&hcan, sheduler.slave_blocks[sheduler.current_slave_in_ROM].slave_ID, 1, data, &Can_TxMailBox[0]);
//		}
//	}
	if(sheduler.test == 0){
 8000b76:	4b56      	ldr	r3, [pc, #344]	; (8000cd0 <system_callback+0x160>)
 8000b78:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d150      	bne.n	8000c22 <system_callback+0xb2>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8000b80:	2200      	movs	r2, #0
 8000b82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b86:	4853      	ldr	r0, [pc, #332]	; (8000cd4 <system_callback+0x164>)
 8000b88:	f001 fadc 	bl	8002144 <HAL_GPIO_WritePin>
		add_idle_slave(&sheduler, RxHeader.StdId, sheduler.number_of_slaves);
 8000b8c:	4b52      	ldr	r3, [pc, #328]	; (8000cd8 <system_callback+0x168>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	4a4f      	ldr	r2, [pc, #316]	; (8000cd0 <system_callback+0x160>)
 8000b94:	f892 21dd 	ldrb.w	r2, [r2, #477]	; 0x1dd
 8000b98:	4619      	mov	r1, r3
 8000b9a:	484d      	ldr	r0, [pc, #308]	; (8000cd0 <system_callback+0x160>)
 8000b9c:	f7ff fcc9 	bl	8000532 <add_idle_slave>
		uint8_t slave_recieving_number = stack_peak(&sheduler.idle_slaves_stack);
 8000ba0:	484e      	ldr	r0, [pc, #312]	; (8000cdc <system_callback+0x16c>)
 8000ba2:	f7ff fe19 	bl	80007d8 <stack_peak>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	757b      	strb	r3, [r7, #21]
		uint8_t operation_id = priority_queue_peak(&sheduler.operations);
 8000baa:	484d      	ldr	r0, [pc, #308]	; (8000ce0 <system_callback+0x170>)
 8000bac:	f7ff fc00 	bl	80003b0 <priority_queue_peak>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	753b      	strb	r3, [r7, #20]
		uint8_t data[8];
		data[0] = sheduler.operation_blocks[operation_id].operation_ID;
 8000bb4:	7d3a      	ldrb	r2, [r7, #20]
 8000bb6:	4946      	ldr	r1, [pc, #280]	; (8000cd0 <system_callback+0x160>)
 8000bb8:	4613      	mov	r3, r2
 8000bba:	005b      	lsls	r3, r3, #1
 8000bbc:	4413      	add	r3, r2
 8000bbe:	005b      	lsls	r3, r3, #1
 8000bc0:	440b      	add	r3, r1
 8000bc2:	3308      	adds	r3, #8
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	733b      	strb	r3, [r7, #12]
		data[1] = (uint8_t)(sheduler.operation_blocks[operation_id].operation_length >> 8);
 8000bc8:	7d3a      	ldrb	r2, [r7, #20]
 8000bca:	4941      	ldr	r1, [pc, #260]	; (8000cd0 <system_callback+0x160>)
 8000bcc:	4613      	mov	r3, r2
 8000bce:	005b      	lsls	r3, r3, #1
 8000bd0:	4413      	add	r3, r2
 8000bd2:	005b      	lsls	r3, r3, #1
 8000bd4:	440b      	add	r3, r1
 8000bd6:	330a      	adds	r3, #10
 8000bd8:	881b      	ldrh	r3, [r3, #0]
 8000bda:	0a1b      	lsrs	r3, r3, #8
 8000bdc:	b29b      	uxth	r3, r3
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	737b      	strb	r3, [r7, #13]
		data[2] = (uint8_t)(sheduler.operation_blocks[operation_id].operation_length & 0xFF);
 8000be2:	7d3a      	ldrb	r2, [r7, #20]
 8000be4:	493a      	ldr	r1, [pc, #232]	; (8000cd0 <system_callback+0x160>)
 8000be6:	4613      	mov	r3, r2
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	4413      	add	r3, r2
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	440b      	add	r3, r1
 8000bf0:	330a      	adds	r3, #10
 8000bf2:	881b      	ldrh	r3, [r3, #0]
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	73bb      	strb	r3, [r7, #14]
		// set state to waiting ack then send to ensure interrupt works
		sheduler.test++;
 8000bf8:	4b35      	ldr	r3, [pc, #212]	; (8000cd0 <system_callback+0x160>)
 8000bfa:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8000bfe:	3301      	adds	r3, #1
 8000c00:	b2da      	uxtb	r2, r3
 8000c02:	4b33      	ldr	r3, [pc, #204]	; (8000cd0 <system_callback+0x160>)
 8000c04:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
		Can_Send(&hcan, sheduler.slave_blocks[slave_recieving_number].slave_ID, 3, data, &Can_TxMailBox[0]);
 8000c08:	7d7b      	ldrb	r3, [r7, #21]
 8000c0a:	4a31      	ldr	r2, [pc, #196]	; (8000cd0 <system_callback+0x160>)
 8000c0c:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 8000c10:	f107 030c 	add.w	r3, r7, #12
 8000c14:	4a33      	ldr	r2, [pc, #204]	; (8000ce4 <system_callback+0x174>)
 8000c16:	9200      	str	r2, [sp, #0]
 8000c18:	2203      	movs	r2, #3
 8000c1a:	4833      	ldr	r0, [pc, #204]	; (8000ce8 <system_callback+0x178>)
 8000c1c:	f7ff fb0a 	bl	8000234 <Can_Send>
 8000c20:	e052      	b.n	8000cc8 <system_callback+0x158>
		return;
	}
	if(sheduler.test == 1){
 8000c22:	4b2b      	ldr	r3, [pc, #172]	; (8000cd0 <system_callback+0x160>)
 8000c24:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8000c28:	2b01      	cmp	r3, #1
 8000c2a:	d139      	bne.n	8000ca0 <system_callback+0x130>
//		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
		uint8_t data[8];
		data[0] = ROM_SIGNAL;
 8000c2c:	2340      	movs	r3, #64	; 0x40
 8000c2e:	713b      	strb	r3, [r7, #4]
		uint8_t slave_recieving_number = stack_peak(&sheduler.idle_slaves_stack);
 8000c30:	482a      	ldr	r0, [pc, #168]	; (8000cdc <system_callback+0x16c>)
 8000c32:	f7ff fdd1 	bl	80007d8 <stack_peak>
 8000c36:	4603      	mov	r3, r0
 8000c38:	75fb      	strb	r3, [r7, #23]
		uint8_t operation_id = priority_queue_peak(&sheduler.operations);
 8000c3a:	4829      	ldr	r0, [pc, #164]	; (8000ce0 <system_callback+0x170>)
 8000c3c:	f7ff fbb8 	bl	80003b0 <priority_queue_peak>
 8000c40:	4603      	mov	r3, r0
 8000c42:	75bb      	strb	r3, [r7, #22]
		give_slave_opcode(&sheduler, sheduler.operation_blocks[operation_id], slave_recieving_number);
 8000c44:	7dba      	ldrb	r2, [r7, #22]
 8000c46:	7df9      	ldrb	r1, [r7, #23]
 8000c48:	4821      	ldr	r0, [pc, #132]	; (8000cd0 <system_callback+0x160>)
 8000c4a:	4613      	mov	r3, r2
 8000c4c:	005b      	lsls	r3, r3, #1
 8000c4e:	4413      	add	r3, r2
 8000c50:	005b      	lsls	r3, r3, #1
 8000c52:	4403      	add	r3, r0
 8000c54:	3308      	adds	r3, #8
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	4610      	mov	r0, r2
 8000c5a:	889b      	ldrh	r3, [r3, #4]
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	f363 020f 	bfi	r2, r3, #0, #16
 8000c62:	460b      	mov	r3, r1
 8000c64:	4601      	mov	r1, r0
 8000c66:	481a      	ldr	r0, [pc, #104]	; (8000cd0 <system_callback+0x160>)
 8000c68:	f7ff fce3 	bl	8000632 <give_slave_opcode>
		give_slave_access_to_ROM(&sheduler);
 8000c6c:	4818      	ldr	r0, [pc, #96]	; (8000cd0 <system_callback+0x160>)
 8000c6e:	f7ff fd63 	bl	8000738 <give_slave_access_to_ROM>
		Can_Send(&hcan, sheduler.slave_blocks[sheduler.current_slave_in_ROM].slave_ID, 1, data, &Can_TxMailBox[0]);
 8000c72:	4b17      	ldr	r3, [pc, #92]	; (8000cd0 <system_callback+0x160>)
 8000c74:	f893 31db 	ldrb.w	r3, [r3, #475]	; 0x1db
 8000c78:	461a      	mov	r2, r3
 8000c7a:	4b15      	ldr	r3, [pc, #84]	; (8000cd0 <system_callback+0x160>)
 8000c7c:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
 8000c80:	1d3b      	adds	r3, r7, #4
 8000c82:	4a18      	ldr	r2, [pc, #96]	; (8000ce4 <system_callback+0x174>)
 8000c84:	9200      	str	r2, [sp, #0]
 8000c86:	2201      	movs	r2, #1
 8000c88:	4817      	ldr	r0, [pc, #92]	; (8000ce8 <system_callback+0x178>)
 8000c8a:	f7ff fad3 	bl	8000234 <Can_Send>
		sheduler.test++;
 8000c8e:	4b10      	ldr	r3, [pc, #64]	; (8000cd0 <system_callback+0x160>)
 8000c90:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8000c94:	3301      	adds	r3, #1
 8000c96:	b2da      	uxtb	r2, r3
 8000c98:	4b0d      	ldr	r3, [pc, #52]	; (8000cd0 <system_callback+0x160>)
 8000c9a:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8000c9e:	e013      	b.n	8000cc8 <system_callback+0x158>
		return;
	}
	if(sheduler.test == 2){
 8000ca0:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <system_callback+0x160>)
 8000ca2:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8000ca6:	2b02      	cmp	r3, #2
 8000ca8:	d10e      	bne.n	8000cc8 <system_callback+0x158>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000caa:	2200      	movs	r2, #0
 8000cac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cb0:	480e      	ldr	r0, [pc, #56]	; (8000cec <system_callback+0x17c>)
 8000cb2:	f001 fa47 	bl	8002144 <HAL_GPIO_WritePin>
		sheduler.test++;
 8000cb6:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <system_callback+0x160>)
 8000cb8:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	b2da      	uxtb	r2, r3
 8000cc0:	4b03      	ldr	r3, [pc, #12]	; (8000cd0 <system_callback+0x160>)
 8000cc2:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
		return;
 8000cc6:	bf00      	nop
//	}
//	if(sheduler.test == 5){
////		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
//		return;
//	}
}
 8000cc8:	3718      	adds	r7, #24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	200000e4 	.word	0x200000e4
 8000cd4:	40010c00 	.word	0x40010c00
 8000cd8:	20000040 	.word	0x20000040
 8000cdc:	2000026c 	.word	0x2000026c
 8000ce0:	2000029e 	.word	0x2000029e
 8000ce4:	20000064 	.word	0x20000064
 8000ce8:	20000074 	.word	0x20000074
 8000cec:	40011000 	.word	0x40011000

08000cf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cf4:	b672      	cpsid	i
}
 8000cf6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <Error_Handler+0x8>
	...

08000cfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d02:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <HAL_MspInit+0x40>)
 8000d04:	699b      	ldr	r3, [r3, #24]
 8000d06:	4a0d      	ldr	r2, [pc, #52]	; (8000d3c <HAL_MspInit+0x40>)
 8000d08:	f043 0301 	orr.w	r3, r3, #1
 8000d0c:	6193      	str	r3, [r2, #24]
 8000d0e:	4b0b      	ldr	r3, [pc, #44]	; (8000d3c <HAL_MspInit+0x40>)
 8000d10:	699b      	ldr	r3, [r3, #24]
 8000d12:	f003 0301 	and.w	r3, r3, #1
 8000d16:	607b      	str	r3, [r7, #4]
 8000d18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d1a:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <HAL_MspInit+0x40>)
 8000d1c:	69db      	ldr	r3, [r3, #28]
 8000d1e:	4a07      	ldr	r2, [pc, #28]	; (8000d3c <HAL_MspInit+0x40>)
 8000d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d24:	61d3      	str	r3, [r2, #28]
 8000d26:	4b05      	ldr	r3, [pc, #20]	; (8000d3c <HAL_MspInit+0x40>)
 8000d28:	69db      	ldr	r3, [r3, #28]
 8000d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d2e:	603b      	str	r3, [r7, #0]
 8000d30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d32:	bf00      	nop
 8000d34:	370c      	adds	r7, #12
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bc80      	pop	{r7}
 8000d3a:	4770      	bx	lr
 8000d3c:	40021000 	.word	0x40021000

08000d40 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b088      	sub	sp, #32
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d48:	f107 0310 	add.w	r3, r7, #16
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a20      	ldr	r2, [pc, #128]	; (8000ddc <HAL_CAN_MspInit+0x9c>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d139      	bne.n	8000dd4 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000d60:	4b1f      	ldr	r3, [pc, #124]	; (8000de0 <HAL_CAN_MspInit+0xa0>)
 8000d62:	69db      	ldr	r3, [r3, #28]
 8000d64:	4a1e      	ldr	r2, [pc, #120]	; (8000de0 <HAL_CAN_MspInit+0xa0>)
 8000d66:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d6a:	61d3      	str	r3, [r2, #28]
 8000d6c:	4b1c      	ldr	r3, [pc, #112]	; (8000de0 <HAL_CAN_MspInit+0xa0>)
 8000d6e:	69db      	ldr	r3, [r3, #28]
 8000d70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d78:	4b19      	ldr	r3, [pc, #100]	; (8000de0 <HAL_CAN_MspInit+0xa0>)
 8000d7a:	699b      	ldr	r3, [r3, #24]
 8000d7c:	4a18      	ldr	r2, [pc, #96]	; (8000de0 <HAL_CAN_MspInit+0xa0>)
 8000d7e:	f043 0304 	orr.w	r3, r3, #4
 8000d82:	6193      	str	r3, [r2, #24]
 8000d84:	4b16      	ldr	r3, [pc, #88]	; (8000de0 <HAL_CAN_MspInit+0xa0>)
 8000d86:	699b      	ldr	r3, [r3, #24]
 8000d88:	f003 0304 	and.w	r3, r3, #4
 8000d8c:	60bb      	str	r3, [r7, #8]
 8000d8e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000d90:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d94:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d96:	2300      	movs	r3, #0
 8000d98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9e:	f107 0310 	add.w	r3, r7, #16
 8000da2:	4619      	mov	r1, r3
 8000da4:	480f      	ldr	r0, [pc, #60]	; (8000de4 <HAL_CAN_MspInit+0xa4>)
 8000da6:	f001 f849 	bl	8001e3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000daa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db0:	2302      	movs	r3, #2
 8000db2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000db4:	2303      	movs	r3, #3
 8000db6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db8:	f107 0310 	add.w	r3, r7, #16
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4809      	ldr	r0, [pc, #36]	; (8000de4 <HAL_CAN_MspInit+0xa4>)
 8000dc0:	f001 f83c 	bl	8001e3c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	2014      	movs	r0, #20
 8000dca:	f001 f800 	bl	8001dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000dce:	2014      	movs	r0, #20
 8000dd0:	f001 f819 	bl	8001e06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000dd4:	bf00      	nop
 8000dd6:	3720      	adds	r7, #32
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40006400 	.word	0x40006400
 8000de0:	40021000 	.word	0x40021000
 8000de4:	40010800 	.word	0x40010800

08000de8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b085      	sub	sp, #20
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000df8:	d10b      	bne.n	8000e12 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dfa:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <HAL_TIM_Base_MspInit+0x34>)
 8000dfc:	69db      	ldr	r3, [r3, #28]
 8000dfe:	4a07      	ldr	r2, [pc, #28]	; (8000e1c <HAL_TIM_Base_MspInit+0x34>)
 8000e00:	f043 0301 	orr.w	r3, r3, #1
 8000e04:	61d3      	str	r3, [r2, #28]
 8000e06:	4b05      	ldr	r3, [pc, #20]	; (8000e1c <HAL_TIM_Base_MspInit+0x34>)
 8000e08:	69db      	ldr	r3, [r3, #28]
 8000e0a:	f003 0301 	and.w	r3, r3, #1
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e12:	bf00      	nop
 8000e14:	3714      	adds	r7, #20
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bc80      	pop	{r7}
 8000e1a:	4770      	bx	lr
 8000e1c:	40021000 	.word	0x40021000

08000e20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e24:	e7fe      	b.n	8000e24 <NMI_Handler+0x4>

08000e26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e26:	b480      	push	{r7}
 8000e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e2a:	e7fe      	b.n	8000e2a <HardFault_Handler+0x4>

08000e2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e30:	e7fe      	b.n	8000e30 <MemManage_Handler+0x4>

08000e32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e32:	b480      	push	{r7}
 8000e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e36:	e7fe      	b.n	8000e36 <BusFault_Handler+0x4>

08000e38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e3c:	e7fe      	b.n	8000e3c <UsageFault_Handler+0x4>

08000e3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bc80      	pop	{r7}
 8000e48:	4770      	bx	lr

08000e4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bc80      	pop	{r7}
 8000e54:	4770      	bx	lr

08000e56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e56:	b480      	push	{r7}
 8000e58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bc80      	pop	{r7}
 8000e60:	4770      	bx	lr

08000e62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e66:	f000 f87f 	bl	8000f68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
	...

08000e70 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000e74:	4802      	ldr	r0, [pc, #8]	; (8000e80 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000e76:	f000 fcb0 	bl	80017da <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20000074 	.word	0x20000074

08000e84 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bc80      	pop	{r7}
 8000e8e:	4770      	bx	lr

08000e90 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e90:	f7ff fff8 	bl	8000e84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e94:	480b      	ldr	r0, [pc, #44]	; (8000ec4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e96:	490c      	ldr	r1, [pc, #48]	; (8000ec8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e98:	4a0c      	ldr	r2, [pc, #48]	; (8000ecc <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e9c:	e002      	b.n	8000ea4 <LoopCopyDataInit>

08000e9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ea0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ea2:	3304      	adds	r3, #4

08000ea4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ea6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea8:	d3f9      	bcc.n	8000e9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eaa:	4a09      	ldr	r2, [pc, #36]	; (8000ed0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000eac:	4c09      	ldr	r4, [pc, #36]	; (8000ed4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000eae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eb0:	e001      	b.n	8000eb6 <LoopFillZerobss>

08000eb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb4:	3204      	adds	r2, #4

08000eb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb8:	d3fb      	bcc.n	8000eb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eba:	f001 ffad 	bl	8002e18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ebe:	f7ff fc9b 	bl	80007f8 <main>
  bx lr
 8000ec2:	4770      	bx	lr
  ldr r0, =_sdata
 8000ec4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ec8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ecc:	08002ea4 	.word	0x08002ea4
  ldr r2, =_sbss
 8000ed0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ed4:	200002d4 	.word	0x200002d4

08000ed8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ed8:	e7fe      	b.n	8000ed8 <ADC1_2_IRQHandler>
	...

08000edc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ee0:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <HAL_Init+0x28>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a07      	ldr	r2, [pc, #28]	; (8000f04 <HAL_Init+0x28>)
 8000ee6:	f043 0310 	orr.w	r3, r3, #16
 8000eea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eec:	2003      	movs	r0, #3
 8000eee:	f000 ff63 	bl	8001db8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ef2:	200f      	movs	r0, #15
 8000ef4:	f000 f808 	bl	8000f08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ef8:	f7ff ff00 	bl	8000cfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000efc:	2300      	movs	r3, #0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40022000 	.word	0x40022000

08000f08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f10:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <HAL_InitTick+0x54>)
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	4b12      	ldr	r3, [pc, #72]	; (8000f60 <HAL_InitTick+0x58>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	4619      	mov	r1, r3
 8000f1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f26:	4618      	mov	r0, r3
 8000f28:	f000 ff7b 	bl	8001e22 <HAL_SYSTICK_Config>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	e00e      	b.n	8000f54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2b0f      	cmp	r3, #15
 8000f3a:	d80a      	bhi.n	8000f52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	6879      	ldr	r1, [r7, #4]
 8000f40:	f04f 30ff 	mov.w	r0, #4294967295
 8000f44:	f000 ff43 	bl	8001dce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f48:	4a06      	ldr	r2, [pc, #24]	; (8000f64 <HAL_InitTick+0x5c>)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	e000      	b.n	8000f54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	20000000 	.word	0x20000000
 8000f60:	20000008 	.word	0x20000008
 8000f64:	20000004 	.word	0x20000004

08000f68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f6c:	4b05      	ldr	r3, [pc, #20]	; (8000f84 <HAL_IncTick+0x1c>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	461a      	mov	r2, r3
 8000f72:	4b05      	ldr	r3, [pc, #20]	; (8000f88 <HAL_IncTick+0x20>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4413      	add	r3, r2
 8000f78:	4a03      	ldr	r2, [pc, #12]	; (8000f88 <HAL_IncTick+0x20>)
 8000f7a:	6013      	str	r3, [r2, #0]
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bc80      	pop	{r7}
 8000f82:	4770      	bx	lr
 8000f84:	20000008 	.word	0x20000008
 8000f88:	200002d0 	.word	0x200002d0

08000f8c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f90:	4b02      	ldr	r3, [pc, #8]	; (8000f9c <HAL_GetTick+0x10>)
 8000f92:	681b      	ldr	r3, [r3, #0]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bc80      	pop	{r7}
 8000f9a:	4770      	bx	lr
 8000f9c:	200002d0 	.word	0x200002d0

08000fa0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d101      	bne.n	8000fb2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e0ed      	b.n	800118e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d102      	bne.n	8000fc4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f7ff febe 	bl	8000d40 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f042 0201 	orr.w	r2, r2, #1
 8000fd2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000fd4:	f7ff ffda 	bl	8000f8c <HAL_GetTick>
 8000fd8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000fda:	e012      	b.n	8001002 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000fdc:	f7ff ffd6 	bl	8000f8c <HAL_GetTick>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	2b0a      	cmp	r3, #10
 8000fe8:	d90b      	bls.n	8001002 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2205      	movs	r2, #5
 8000ffa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	e0c5      	b.n	800118e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f003 0301 	and.w	r3, r3, #1
 800100c:	2b00      	cmp	r3, #0
 800100e:	d0e5      	beq.n	8000fdc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f022 0202 	bic.w	r2, r2, #2
 800101e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001020:	f7ff ffb4 	bl	8000f8c <HAL_GetTick>
 8001024:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001026:	e012      	b.n	800104e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001028:	f7ff ffb0 	bl	8000f8c <HAL_GetTick>
 800102c:	4602      	mov	r2, r0
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	2b0a      	cmp	r3, #10
 8001034:	d90b      	bls.n	800104e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800103a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2205      	movs	r2, #5
 8001046:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	e09f      	b.n	800118e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f003 0302 	and.w	r3, r3, #2
 8001058:	2b00      	cmp	r3, #0
 800105a:	d1e5      	bne.n	8001028 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	7e1b      	ldrb	r3, [r3, #24]
 8001060:	2b01      	cmp	r3, #1
 8001062:	d108      	bne.n	8001076 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	e007      	b.n	8001086 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001084:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	7e5b      	ldrb	r3, [r3, #25]
 800108a:	2b01      	cmp	r3, #1
 800108c:	d108      	bne.n	80010a0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	e007      	b.n	80010b0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80010ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	7e9b      	ldrb	r3, [r3, #26]
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d108      	bne.n	80010ca <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f042 0220 	orr.w	r2, r2, #32
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	e007      	b.n	80010da <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f022 0220 	bic.w	r2, r2, #32
 80010d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	7edb      	ldrb	r3, [r3, #27]
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d108      	bne.n	80010f4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f022 0210 	bic.w	r2, r2, #16
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	e007      	b.n	8001104 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f042 0210 	orr.w	r2, r2, #16
 8001102:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	7f1b      	ldrb	r3, [r3, #28]
 8001108:	2b01      	cmp	r3, #1
 800110a:	d108      	bne.n	800111e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f042 0208 	orr.w	r2, r2, #8
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	e007      	b.n	800112e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f022 0208 	bic.w	r2, r2, #8
 800112c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	7f5b      	ldrb	r3, [r3, #29]
 8001132:	2b01      	cmp	r3, #1
 8001134:	d108      	bne.n	8001148 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f042 0204 	orr.w	r2, r2, #4
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	e007      	b.n	8001158 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f022 0204 	bic.w	r2, r2, #4
 8001156:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	689a      	ldr	r2, [r3, #8]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	431a      	orrs	r2, r3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	691b      	ldr	r3, [r3, #16]
 8001166:	431a      	orrs	r2, r3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	695b      	ldr	r3, [r3, #20]
 800116c:	ea42 0103 	orr.w	r1, r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	1e5a      	subs	r2, r3, #1
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	430a      	orrs	r2, r1
 800117c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2200      	movs	r2, #0
 8001182:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2201      	movs	r2, #1
 8001188:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800118c:	2300      	movs	r3, #0
}
 800118e:	4618      	mov	r0, r3
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001196:	b480      	push	{r7}
 8001198:	b087      	sub	sp, #28
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
 800119e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011ac:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80011ae:	7cfb      	ldrb	r3, [r7, #19]
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d003      	beq.n	80011bc <HAL_CAN_ConfigFilter+0x26>
 80011b4:	7cfb      	ldrb	r3, [r7, #19]
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	f040 80aa 	bne.w	8001310 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80011c2:	f043 0201 	orr.w	r2, r3, #1
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	695b      	ldr	r3, [r3, #20]
 80011d0:	f003 031f 	and.w	r3, r3, #31
 80011d4:	2201      	movs	r2, #1
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	43db      	mvns	r3, r3
 80011e6:	401a      	ands	r2, r3
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	69db      	ldr	r3, [r3, #28]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d123      	bne.n	800123e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	43db      	mvns	r3, r3
 8001200:	401a      	ands	r2, r3
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001214:	683a      	ldr	r2, [r7, #0]
 8001216:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001218:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	3248      	adds	r2, #72	; 0x48
 800121e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001232:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001234:	6979      	ldr	r1, [r7, #20]
 8001236:	3348      	adds	r3, #72	; 0x48
 8001238:	00db      	lsls	r3, r3, #3
 800123a:	440b      	add	r3, r1
 800123c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	69db      	ldr	r3, [r3, #28]
 8001242:	2b01      	cmp	r3, #1
 8001244:	d122      	bne.n	800128c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	431a      	orrs	r2, r3
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001262:	683a      	ldr	r2, [r7, #0]
 8001264:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001266:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	3248      	adds	r2, #72	; 0x48
 800126c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	68db      	ldr	r3, [r3, #12]
 800127a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001280:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001282:	6979      	ldr	r1, [r7, #20]
 8001284:	3348      	adds	r3, #72	; 0x48
 8001286:	00db      	lsls	r3, r3, #3
 8001288:	440b      	add	r3, r1
 800128a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	699b      	ldr	r3, [r3, #24]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d109      	bne.n	80012a8 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	43db      	mvns	r3, r3
 800129e:	401a      	ands	r2, r3
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80012a6:	e007      	b.n	80012b8 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	431a      	orrs	r2, r3
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	691b      	ldr	r3, [r3, #16]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d109      	bne.n	80012d4 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	43db      	mvns	r3, r3
 80012ca:	401a      	ands	r2, r3
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80012d2:	e007      	b.n	80012e4 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	431a      	orrs	r2, r3
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	6a1b      	ldr	r3, [r3, #32]
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d107      	bne.n	80012fc <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	431a      	orrs	r2, r3
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001302:	f023 0201 	bic.w	r2, r3, #1
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800130c:	2300      	movs	r3, #0
 800130e:	e006      	b.n	800131e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001314:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800131c:	2301      	movs	r3, #1
  }
}
 800131e:	4618      	mov	r0, r3
 8001320:	371c      	adds	r7, #28
 8001322:	46bd      	mov	sp, r7
 8001324:	bc80      	pop	{r7}
 8001326:	4770      	bx	lr

08001328 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001336:	b2db      	uxtb	r3, r3
 8001338:	2b01      	cmp	r3, #1
 800133a:	d12e      	bne.n	800139a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2202      	movs	r2, #2
 8001340:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f022 0201 	bic.w	r2, r2, #1
 8001352:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001354:	f7ff fe1a 	bl	8000f8c <HAL_GetTick>
 8001358:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800135a:	e012      	b.n	8001382 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800135c:	f7ff fe16 	bl	8000f8c <HAL_GetTick>
 8001360:	4602      	mov	r2, r0
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	2b0a      	cmp	r3, #10
 8001368:	d90b      	bls.n	8001382 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800136e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2205      	movs	r2, #5
 800137a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e012      	b.n	80013a8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f003 0301 	and.w	r3, r3, #1
 800138c:	2b00      	cmp	r3, #0
 800138e:	d1e5      	bne.n	800135c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2200      	movs	r2, #0
 8001394:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001396:	2300      	movs	r3, #0
 8001398:	e006      	b.n	80013a8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800139e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
  }
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3710      	adds	r7, #16
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b089      	sub	sp, #36	; 0x24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	60b9      	str	r1, [r7, #8]
 80013ba:	607a      	str	r2, [r7, #4]
 80013bc:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013c4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80013ce:	7ffb      	ldrb	r3, [r7, #31]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d003      	beq.n	80013dc <HAL_CAN_AddTxMessage+0x2c>
 80013d4:	7ffb      	ldrb	r3, [r7, #31]
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	f040 80ad 	bne.w	8001536 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d10a      	bne.n	80013fc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d105      	bne.n	80013fc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	f000 8095 	beq.w	8001526 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	0e1b      	lsrs	r3, r3, #24
 8001400:	f003 0303 	and.w	r3, r3, #3
 8001404:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001406:	2201      	movs	r2, #1
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	409a      	lsls	r2, r3
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d10d      	bne.n	8001434 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001422:	68f9      	ldr	r1, [r7, #12]
 8001424:	6809      	ldr	r1, [r1, #0]
 8001426:	431a      	orrs	r2, r3
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	3318      	adds	r3, #24
 800142c:	011b      	lsls	r3, r3, #4
 800142e:	440b      	add	r3, r1
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	e00f      	b.n	8001454 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800143e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001444:	68f9      	ldr	r1, [r7, #12]
 8001446:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001448:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	3318      	adds	r3, #24
 800144e:	011b      	lsls	r3, r3, #4
 8001450:	440b      	add	r3, r1
 8001452:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	6819      	ldr	r1, [r3, #0]
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	691a      	ldr	r2, [r3, #16]
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	3318      	adds	r3, #24
 8001460:	011b      	lsls	r3, r3, #4
 8001462:	440b      	add	r3, r1
 8001464:	3304      	adds	r3, #4
 8001466:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	7d1b      	ldrb	r3, [r3, #20]
 800146c:	2b01      	cmp	r3, #1
 800146e:	d111      	bne.n	8001494 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	3318      	adds	r3, #24
 8001478:	011b      	lsls	r3, r3, #4
 800147a:	4413      	add	r3, r2
 800147c:	3304      	adds	r3, #4
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	68fa      	ldr	r2, [r7, #12]
 8001482:	6811      	ldr	r1, [r2, #0]
 8001484:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	3318      	adds	r3, #24
 800148c:	011b      	lsls	r3, r3, #4
 800148e:	440b      	add	r3, r1
 8001490:	3304      	adds	r3, #4
 8001492:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	3307      	adds	r3, #7
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	061a      	lsls	r2, r3, #24
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	3306      	adds	r3, #6
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	041b      	lsls	r3, r3, #16
 80014a4:	431a      	orrs	r2, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	3305      	adds	r3, #5
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	021b      	lsls	r3, r3, #8
 80014ae:	4313      	orrs	r3, r2
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	3204      	adds	r2, #4
 80014b4:	7812      	ldrb	r2, [r2, #0]
 80014b6:	4610      	mov	r0, r2
 80014b8:	68fa      	ldr	r2, [r7, #12]
 80014ba:	6811      	ldr	r1, [r2, #0]
 80014bc:	ea43 0200 	orr.w	r2, r3, r0
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	011b      	lsls	r3, r3, #4
 80014c4:	440b      	add	r3, r1
 80014c6:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80014ca:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	3303      	adds	r3, #3
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	061a      	lsls	r2, r3, #24
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	3302      	adds	r3, #2
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	041b      	lsls	r3, r3, #16
 80014dc:	431a      	orrs	r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	3301      	adds	r3, #1
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	021b      	lsls	r3, r3, #8
 80014e6:	4313      	orrs	r3, r2
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	7812      	ldrb	r2, [r2, #0]
 80014ec:	4610      	mov	r0, r2
 80014ee:	68fa      	ldr	r2, [r7, #12]
 80014f0:	6811      	ldr	r1, [r2, #0]
 80014f2:	ea43 0200 	orr.w	r2, r3, r0
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	011b      	lsls	r3, r3, #4
 80014fa:	440b      	add	r3, r1
 80014fc:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001500:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	3318      	adds	r3, #24
 800150a:	011b      	lsls	r3, r3, #4
 800150c:	4413      	add	r3, r2
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	68fa      	ldr	r2, [r7, #12]
 8001512:	6811      	ldr	r1, [r2, #0]
 8001514:	f043 0201 	orr.w	r2, r3, #1
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	3318      	adds	r3, #24
 800151c:	011b      	lsls	r3, r3, #4
 800151e:	440b      	add	r3, r1
 8001520:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001522:	2300      	movs	r3, #0
 8001524:	e00e      	b.n	8001544 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800152a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e006      	b.n	8001544 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800153a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
  }
}
 8001544:	4618      	mov	r0, r3
 8001546:	3724      	adds	r7, #36	; 0x24
 8001548:	46bd      	mov	sp, r7
 800154a:	bc80      	pop	{r7}
 800154c:	4770      	bx	lr

0800154e <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800154e:	b480      	push	{r7}
 8001550:	b087      	sub	sp, #28
 8001552:	af00      	add	r7, sp, #0
 8001554:	60f8      	str	r0, [r7, #12]
 8001556:	60b9      	str	r1, [r7, #8]
 8001558:	607a      	str	r2, [r7, #4]
 800155a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001562:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001564:	7dfb      	ldrb	r3, [r7, #23]
 8001566:	2b01      	cmp	r3, #1
 8001568:	d003      	beq.n	8001572 <HAL_CAN_GetRxMessage+0x24>
 800156a:	7dfb      	ldrb	r3, [r7, #23]
 800156c:	2b02      	cmp	r3, #2
 800156e:	f040 8103 	bne.w	8001778 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d10e      	bne.n	8001596 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	f003 0303 	and.w	r3, r3, #3
 8001582:	2b00      	cmp	r3, #0
 8001584:	d116      	bne.n	80015b4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800158a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e0f7      	b.n	8001786 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	691b      	ldr	r3, [r3, #16]
 800159c:	f003 0303 	and.w	r3, r3, #3
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d107      	bne.n	80015b4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e0e8      	b.n	8001786 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	331b      	adds	r3, #27
 80015bc:	011b      	lsls	r3, r3, #4
 80015be:	4413      	add	r3, r2
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0204 	and.w	r2, r3, #4
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d10c      	bne.n	80015ec <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	331b      	adds	r3, #27
 80015da:	011b      	lsls	r3, r3, #4
 80015dc:	4413      	add	r3, r2
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	0d5b      	lsrs	r3, r3, #21
 80015e2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	e00b      	b.n	8001604 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	331b      	adds	r3, #27
 80015f4:	011b      	lsls	r3, r3, #4
 80015f6:	4413      	add	r3, r2
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	08db      	lsrs	r3, r3, #3
 80015fc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	331b      	adds	r3, #27
 800160c:	011b      	lsls	r3, r3, #4
 800160e:	4413      	add	r3, r2
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0202 	and.w	r2, r3, #2
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	331b      	adds	r3, #27
 8001622:	011b      	lsls	r3, r3, #4
 8001624:	4413      	add	r3, r2
 8001626:	3304      	adds	r3, #4
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0308 	and.w	r3, r3, #8
 800162e:	2b00      	cmp	r3, #0
 8001630:	d003      	beq.n	800163a <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2208      	movs	r2, #8
 8001636:	611a      	str	r2, [r3, #16]
 8001638:	e00b      	b.n	8001652 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	331b      	adds	r3, #27
 8001642:	011b      	lsls	r3, r3, #4
 8001644:	4413      	add	r3, r2
 8001646:	3304      	adds	r3, #4
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 020f 	and.w	r2, r3, #15
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	331b      	adds	r3, #27
 800165a:	011b      	lsls	r3, r3, #4
 800165c:	4413      	add	r3, r2
 800165e:	3304      	adds	r3, #4
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	0a1b      	lsrs	r3, r3, #8
 8001664:	b2da      	uxtb	r2, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	331b      	adds	r3, #27
 8001672:	011b      	lsls	r3, r3, #4
 8001674:	4413      	add	r3, r2
 8001676:	3304      	adds	r3, #4
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	0c1b      	lsrs	r3, r3, #16
 800167c:	b29a      	uxth	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	011b      	lsls	r3, r3, #4
 800168a:	4413      	add	r3, r2
 800168c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	b2da      	uxtb	r2, r3
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	011b      	lsls	r3, r3, #4
 80016a0:	4413      	add	r3, r2
 80016a2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	0a1a      	lsrs	r2, r3, #8
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	3301      	adds	r3, #1
 80016ae:	b2d2      	uxtb	r2, r2
 80016b0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	011b      	lsls	r3, r3, #4
 80016ba:	4413      	add	r3, r2
 80016bc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	0c1a      	lsrs	r2, r3, #16
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	3302      	adds	r3, #2
 80016c8:	b2d2      	uxtb	r2, r2
 80016ca:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	011b      	lsls	r3, r3, #4
 80016d4:	4413      	add	r3, r2
 80016d6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	0e1a      	lsrs	r2, r3, #24
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	3303      	adds	r3, #3
 80016e2:	b2d2      	uxtb	r2, r2
 80016e4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	011b      	lsls	r3, r3, #4
 80016ee:	4413      	add	r3, r2
 80016f0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	3304      	adds	r3, #4
 80016fa:	b2d2      	uxtb	r2, r2
 80016fc:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	011b      	lsls	r3, r3, #4
 8001706:	4413      	add	r3, r2
 8001708:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	0a1a      	lsrs	r2, r3, #8
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	3305      	adds	r3, #5
 8001714:	b2d2      	uxtb	r2, r2
 8001716:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	011b      	lsls	r3, r3, #4
 8001720:	4413      	add	r3, r2
 8001722:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	0c1a      	lsrs	r2, r3, #16
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	3306      	adds	r3, #6
 800172e:	b2d2      	uxtb	r2, r2
 8001730:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	011b      	lsls	r3, r3, #4
 800173a:	4413      	add	r3, r2
 800173c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	0e1a      	lsrs	r2, r3, #24
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	3307      	adds	r3, #7
 8001748:	b2d2      	uxtb	r2, r2
 800174a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d108      	bne.n	8001764 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	68da      	ldr	r2, [r3, #12]
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f042 0220 	orr.w	r2, r2, #32
 8001760:	60da      	str	r2, [r3, #12]
 8001762:	e007      	b.n	8001774 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	691a      	ldr	r2, [r3, #16]
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f042 0220 	orr.w	r2, r2, #32
 8001772:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001774:	2300      	movs	r3, #0
 8001776:	e006      	b.n	8001786 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
  }
}
 8001786:	4618      	mov	r0, r3
 8001788:	371c      	adds	r7, #28
 800178a:	46bd      	mov	sp, r7
 800178c:	bc80      	pop	{r7}
 800178e:	4770      	bx	lr

08001790 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001790:	b480      	push	{r7}
 8001792:	b085      	sub	sp, #20
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017a0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80017a2:	7bfb      	ldrb	r3, [r7, #15]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d002      	beq.n	80017ae <HAL_CAN_ActivateNotification+0x1e>
 80017a8:	7bfb      	ldrb	r3, [r7, #15]
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d109      	bne.n	80017c2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	6959      	ldr	r1, [r3, #20]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	683a      	ldr	r2, [r7, #0]
 80017ba:	430a      	orrs	r2, r1
 80017bc:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80017be:	2300      	movs	r3, #0
 80017c0:	e006      	b.n	80017d0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
  }
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3714      	adds	r7, #20
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bc80      	pop	{r7}
 80017d8:	4770      	bx	lr

080017da <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	b08a      	sub	sp, #40	; 0x28
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80017e2:	2300      	movs	r3, #0
 80017e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	695b      	ldr	r3, [r3, #20]
 80017ec:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	691b      	ldr	r3, [r3, #16]
 800180c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	699b      	ldr	r3, [r3, #24]
 8001814:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001816:	6a3b      	ldr	r3, [r7, #32]
 8001818:	f003 0301 	and.w	r3, r3, #1
 800181c:	2b00      	cmp	r3, #0
 800181e:	d07c      	beq.n	800191a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	2b00      	cmp	r3, #0
 8001828:	d023      	beq.n	8001872 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2201      	movs	r2, #1
 8001830:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	f003 0302 	and.w	r3, r3, #2
 8001838:	2b00      	cmp	r3, #0
 800183a:	d003      	beq.n	8001844 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f000 f983 	bl	8001b48 <HAL_CAN_TxMailbox0CompleteCallback>
 8001842:	e016      	b.n	8001872 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	f003 0304 	and.w	r3, r3, #4
 800184a:	2b00      	cmp	r3, #0
 800184c:	d004      	beq.n	8001858 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800184e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001850:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001854:	627b      	str	r3, [r7, #36]	; 0x24
 8001856:	e00c      	b.n	8001872 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	f003 0308 	and.w	r3, r3, #8
 800185e:	2b00      	cmp	r3, #0
 8001860:	d004      	beq.n	800186c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001864:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001868:	627b      	str	r3, [r7, #36]	; 0x24
 800186a:	e002      	b.n	8001872 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f000 f986 	bl	8001b7e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001878:	2b00      	cmp	r3, #0
 800187a:	d024      	beq.n	80018c6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001884:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800188c:	2b00      	cmp	r3, #0
 800188e:	d003      	beq.n	8001898 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f000 f962 	bl	8001b5a <HAL_CAN_TxMailbox1CompleteCallback>
 8001896:	e016      	b.n	80018c6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d004      	beq.n	80018ac <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80018a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018a8:	627b      	str	r3, [r7, #36]	; 0x24
 80018aa:	e00c      	b.n	80018c6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d004      	beq.n	80018c0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80018b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018bc:	627b      	str	r3, [r7, #36]	; 0x24
 80018be:	e002      	b.n	80018c6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f000 f965 	bl	8001b90 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d024      	beq.n	800191a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80018d8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d003      	beq.n	80018ec <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f000 f941 	bl	8001b6c <HAL_CAN_TxMailbox2CompleteCallback>
 80018ea:	e016      	b.n	800191a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d004      	beq.n	8001900 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80018f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018fc:	627b      	str	r3, [r7, #36]	; 0x24
 80018fe:	e00c      	b.n	800191a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d004      	beq.n	8001914 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800190a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001910:	627b      	str	r3, [r7, #36]	; 0x24
 8001912:	e002      	b.n	800191a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f000 f944 	bl	8001ba2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800191a:	6a3b      	ldr	r3, [r7, #32]
 800191c:	f003 0308 	and.w	r3, r3, #8
 8001920:	2b00      	cmp	r3, #0
 8001922:	d00c      	beq.n	800193e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	f003 0310 	and.w	r3, r3, #16
 800192a:	2b00      	cmp	r3, #0
 800192c:	d007      	beq.n	800193e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800192e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001930:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001934:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2210      	movs	r2, #16
 800193c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800193e:	6a3b      	ldr	r3, [r7, #32]
 8001940:	f003 0304 	and.w	r3, r3, #4
 8001944:	2b00      	cmp	r3, #0
 8001946:	d00b      	beq.n	8001960 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	f003 0308 	and.w	r3, r3, #8
 800194e:	2b00      	cmp	r3, #0
 8001950:	d006      	beq.n	8001960 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2208      	movs	r2, #8
 8001958:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f000 f92a 	bl	8001bb4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001960:	6a3b      	ldr	r3, [r7, #32]
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d009      	beq.n	800197e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	f003 0303 	and.w	r3, r3, #3
 8001974:	2b00      	cmp	r3, #0
 8001976:	d002      	beq.n	800197e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f7fe fc95 	bl	80002a8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800197e:	6a3b      	ldr	r3, [r7, #32]
 8001980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001984:	2b00      	cmp	r3, #0
 8001986:	d00c      	beq.n	80019a2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	f003 0310 	and.w	r3, r3, #16
 800198e:	2b00      	cmp	r3, #0
 8001990:	d007      	beq.n	80019a2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001994:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001998:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2210      	movs	r2, #16
 80019a0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80019a2:	6a3b      	ldr	r3, [r7, #32]
 80019a4:	f003 0320 	and.w	r3, r3, #32
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d00b      	beq.n	80019c4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	f003 0308 	and.w	r3, r3, #8
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d006      	beq.n	80019c4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2208      	movs	r2, #8
 80019bc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f000 f90a 	bl	8001bd8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80019c4:	6a3b      	ldr	r3, [r7, #32]
 80019c6:	f003 0310 	and.w	r3, r3, #16
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d009      	beq.n	80019e2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	691b      	ldr	r3, [r3, #16]
 80019d4:	f003 0303 	and.w	r3, r3, #3
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d002      	beq.n	80019e2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f000 f8f2 	bl	8001bc6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80019e2:	6a3b      	ldr	r3, [r7, #32]
 80019e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d00b      	beq.n	8001a04 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	f003 0310 	and.w	r3, r3, #16
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d006      	beq.n	8001a04 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2210      	movs	r2, #16
 80019fc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f000 f8f3 	bl	8001bea <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001a04:	6a3b      	ldr	r3, [r7, #32]
 8001a06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d00b      	beq.n	8001a26 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	f003 0308 	and.w	r3, r3, #8
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d006      	beq.n	8001a26 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2208      	movs	r2, #8
 8001a1e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f000 f8eb 	bl	8001bfc <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001a26:	6a3b      	ldr	r3, [r7, #32]
 8001a28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d07b      	beq.n	8001b28 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	f003 0304 	and.w	r3, r3, #4
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d072      	beq.n	8001b20 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001a3a:	6a3b      	ldr	r3, [r7, #32]
 8001a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d008      	beq.n	8001a56 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d003      	beq.n	8001a56 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a50:	f043 0301 	orr.w	r3, r3, #1
 8001a54:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001a56:	6a3b      	ldr	r3, [r7, #32]
 8001a58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d008      	beq.n	8001a72 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d003      	beq.n	8001a72 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6c:	f043 0302 	orr.w	r3, r3, #2
 8001a70:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001a72:	6a3b      	ldr	r3, [r7, #32]
 8001a74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d008      	beq.n	8001a8e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d003      	beq.n	8001a8e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a88:	f043 0304 	orr.w	r3, r3, #4
 8001a8c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001a8e:	6a3b      	ldr	r3, [r7, #32]
 8001a90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d043      	beq.n	8001b20 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d03e      	beq.n	8001b20 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001aa8:	2b60      	cmp	r3, #96	; 0x60
 8001aaa:	d02b      	beq.n	8001b04 <HAL_CAN_IRQHandler+0x32a>
 8001aac:	2b60      	cmp	r3, #96	; 0x60
 8001aae:	d82e      	bhi.n	8001b0e <HAL_CAN_IRQHandler+0x334>
 8001ab0:	2b50      	cmp	r3, #80	; 0x50
 8001ab2:	d022      	beq.n	8001afa <HAL_CAN_IRQHandler+0x320>
 8001ab4:	2b50      	cmp	r3, #80	; 0x50
 8001ab6:	d82a      	bhi.n	8001b0e <HAL_CAN_IRQHandler+0x334>
 8001ab8:	2b40      	cmp	r3, #64	; 0x40
 8001aba:	d019      	beq.n	8001af0 <HAL_CAN_IRQHandler+0x316>
 8001abc:	2b40      	cmp	r3, #64	; 0x40
 8001abe:	d826      	bhi.n	8001b0e <HAL_CAN_IRQHandler+0x334>
 8001ac0:	2b30      	cmp	r3, #48	; 0x30
 8001ac2:	d010      	beq.n	8001ae6 <HAL_CAN_IRQHandler+0x30c>
 8001ac4:	2b30      	cmp	r3, #48	; 0x30
 8001ac6:	d822      	bhi.n	8001b0e <HAL_CAN_IRQHandler+0x334>
 8001ac8:	2b10      	cmp	r3, #16
 8001aca:	d002      	beq.n	8001ad2 <HAL_CAN_IRQHandler+0x2f8>
 8001acc:	2b20      	cmp	r3, #32
 8001ace:	d005      	beq.n	8001adc <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001ad0:	e01d      	b.n	8001b0e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad4:	f043 0308 	orr.w	r3, r3, #8
 8001ad8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ada:	e019      	b.n	8001b10 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ade:	f043 0310 	orr.w	r3, r3, #16
 8001ae2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ae4:	e014      	b.n	8001b10 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae8:	f043 0320 	orr.w	r3, r3, #32
 8001aec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001aee:	e00f      	b.n	8001b10 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001af6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001af8:	e00a      	b.n	8001b10 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b00:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001b02:	e005      	b.n	8001b10 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b0a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001b0c:	e000      	b.n	8001b10 <HAL_CAN_IRQHandler+0x336>
            break;
 8001b0e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	699a      	ldr	r2, [r3, #24]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001b1e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2204      	movs	r2, #4
 8001b26:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d008      	beq.n	8001b40 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b34:	431a      	orrs	r2, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f000 f867 	bl	8001c0e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001b40:	bf00      	nop
 8001b42:	3728      	adds	r7, #40	; 0x28
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001b50:	bf00      	nop
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bc80      	pop	{r7}
 8001b58:	4770      	bx	lr

08001b5a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	b083      	sub	sp, #12
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001b62:	bf00      	nop
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bc80      	pop	{r7}
 8001b6a:	4770      	bx	lr

08001b6c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001b74:	bf00      	nop
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bc80      	pop	{r7}
 8001b7c:	4770      	bx	lr

08001b7e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	b083      	sub	sp, #12
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001b86:	bf00      	nop
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bc80      	pop	{r7}
 8001b8e:	4770      	bx	lr

08001b90 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001b98:	bf00      	nop
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bc80      	pop	{r7}
 8001ba0:	4770      	bx	lr

08001ba2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	b083      	sub	sp, #12
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001baa:	bf00      	nop
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bc80      	pop	{r7}
 8001bb2:	4770      	bx	lr

08001bb4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001bbc:	bf00      	nop
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bc80      	pop	{r7}
 8001bc4:	4770      	bx	lr

08001bc6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	b083      	sub	sp, #12
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001bce:	bf00      	nop
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bc80      	pop	{r7}
 8001bd6:	4770      	bx	lr

08001bd8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001be0:	bf00      	nop
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bc80      	pop	{r7}
 8001be8:	4770      	bx	lr

08001bea <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001bea:	b480      	push	{r7}
 8001bec:	b083      	sub	sp, #12
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001bf2:	bf00      	nop
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bc80      	pop	{r7}
 8001bfa:	4770      	bx	lr

08001bfc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001c04:	bf00      	nop
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bc80      	pop	{r7}
 8001c0c:	4770      	bx	lr

08001c0e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b083      	sub	sp, #12
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001c16:	bf00      	nop
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bc80      	pop	{r7}
 8001c1e:	4770      	bx	lr

08001c20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c30:	4b0c      	ldr	r3, [pc, #48]	; (8001c64 <__NVIC_SetPriorityGrouping+0x44>)
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c36:	68ba      	ldr	r2, [r7, #8]
 8001c38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c52:	4a04      	ldr	r2, [pc, #16]	; (8001c64 <__NVIC_SetPriorityGrouping+0x44>)
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	60d3      	str	r3, [r2, #12]
}
 8001c58:	bf00      	nop
 8001c5a:	3714      	adds	r7, #20
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bc80      	pop	{r7}
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	e000ed00 	.word	0xe000ed00

08001c68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c6c:	4b04      	ldr	r3, [pc, #16]	; (8001c80 <__NVIC_GetPriorityGrouping+0x18>)
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	0a1b      	lsrs	r3, r3, #8
 8001c72:	f003 0307 	and.w	r3, r3, #7
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bc80      	pop	{r7}
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	e000ed00 	.word	0xe000ed00

08001c84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	db0b      	blt.n	8001cae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c96:	79fb      	ldrb	r3, [r7, #7]
 8001c98:	f003 021f 	and.w	r2, r3, #31
 8001c9c:	4906      	ldr	r1, [pc, #24]	; (8001cb8 <__NVIC_EnableIRQ+0x34>)
 8001c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca2:	095b      	lsrs	r3, r3, #5
 8001ca4:	2001      	movs	r0, #1
 8001ca6:	fa00 f202 	lsl.w	r2, r0, r2
 8001caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cae:	bf00      	nop
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bc80      	pop	{r7}
 8001cb6:	4770      	bx	lr
 8001cb8:	e000e100 	.word	0xe000e100

08001cbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	6039      	str	r1, [r7, #0]
 8001cc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	db0a      	blt.n	8001ce6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	b2da      	uxtb	r2, r3
 8001cd4:	490c      	ldr	r1, [pc, #48]	; (8001d08 <__NVIC_SetPriority+0x4c>)
 8001cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cda:	0112      	lsls	r2, r2, #4
 8001cdc:	b2d2      	uxtb	r2, r2
 8001cde:	440b      	add	r3, r1
 8001ce0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ce4:	e00a      	b.n	8001cfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	b2da      	uxtb	r2, r3
 8001cea:	4908      	ldr	r1, [pc, #32]	; (8001d0c <__NVIC_SetPriority+0x50>)
 8001cec:	79fb      	ldrb	r3, [r7, #7]
 8001cee:	f003 030f 	and.w	r3, r3, #15
 8001cf2:	3b04      	subs	r3, #4
 8001cf4:	0112      	lsls	r2, r2, #4
 8001cf6:	b2d2      	uxtb	r2, r2
 8001cf8:	440b      	add	r3, r1
 8001cfa:	761a      	strb	r2, [r3, #24]
}
 8001cfc:	bf00      	nop
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bc80      	pop	{r7}
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	e000e100 	.word	0xe000e100
 8001d0c:	e000ed00 	.word	0xe000ed00

08001d10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b089      	sub	sp, #36	; 0x24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f003 0307 	and.w	r3, r3, #7
 8001d22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	f1c3 0307 	rsb	r3, r3, #7
 8001d2a:	2b04      	cmp	r3, #4
 8001d2c:	bf28      	it	cs
 8001d2e:	2304      	movcs	r3, #4
 8001d30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	3304      	adds	r3, #4
 8001d36:	2b06      	cmp	r3, #6
 8001d38:	d902      	bls.n	8001d40 <NVIC_EncodePriority+0x30>
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	3b03      	subs	r3, #3
 8001d3e:	e000      	b.n	8001d42 <NVIC_EncodePriority+0x32>
 8001d40:	2300      	movs	r3, #0
 8001d42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d44:	f04f 32ff 	mov.w	r2, #4294967295
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	43da      	mvns	r2, r3
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	401a      	ands	r2, r3
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d58:	f04f 31ff 	mov.w	r1, #4294967295
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d62:	43d9      	mvns	r1, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d68:	4313      	orrs	r3, r2
         );
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3724      	adds	r7, #36	; 0x24
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bc80      	pop	{r7}
 8001d72:	4770      	bx	lr

08001d74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d84:	d301      	bcc.n	8001d8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d86:	2301      	movs	r3, #1
 8001d88:	e00f      	b.n	8001daa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d8a:	4a0a      	ldr	r2, [pc, #40]	; (8001db4 <SysTick_Config+0x40>)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d92:	210f      	movs	r1, #15
 8001d94:	f04f 30ff 	mov.w	r0, #4294967295
 8001d98:	f7ff ff90 	bl	8001cbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d9c:	4b05      	ldr	r3, [pc, #20]	; (8001db4 <SysTick_Config+0x40>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001da2:	4b04      	ldr	r3, [pc, #16]	; (8001db4 <SysTick_Config+0x40>)
 8001da4:	2207      	movs	r2, #7
 8001da6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	e000e010 	.word	0xe000e010

08001db8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f7ff ff2d 	bl	8001c20 <__NVIC_SetPriorityGrouping>
}
 8001dc6:	bf00      	nop
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b086      	sub	sp, #24
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	60b9      	str	r1, [r7, #8]
 8001dd8:	607a      	str	r2, [r7, #4]
 8001dda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001de0:	f7ff ff42 	bl	8001c68 <__NVIC_GetPriorityGrouping>
 8001de4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	68b9      	ldr	r1, [r7, #8]
 8001dea:	6978      	ldr	r0, [r7, #20]
 8001dec:	f7ff ff90 	bl	8001d10 <NVIC_EncodePriority>
 8001df0:	4602      	mov	r2, r0
 8001df2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001df6:	4611      	mov	r1, r2
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff ff5f 	bl	8001cbc <__NVIC_SetPriority>
}
 8001dfe:	bf00      	nop
 8001e00:	3718      	adds	r7, #24
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b082      	sub	sp, #8
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff ff35 	bl	8001c84 <__NVIC_EnableIRQ>
}
 8001e1a:	bf00      	nop
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b082      	sub	sp, #8
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f7ff ffa2 	bl	8001d74 <SysTick_Config>
 8001e30:	4603      	mov	r3, r0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
	...

08001e3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b08b      	sub	sp, #44	; 0x2c
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e46:	2300      	movs	r3, #0
 8001e48:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e4e:	e169      	b.n	8002124 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e50:	2201      	movs	r2, #1
 8001e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	69fa      	ldr	r2, [r7, #28]
 8001e60:	4013      	ands	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	f040 8158 	bne.w	800211e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	4a9a      	ldr	r2, [pc, #616]	; (80020dc <HAL_GPIO_Init+0x2a0>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d05e      	beq.n	8001f36 <HAL_GPIO_Init+0xfa>
 8001e78:	4a98      	ldr	r2, [pc, #608]	; (80020dc <HAL_GPIO_Init+0x2a0>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d875      	bhi.n	8001f6a <HAL_GPIO_Init+0x12e>
 8001e7e:	4a98      	ldr	r2, [pc, #608]	; (80020e0 <HAL_GPIO_Init+0x2a4>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d058      	beq.n	8001f36 <HAL_GPIO_Init+0xfa>
 8001e84:	4a96      	ldr	r2, [pc, #600]	; (80020e0 <HAL_GPIO_Init+0x2a4>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d86f      	bhi.n	8001f6a <HAL_GPIO_Init+0x12e>
 8001e8a:	4a96      	ldr	r2, [pc, #600]	; (80020e4 <HAL_GPIO_Init+0x2a8>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d052      	beq.n	8001f36 <HAL_GPIO_Init+0xfa>
 8001e90:	4a94      	ldr	r2, [pc, #592]	; (80020e4 <HAL_GPIO_Init+0x2a8>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d869      	bhi.n	8001f6a <HAL_GPIO_Init+0x12e>
 8001e96:	4a94      	ldr	r2, [pc, #592]	; (80020e8 <HAL_GPIO_Init+0x2ac>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d04c      	beq.n	8001f36 <HAL_GPIO_Init+0xfa>
 8001e9c:	4a92      	ldr	r2, [pc, #584]	; (80020e8 <HAL_GPIO_Init+0x2ac>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d863      	bhi.n	8001f6a <HAL_GPIO_Init+0x12e>
 8001ea2:	4a92      	ldr	r2, [pc, #584]	; (80020ec <HAL_GPIO_Init+0x2b0>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d046      	beq.n	8001f36 <HAL_GPIO_Init+0xfa>
 8001ea8:	4a90      	ldr	r2, [pc, #576]	; (80020ec <HAL_GPIO_Init+0x2b0>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d85d      	bhi.n	8001f6a <HAL_GPIO_Init+0x12e>
 8001eae:	2b12      	cmp	r3, #18
 8001eb0:	d82a      	bhi.n	8001f08 <HAL_GPIO_Init+0xcc>
 8001eb2:	2b12      	cmp	r3, #18
 8001eb4:	d859      	bhi.n	8001f6a <HAL_GPIO_Init+0x12e>
 8001eb6:	a201      	add	r2, pc, #4	; (adr r2, 8001ebc <HAL_GPIO_Init+0x80>)
 8001eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ebc:	08001f37 	.word	0x08001f37
 8001ec0:	08001f11 	.word	0x08001f11
 8001ec4:	08001f23 	.word	0x08001f23
 8001ec8:	08001f65 	.word	0x08001f65
 8001ecc:	08001f6b 	.word	0x08001f6b
 8001ed0:	08001f6b 	.word	0x08001f6b
 8001ed4:	08001f6b 	.word	0x08001f6b
 8001ed8:	08001f6b 	.word	0x08001f6b
 8001edc:	08001f6b 	.word	0x08001f6b
 8001ee0:	08001f6b 	.word	0x08001f6b
 8001ee4:	08001f6b 	.word	0x08001f6b
 8001ee8:	08001f6b 	.word	0x08001f6b
 8001eec:	08001f6b 	.word	0x08001f6b
 8001ef0:	08001f6b 	.word	0x08001f6b
 8001ef4:	08001f6b 	.word	0x08001f6b
 8001ef8:	08001f6b 	.word	0x08001f6b
 8001efc:	08001f6b 	.word	0x08001f6b
 8001f00:	08001f19 	.word	0x08001f19
 8001f04:	08001f2d 	.word	0x08001f2d
 8001f08:	4a79      	ldr	r2, [pc, #484]	; (80020f0 <HAL_GPIO_Init+0x2b4>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d013      	beq.n	8001f36 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f0e:	e02c      	b.n	8001f6a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	623b      	str	r3, [r7, #32]
          break;
 8001f16:	e029      	b.n	8001f6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	3304      	adds	r3, #4
 8001f1e:	623b      	str	r3, [r7, #32]
          break;
 8001f20:	e024      	b.n	8001f6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	3308      	adds	r3, #8
 8001f28:	623b      	str	r3, [r7, #32]
          break;
 8001f2a:	e01f      	b.n	8001f6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	330c      	adds	r3, #12
 8001f32:	623b      	str	r3, [r7, #32]
          break;
 8001f34:	e01a      	b.n	8001f6c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d102      	bne.n	8001f44 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f3e:	2304      	movs	r3, #4
 8001f40:	623b      	str	r3, [r7, #32]
          break;
 8001f42:	e013      	b.n	8001f6c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d105      	bne.n	8001f58 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f4c:	2308      	movs	r3, #8
 8001f4e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	69fa      	ldr	r2, [r7, #28]
 8001f54:	611a      	str	r2, [r3, #16]
          break;
 8001f56:	e009      	b.n	8001f6c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f58:	2308      	movs	r3, #8
 8001f5a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	69fa      	ldr	r2, [r7, #28]
 8001f60:	615a      	str	r2, [r3, #20]
          break;
 8001f62:	e003      	b.n	8001f6c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f64:	2300      	movs	r3, #0
 8001f66:	623b      	str	r3, [r7, #32]
          break;
 8001f68:	e000      	b.n	8001f6c <HAL_GPIO_Init+0x130>
          break;
 8001f6a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	2bff      	cmp	r3, #255	; 0xff
 8001f70:	d801      	bhi.n	8001f76 <HAL_GPIO_Init+0x13a>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	e001      	b.n	8001f7a <HAL_GPIO_Init+0x13e>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	3304      	adds	r3, #4
 8001f7a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	2bff      	cmp	r3, #255	; 0xff
 8001f80:	d802      	bhi.n	8001f88 <HAL_GPIO_Init+0x14c>
 8001f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	e002      	b.n	8001f8e <HAL_GPIO_Init+0x152>
 8001f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8a:	3b08      	subs	r3, #8
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	210f      	movs	r1, #15
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	fa01 f303 	lsl.w	r3, r1, r3
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	401a      	ands	r2, r3
 8001fa0:	6a39      	ldr	r1, [r7, #32]
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa8:	431a      	orrs	r2, r3
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	f000 80b1 	beq.w	800211e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001fbc:	4b4d      	ldr	r3, [pc, #308]	; (80020f4 <HAL_GPIO_Init+0x2b8>)
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	4a4c      	ldr	r2, [pc, #304]	; (80020f4 <HAL_GPIO_Init+0x2b8>)
 8001fc2:	f043 0301 	orr.w	r3, r3, #1
 8001fc6:	6193      	str	r3, [r2, #24]
 8001fc8:	4b4a      	ldr	r3, [pc, #296]	; (80020f4 <HAL_GPIO_Init+0x2b8>)
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	f003 0301 	and.w	r3, r3, #1
 8001fd0:	60bb      	str	r3, [r7, #8]
 8001fd2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001fd4:	4a48      	ldr	r2, [pc, #288]	; (80020f8 <HAL_GPIO_Init+0x2bc>)
 8001fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd8:	089b      	lsrs	r3, r3, #2
 8001fda:	3302      	adds	r3, #2
 8001fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fe0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe4:	f003 0303 	and.w	r3, r3, #3
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	220f      	movs	r2, #15
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	43db      	mvns	r3, r3
 8001ff2:	68fa      	ldr	r2, [r7, #12]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4a40      	ldr	r2, [pc, #256]	; (80020fc <HAL_GPIO_Init+0x2c0>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d013      	beq.n	8002028 <HAL_GPIO_Init+0x1ec>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4a3f      	ldr	r2, [pc, #252]	; (8002100 <HAL_GPIO_Init+0x2c4>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d00d      	beq.n	8002024 <HAL_GPIO_Init+0x1e8>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	4a3e      	ldr	r2, [pc, #248]	; (8002104 <HAL_GPIO_Init+0x2c8>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d007      	beq.n	8002020 <HAL_GPIO_Init+0x1e4>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4a3d      	ldr	r2, [pc, #244]	; (8002108 <HAL_GPIO_Init+0x2cc>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d101      	bne.n	800201c <HAL_GPIO_Init+0x1e0>
 8002018:	2303      	movs	r3, #3
 800201a:	e006      	b.n	800202a <HAL_GPIO_Init+0x1ee>
 800201c:	2304      	movs	r3, #4
 800201e:	e004      	b.n	800202a <HAL_GPIO_Init+0x1ee>
 8002020:	2302      	movs	r3, #2
 8002022:	e002      	b.n	800202a <HAL_GPIO_Init+0x1ee>
 8002024:	2301      	movs	r3, #1
 8002026:	e000      	b.n	800202a <HAL_GPIO_Init+0x1ee>
 8002028:	2300      	movs	r3, #0
 800202a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800202c:	f002 0203 	and.w	r2, r2, #3
 8002030:	0092      	lsls	r2, r2, #2
 8002032:	4093      	lsls	r3, r2
 8002034:	68fa      	ldr	r2, [r7, #12]
 8002036:	4313      	orrs	r3, r2
 8002038:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800203a:	492f      	ldr	r1, [pc, #188]	; (80020f8 <HAL_GPIO_Init+0x2bc>)
 800203c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203e:	089b      	lsrs	r3, r3, #2
 8002040:	3302      	adds	r3, #2
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d006      	beq.n	8002062 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002054:	4b2d      	ldr	r3, [pc, #180]	; (800210c <HAL_GPIO_Init+0x2d0>)
 8002056:	689a      	ldr	r2, [r3, #8]
 8002058:	492c      	ldr	r1, [pc, #176]	; (800210c <HAL_GPIO_Init+0x2d0>)
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	4313      	orrs	r3, r2
 800205e:	608b      	str	r3, [r1, #8]
 8002060:	e006      	b.n	8002070 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002062:	4b2a      	ldr	r3, [pc, #168]	; (800210c <HAL_GPIO_Init+0x2d0>)
 8002064:	689a      	ldr	r2, [r3, #8]
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	43db      	mvns	r3, r3
 800206a:	4928      	ldr	r1, [pc, #160]	; (800210c <HAL_GPIO_Init+0x2d0>)
 800206c:	4013      	ands	r3, r2
 800206e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d006      	beq.n	800208a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800207c:	4b23      	ldr	r3, [pc, #140]	; (800210c <HAL_GPIO_Init+0x2d0>)
 800207e:	68da      	ldr	r2, [r3, #12]
 8002080:	4922      	ldr	r1, [pc, #136]	; (800210c <HAL_GPIO_Init+0x2d0>)
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	4313      	orrs	r3, r2
 8002086:	60cb      	str	r3, [r1, #12]
 8002088:	e006      	b.n	8002098 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800208a:	4b20      	ldr	r3, [pc, #128]	; (800210c <HAL_GPIO_Init+0x2d0>)
 800208c:	68da      	ldr	r2, [r3, #12]
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	43db      	mvns	r3, r3
 8002092:	491e      	ldr	r1, [pc, #120]	; (800210c <HAL_GPIO_Init+0x2d0>)
 8002094:	4013      	ands	r3, r2
 8002096:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d006      	beq.n	80020b2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020a4:	4b19      	ldr	r3, [pc, #100]	; (800210c <HAL_GPIO_Init+0x2d0>)
 80020a6:	685a      	ldr	r2, [r3, #4]
 80020a8:	4918      	ldr	r1, [pc, #96]	; (800210c <HAL_GPIO_Init+0x2d0>)
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	604b      	str	r3, [r1, #4]
 80020b0:	e006      	b.n	80020c0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020b2:	4b16      	ldr	r3, [pc, #88]	; (800210c <HAL_GPIO_Init+0x2d0>)
 80020b4:	685a      	ldr	r2, [r3, #4]
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	43db      	mvns	r3, r3
 80020ba:	4914      	ldr	r1, [pc, #80]	; (800210c <HAL_GPIO_Init+0x2d0>)
 80020bc:	4013      	ands	r3, r2
 80020be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d021      	beq.n	8002110 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80020cc:	4b0f      	ldr	r3, [pc, #60]	; (800210c <HAL_GPIO_Init+0x2d0>)
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	490e      	ldr	r1, [pc, #56]	; (800210c <HAL_GPIO_Init+0x2d0>)
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	600b      	str	r3, [r1, #0]
 80020d8:	e021      	b.n	800211e <HAL_GPIO_Init+0x2e2>
 80020da:	bf00      	nop
 80020dc:	10320000 	.word	0x10320000
 80020e0:	10310000 	.word	0x10310000
 80020e4:	10220000 	.word	0x10220000
 80020e8:	10210000 	.word	0x10210000
 80020ec:	10120000 	.word	0x10120000
 80020f0:	10110000 	.word	0x10110000
 80020f4:	40021000 	.word	0x40021000
 80020f8:	40010000 	.word	0x40010000
 80020fc:	40010800 	.word	0x40010800
 8002100:	40010c00 	.word	0x40010c00
 8002104:	40011000 	.word	0x40011000
 8002108:	40011400 	.word	0x40011400
 800210c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002110:	4b0b      	ldr	r3, [pc, #44]	; (8002140 <HAL_GPIO_Init+0x304>)
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	43db      	mvns	r3, r3
 8002118:	4909      	ldr	r1, [pc, #36]	; (8002140 <HAL_GPIO_Init+0x304>)
 800211a:	4013      	ands	r3, r2
 800211c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800211e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002120:	3301      	adds	r3, #1
 8002122:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212a:	fa22 f303 	lsr.w	r3, r2, r3
 800212e:	2b00      	cmp	r3, #0
 8002130:	f47f ae8e 	bne.w	8001e50 <HAL_GPIO_Init+0x14>
  }
}
 8002134:	bf00      	nop
 8002136:	bf00      	nop
 8002138:	372c      	adds	r7, #44	; 0x2c
 800213a:	46bd      	mov	sp, r7
 800213c:	bc80      	pop	{r7}
 800213e:	4770      	bx	lr
 8002140:	40010400 	.word	0x40010400

08002144 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	460b      	mov	r3, r1
 800214e:	807b      	strh	r3, [r7, #2]
 8002150:	4613      	mov	r3, r2
 8002152:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002154:	787b      	ldrb	r3, [r7, #1]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d003      	beq.n	8002162 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800215a:	887a      	ldrh	r2, [r7, #2]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002160:	e003      	b.n	800216a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002162:	887b      	ldrh	r3, [r7, #2]
 8002164:	041a      	lsls	r2, r3, #16
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	611a      	str	r2, [r3, #16]
}
 800216a:	bf00      	nop
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	bc80      	pop	{r7}
 8002172:	4770      	bx	lr

08002174 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b086      	sub	sp, #24
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d101      	bne.n	8002186 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e272      	b.n	800266c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	2b00      	cmp	r3, #0
 8002190:	f000 8087 	beq.w	80022a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002194:	4b92      	ldr	r3, [pc, #584]	; (80023e0 <HAL_RCC_OscConfig+0x26c>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f003 030c 	and.w	r3, r3, #12
 800219c:	2b04      	cmp	r3, #4
 800219e:	d00c      	beq.n	80021ba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021a0:	4b8f      	ldr	r3, [pc, #572]	; (80023e0 <HAL_RCC_OscConfig+0x26c>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f003 030c 	and.w	r3, r3, #12
 80021a8:	2b08      	cmp	r3, #8
 80021aa:	d112      	bne.n	80021d2 <HAL_RCC_OscConfig+0x5e>
 80021ac:	4b8c      	ldr	r3, [pc, #560]	; (80023e0 <HAL_RCC_OscConfig+0x26c>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021b8:	d10b      	bne.n	80021d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021ba:	4b89      	ldr	r3, [pc, #548]	; (80023e0 <HAL_RCC_OscConfig+0x26c>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d06c      	beq.n	80022a0 <HAL_RCC_OscConfig+0x12c>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d168      	bne.n	80022a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e24c      	b.n	800266c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021da:	d106      	bne.n	80021ea <HAL_RCC_OscConfig+0x76>
 80021dc:	4b80      	ldr	r3, [pc, #512]	; (80023e0 <HAL_RCC_OscConfig+0x26c>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a7f      	ldr	r2, [pc, #508]	; (80023e0 <HAL_RCC_OscConfig+0x26c>)
 80021e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021e6:	6013      	str	r3, [r2, #0]
 80021e8:	e02e      	b.n	8002248 <HAL_RCC_OscConfig+0xd4>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d10c      	bne.n	800220c <HAL_RCC_OscConfig+0x98>
 80021f2:	4b7b      	ldr	r3, [pc, #492]	; (80023e0 <HAL_RCC_OscConfig+0x26c>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a7a      	ldr	r2, [pc, #488]	; (80023e0 <HAL_RCC_OscConfig+0x26c>)
 80021f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021fc:	6013      	str	r3, [r2, #0]
 80021fe:	4b78      	ldr	r3, [pc, #480]	; (80023e0 <HAL_RCC_OscConfig+0x26c>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a77      	ldr	r2, [pc, #476]	; (80023e0 <HAL_RCC_OscConfig+0x26c>)
 8002204:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002208:	6013      	str	r3, [r2, #0]
 800220a:	e01d      	b.n	8002248 <HAL_RCC_OscConfig+0xd4>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002214:	d10c      	bne.n	8002230 <HAL_RCC_OscConfig+0xbc>
 8002216:	4b72      	ldr	r3, [pc, #456]	; (80023e0 <HAL_RCC_OscConfig+0x26c>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a71      	ldr	r2, [pc, #452]	; (80023e0 <HAL_RCC_OscConfig+0x26c>)
 800221c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002220:	6013      	str	r3, [r2, #0]
 8002222:	4b6f      	ldr	r3, [pc, #444]	; (80023e0 <HAL_RCC_OscConfig+0x26c>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a6e      	ldr	r2, [pc, #440]	; (80023e0 <HAL_RCC_OscConfig+0x26c>)
 8002228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800222c:	6013      	str	r3, [r2, #0]
 800222e:	e00b      	b.n	8002248 <HAL_RCC_OscConfig+0xd4>
 8002230:	4b6b      	ldr	r3, [pc, #428]	; (80023e0 <HAL_RCC_OscConfig+0x26c>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a6a      	ldr	r2, [pc, #424]	; (80023e0 <HAL_RCC_OscConfig+0x26c>)
 8002236:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800223a:	6013      	str	r3, [r2, #0]
 800223c:	4b68      	ldr	r3, [pc, #416]	; (80023e0 <HAL_RCC_OscConfig+0x26c>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a67      	ldr	r2, [pc, #412]	; (80023e0 <HAL_RCC_OscConfig+0x26c>)
 8002242:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002246:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d013      	beq.n	8002278 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002250:	f7fe fe9c 	bl	8000f8c <HAL_GetTick>
 8002254:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002256:	e008      	b.n	800226a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002258:	f7fe fe98 	bl	8000f8c <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	2b64      	cmp	r3, #100	; 0x64
 8002264:	d901      	bls.n	800226a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e200      	b.n	800266c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800226a:	4b5d      	ldr	r3, [pc, #372]	; (80023e0 <HAL_RCC_OscConfig+0x26c>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d0f0      	beq.n	8002258 <HAL_RCC_OscConfig+0xe4>
 8002276:	e014      	b.n	80022a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002278:	f7fe fe88 	bl	8000f8c <HAL_GetTick>
 800227c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800227e:	e008      	b.n	8002292 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002280:	f7fe fe84 	bl	8000f8c <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b64      	cmp	r3, #100	; 0x64
 800228c:	d901      	bls.n	8002292 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e1ec      	b.n	800266c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002292:	4b53      	ldr	r3, [pc, #332]	; (80023e0 <HAL_RCC_OscConfig+0x26c>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d1f0      	bne.n	8002280 <HAL_RCC_OscConfig+0x10c>
 800229e:	e000      	b.n	80022a2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d063      	beq.n	8002376 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022ae:	4b4c      	ldr	r3, [pc, #304]	; (80023e0 <HAL_RCC_OscConfig+0x26c>)
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f003 030c 	and.w	r3, r3, #12
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d00b      	beq.n	80022d2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022ba:	4b49      	ldr	r3, [pc, #292]	; (80023e0 <HAL_RCC_OscConfig+0x26c>)
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f003 030c 	and.w	r3, r3, #12
 80022c2:	2b08      	cmp	r3, #8
 80022c4:	d11c      	bne.n	8002300 <HAL_RCC_OscConfig+0x18c>
 80022c6:	4b46      	ldr	r3, [pc, #280]	; (80023e0 <HAL_RCC_OscConfig+0x26c>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d116      	bne.n	8002300 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022d2:	4b43      	ldr	r3, [pc, #268]	; (80023e0 <HAL_RCC_OscConfig+0x26c>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d005      	beq.n	80022ea <HAL_RCC_OscConfig+0x176>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d001      	beq.n	80022ea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e1c0      	b.n	800266c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ea:	4b3d      	ldr	r3, [pc, #244]	; (80023e0 <HAL_RCC_OscConfig+0x26c>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	695b      	ldr	r3, [r3, #20]
 80022f6:	00db      	lsls	r3, r3, #3
 80022f8:	4939      	ldr	r1, [pc, #228]	; (80023e0 <HAL_RCC_OscConfig+0x26c>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022fe:	e03a      	b.n	8002376 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d020      	beq.n	800234a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002308:	4b36      	ldr	r3, [pc, #216]	; (80023e4 <HAL_RCC_OscConfig+0x270>)
 800230a:	2201      	movs	r2, #1
 800230c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230e:	f7fe fe3d 	bl	8000f8c <HAL_GetTick>
 8002312:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002314:	e008      	b.n	8002328 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002316:	f7fe fe39 	bl	8000f8c <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	2b02      	cmp	r3, #2
 8002322:	d901      	bls.n	8002328 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e1a1      	b.n	800266c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002328:	4b2d      	ldr	r3, [pc, #180]	; (80023e0 <HAL_RCC_OscConfig+0x26c>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0302 	and.w	r3, r3, #2
 8002330:	2b00      	cmp	r3, #0
 8002332:	d0f0      	beq.n	8002316 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002334:	4b2a      	ldr	r3, [pc, #168]	; (80023e0 <HAL_RCC_OscConfig+0x26c>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	695b      	ldr	r3, [r3, #20]
 8002340:	00db      	lsls	r3, r3, #3
 8002342:	4927      	ldr	r1, [pc, #156]	; (80023e0 <HAL_RCC_OscConfig+0x26c>)
 8002344:	4313      	orrs	r3, r2
 8002346:	600b      	str	r3, [r1, #0]
 8002348:	e015      	b.n	8002376 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800234a:	4b26      	ldr	r3, [pc, #152]	; (80023e4 <HAL_RCC_OscConfig+0x270>)
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002350:	f7fe fe1c 	bl	8000f8c <HAL_GetTick>
 8002354:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002356:	e008      	b.n	800236a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002358:	f7fe fe18 	bl	8000f8c <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b02      	cmp	r3, #2
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e180      	b.n	800266c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800236a:	4b1d      	ldr	r3, [pc, #116]	; (80023e0 <HAL_RCC_OscConfig+0x26c>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d1f0      	bne.n	8002358 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0308 	and.w	r3, r3, #8
 800237e:	2b00      	cmp	r3, #0
 8002380:	d03a      	beq.n	80023f8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d019      	beq.n	80023be <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800238a:	4b17      	ldr	r3, [pc, #92]	; (80023e8 <HAL_RCC_OscConfig+0x274>)
 800238c:	2201      	movs	r2, #1
 800238e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002390:	f7fe fdfc 	bl	8000f8c <HAL_GetTick>
 8002394:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002396:	e008      	b.n	80023aa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002398:	f7fe fdf8 	bl	8000f8c <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e160      	b.n	800266c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023aa:	4b0d      	ldr	r3, [pc, #52]	; (80023e0 <HAL_RCC_OscConfig+0x26c>)
 80023ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d0f0      	beq.n	8002398 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023b6:	2001      	movs	r0, #1
 80023b8:	f000 fa9c 	bl	80028f4 <RCC_Delay>
 80023bc:	e01c      	b.n	80023f8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023be:	4b0a      	ldr	r3, [pc, #40]	; (80023e8 <HAL_RCC_OscConfig+0x274>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023c4:	f7fe fde2 	bl	8000f8c <HAL_GetTick>
 80023c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023ca:	e00f      	b.n	80023ec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023cc:	f7fe fdde 	bl	8000f8c <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d908      	bls.n	80023ec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e146      	b.n	800266c <HAL_RCC_OscConfig+0x4f8>
 80023de:	bf00      	nop
 80023e0:	40021000 	.word	0x40021000
 80023e4:	42420000 	.word	0x42420000
 80023e8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023ec:	4b92      	ldr	r3, [pc, #584]	; (8002638 <HAL_RCC_OscConfig+0x4c4>)
 80023ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f0:	f003 0302 	and.w	r3, r3, #2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d1e9      	bne.n	80023cc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0304 	and.w	r3, r3, #4
 8002400:	2b00      	cmp	r3, #0
 8002402:	f000 80a6 	beq.w	8002552 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002406:	2300      	movs	r3, #0
 8002408:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800240a:	4b8b      	ldr	r3, [pc, #556]	; (8002638 <HAL_RCC_OscConfig+0x4c4>)
 800240c:	69db      	ldr	r3, [r3, #28]
 800240e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d10d      	bne.n	8002432 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002416:	4b88      	ldr	r3, [pc, #544]	; (8002638 <HAL_RCC_OscConfig+0x4c4>)
 8002418:	69db      	ldr	r3, [r3, #28]
 800241a:	4a87      	ldr	r2, [pc, #540]	; (8002638 <HAL_RCC_OscConfig+0x4c4>)
 800241c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002420:	61d3      	str	r3, [r2, #28]
 8002422:	4b85      	ldr	r3, [pc, #532]	; (8002638 <HAL_RCC_OscConfig+0x4c4>)
 8002424:	69db      	ldr	r3, [r3, #28]
 8002426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800242a:	60bb      	str	r3, [r7, #8]
 800242c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800242e:	2301      	movs	r3, #1
 8002430:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002432:	4b82      	ldr	r3, [pc, #520]	; (800263c <HAL_RCC_OscConfig+0x4c8>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800243a:	2b00      	cmp	r3, #0
 800243c:	d118      	bne.n	8002470 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800243e:	4b7f      	ldr	r3, [pc, #508]	; (800263c <HAL_RCC_OscConfig+0x4c8>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a7e      	ldr	r2, [pc, #504]	; (800263c <HAL_RCC_OscConfig+0x4c8>)
 8002444:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002448:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800244a:	f7fe fd9f 	bl	8000f8c <HAL_GetTick>
 800244e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002450:	e008      	b.n	8002464 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002452:	f7fe fd9b 	bl	8000f8c <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b64      	cmp	r3, #100	; 0x64
 800245e:	d901      	bls.n	8002464 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e103      	b.n	800266c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002464:	4b75      	ldr	r3, [pc, #468]	; (800263c <HAL_RCC_OscConfig+0x4c8>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800246c:	2b00      	cmp	r3, #0
 800246e:	d0f0      	beq.n	8002452 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d106      	bne.n	8002486 <HAL_RCC_OscConfig+0x312>
 8002478:	4b6f      	ldr	r3, [pc, #444]	; (8002638 <HAL_RCC_OscConfig+0x4c4>)
 800247a:	6a1b      	ldr	r3, [r3, #32]
 800247c:	4a6e      	ldr	r2, [pc, #440]	; (8002638 <HAL_RCC_OscConfig+0x4c4>)
 800247e:	f043 0301 	orr.w	r3, r3, #1
 8002482:	6213      	str	r3, [r2, #32]
 8002484:	e02d      	b.n	80024e2 <HAL_RCC_OscConfig+0x36e>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d10c      	bne.n	80024a8 <HAL_RCC_OscConfig+0x334>
 800248e:	4b6a      	ldr	r3, [pc, #424]	; (8002638 <HAL_RCC_OscConfig+0x4c4>)
 8002490:	6a1b      	ldr	r3, [r3, #32]
 8002492:	4a69      	ldr	r2, [pc, #420]	; (8002638 <HAL_RCC_OscConfig+0x4c4>)
 8002494:	f023 0301 	bic.w	r3, r3, #1
 8002498:	6213      	str	r3, [r2, #32]
 800249a:	4b67      	ldr	r3, [pc, #412]	; (8002638 <HAL_RCC_OscConfig+0x4c4>)
 800249c:	6a1b      	ldr	r3, [r3, #32]
 800249e:	4a66      	ldr	r2, [pc, #408]	; (8002638 <HAL_RCC_OscConfig+0x4c4>)
 80024a0:	f023 0304 	bic.w	r3, r3, #4
 80024a4:	6213      	str	r3, [r2, #32]
 80024a6:	e01c      	b.n	80024e2 <HAL_RCC_OscConfig+0x36e>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	2b05      	cmp	r3, #5
 80024ae:	d10c      	bne.n	80024ca <HAL_RCC_OscConfig+0x356>
 80024b0:	4b61      	ldr	r3, [pc, #388]	; (8002638 <HAL_RCC_OscConfig+0x4c4>)
 80024b2:	6a1b      	ldr	r3, [r3, #32]
 80024b4:	4a60      	ldr	r2, [pc, #384]	; (8002638 <HAL_RCC_OscConfig+0x4c4>)
 80024b6:	f043 0304 	orr.w	r3, r3, #4
 80024ba:	6213      	str	r3, [r2, #32]
 80024bc:	4b5e      	ldr	r3, [pc, #376]	; (8002638 <HAL_RCC_OscConfig+0x4c4>)
 80024be:	6a1b      	ldr	r3, [r3, #32]
 80024c0:	4a5d      	ldr	r2, [pc, #372]	; (8002638 <HAL_RCC_OscConfig+0x4c4>)
 80024c2:	f043 0301 	orr.w	r3, r3, #1
 80024c6:	6213      	str	r3, [r2, #32]
 80024c8:	e00b      	b.n	80024e2 <HAL_RCC_OscConfig+0x36e>
 80024ca:	4b5b      	ldr	r3, [pc, #364]	; (8002638 <HAL_RCC_OscConfig+0x4c4>)
 80024cc:	6a1b      	ldr	r3, [r3, #32]
 80024ce:	4a5a      	ldr	r2, [pc, #360]	; (8002638 <HAL_RCC_OscConfig+0x4c4>)
 80024d0:	f023 0301 	bic.w	r3, r3, #1
 80024d4:	6213      	str	r3, [r2, #32]
 80024d6:	4b58      	ldr	r3, [pc, #352]	; (8002638 <HAL_RCC_OscConfig+0x4c4>)
 80024d8:	6a1b      	ldr	r3, [r3, #32]
 80024da:	4a57      	ldr	r2, [pc, #348]	; (8002638 <HAL_RCC_OscConfig+0x4c4>)
 80024dc:	f023 0304 	bic.w	r3, r3, #4
 80024e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d015      	beq.n	8002516 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ea:	f7fe fd4f 	bl	8000f8c <HAL_GetTick>
 80024ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024f0:	e00a      	b.n	8002508 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024f2:	f7fe fd4b 	bl	8000f8c <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002500:	4293      	cmp	r3, r2
 8002502:	d901      	bls.n	8002508 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e0b1      	b.n	800266c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002508:	4b4b      	ldr	r3, [pc, #300]	; (8002638 <HAL_RCC_OscConfig+0x4c4>)
 800250a:	6a1b      	ldr	r3, [r3, #32]
 800250c:	f003 0302 	and.w	r3, r3, #2
 8002510:	2b00      	cmp	r3, #0
 8002512:	d0ee      	beq.n	80024f2 <HAL_RCC_OscConfig+0x37e>
 8002514:	e014      	b.n	8002540 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002516:	f7fe fd39 	bl	8000f8c <HAL_GetTick>
 800251a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800251c:	e00a      	b.n	8002534 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800251e:	f7fe fd35 	bl	8000f8c <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	f241 3288 	movw	r2, #5000	; 0x1388
 800252c:	4293      	cmp	r3, r2
 800252e:	d901      	bls.n	8002534 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e09b      	b.n	800266c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002534:	4b40      	ldr	r3, [pc, #256]	; (8002638 <HAL_RCC_OscConfig+0x4c4>)
 8002536:	6a1b      	ldr	r3, [r3, #32]
 8002538:	f003 0302 	and.w	r3, r3, #2
 800253c:	2b00      	cmp	r3, #0
 800253e:	d1ee      	bne.n	800251e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002540:	7dfb      	ldrb	r3, [r7, #23]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d105      	bne.n	8002552 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002546:	4b3c      	ldr	r3, [pc, #240]	; (8002638 <HAL_RCC_OscConfig+0x4c4>)
 8002548:	69db      	ldr	r3, [r3, #28]
 800254a:	4a3b      	ldr	r2, [pc, #236]	; (8002638 <HAL_RCC_OscConfig+0x4c4>)
 800254c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002550:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	69db      	ldr	r3, [r3, #28]
 8002556:	2b00      	cmp	r3, #0
 8002558:	f000 8087 	beq.w	800266a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800255c:	4b36      	ldr	r3, [pc, #216]	; (8002638 <HAL_RCC_OscConfig+0x4c4>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f003 030c 	and.w	r3, r3, #12
 8002564:	2b08      	cmp	r3, #8
 8002566:	d061      	beq.n	800262c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	69db      	ldr	r3, [r3, #28]
 800256c:	2b02      	cmp	r3, #2
 800256e:	d146      	bne.n	80025fe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002570:	4b33      	ldr	r3, [pc, #204]	; (8002640 <HAL_RCC_OscConfig+0x4cc>)
 8002572:	2200      	movs	r2, #0
 8002574:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002576:	f7fe fd09 	bl	8000f8c <HAL_GetTick>
 800257a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800257c:	e008      	b.n	8002590 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800257e:	f7fe fd05 	bl	8000f8c <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	2b02      	cmp	r3, #2
 800258a:	d901      	bls.n	8002590 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e06d      	b.n	800266c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002590:	4b29      	ldr	r3, [pc, #164]	; (8002638 <HAL_RCC_OscConfig+0x4c4>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d1f0      	bne.n	800257e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a1b      	ldr	r3, [r3, #32]
 80025a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025a4:	d108      	bne.n	80025b8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025a6:	4b24      	ldr	r3, [pc, #144]	; (8002638 <HAL_RCC_OscConfig+0x4c4>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	4921      	ldr	r1, [pc, #132]	; (8002638 <HAL_RCC_OscConfig+0x4c4>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025b8:	4b1f      	ldr	r3, [pc, #124]	; (8002638 <HAL_RCC_OscConfig+0x4c4>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a19      	ldr	r1, [r3, #32]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c8:	430b      	orrs	r3, r1
 80025ca:	491b      	ldr	r1, [pc, #108]	; (8002638 <HAL_RCC_OscConfig+0x4c4>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025d0:	4b1b      	ldr	r3, [pc, #108]	; (8002640 <HAL_RCC_OscConfig+0x4cc>)
 80025d2:	2201      	movs	r2, #1
 80025d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d6:	f7fe fcd9 	bl	8000f8c <HAL_GetTick>
 80025da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025dc:	e008      	b.n	80025f0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025de:	f7fe fcd5 	bl	8000f8c <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d901      	bls.n	80025f0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e03d      	b.n	800266c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025f0:	4b11      	ldr	r3, [pc, #68]	; (8002638 <HAL_RCC_OscConfig+0x4c4>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d0f0      	beq.n	80025de <HAL_RCC_OscConfig+0x46a>
 80025fc:	e035      	b.n	800266a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025fe:	4b10      	ldr	r3, [pc, #64]	; (8002640 <HAL_RCC_OscConfig+0x4cc>)
 8002600:	2200      	movs	r2, #0
 8002602:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002604:	f7fe fcc2 	bl	8000f8c <HAL_GetTick>
 8002608:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800260a:	e008      	b.n	800261e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800260c:	f7fe fcbe 	bl	8000f8c <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	2b02      	cmp	r3, #2
 8002618:	d901      	bls.n	800261e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e026      	b.n	800266c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800261e:	4b06      	ldr	r3, [pc, #24]	; (8002638 <HAL_RCC_OscConfig+0x4c4>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d1f0      	bne.n	800260c <HAL_RCC_OscConfig+0x498>
 800262a:	e01e      	b.n	800266a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	69db      	ldr	r3, [r3, #28]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d107      	bne.n	8002644 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e019      	b.n	800266c <HAL_RCC_OscConfig+0x4f8>
 8002638:	40021000 	.word	0x40021000
 800263c:	40007000 	.word	0x40007000
 8002640:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002644:	4b0b      	ldr	r3, [pc, #44]	; (8002674 <HAL_RCC_OscConfig+0x500>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a1b      	ldr	r3, [r3, #32]
 8002654:	429a      	cmp	r2, r3
 8002656:	d106      	bne.n	8002666 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002662:	429a      	cmp	r2, r3
 8002664:	d001      	beq.n	800266a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e000      	b.n	800266c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800266a:	2300      	movs	r3, #0
}
 800266c:	4618      	mov	r0, r3
 800266e:	3718      	adds	r7, #24
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	40021000 	.word	0x40021000

08002678 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d101      	bne.n	800268c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e0d0      	b.n	800282e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800268c:	4b6a      	ldr	r3, [pc, #424]	; (8002838 <HAL_RCC_ClockConfig+0x1c0>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0307 	and.w	r3, r3, #7
 8002694:	683a      	ldr	r2, [r7, #0]
 8002696:	429a      	cmp	r2, r3
 8002698:	d910      	bls.n	80026bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800269a:	4b67      	ldr	r3, [pc, #412]	; (8002838 <HAL_RCC_ClockConfig+0x1c0>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f023 0207 	bic.w	r2, r3, #7
 80026a2:	4965      	ldr	r1, [pc, #404]	; (8002838 <HAL_RCC_ClockConfig+0x1c0>)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026aa:	4b63      	ldr	r3, [pc, #396]	; (8002838 <HAL_RCC_ClockConfig+0x1c0>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0307 	and.w	r3, r3, #7
 80026b2:	683a      	ldr	r2, [r7, #0]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d001      	beq.n	80026bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e0b8      	b.n	800282e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0302 	and.w	r3, r3, #2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d020      	beq.n	800270a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0304 	and.w	r3, r3, #4
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d005      	beq.n	80026e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026d4:	4b59      	ldr	r3, [pc, #356]	; (800283c <HAL_RCC_ClockConfig+0x1c4>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	4a58      	ldr	r2, [pc, #352]	; (800283c <HAL_RCC_ClockConfig+0x1c4>)
 80026da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80026de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0308 	and.w	r3, r3, #8
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d005      	beq.n	80026f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026ec:	4b53      	ldr	r3, [pc, #332]	; (800283c <HAL_RCC_ClockConfig+0x1c4>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	4a52      	ldr	r2, [pc, #328]	; (800283c <HAL_RCC_ClockConfig+0x1c4>)
 80026f2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80026f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026f8:	4b50      	ldr	r3, [pc, #320]	; (800283c <HAL_RCC_ClockConfig+0x1c4>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	494d      	ldr	r1, [pc, #308]	; (800283c <HAL_RCC_ClockConfig+0x1c4>)
 8002706:	4313      	orrs	r3, r2
 8002708:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0301 	and.w	r3, r3, #1
 8002712:	2b00      	cmp	r3, #0
 8002714:	d040      	beq.n	8002798 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d107      	bne.n	800272e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800271e:	4b47      	ldr	r3, [pc, #284]	; (800283c <HAL_RCC_ClockConfig+0x1c4>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d115      	bne.n	8002756 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e07f      	b.n	800282e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	2b02      	cmp	r3, #2
 8002734:	d107      	bne.n	8002746 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002736:	4b41      	ldr	r3, [pc, #260]	; (800283c <HAL_RCC_ClockConfig+0x1c4>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d109      	bne.n	8002756 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e073      	b.n	800282e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002746:	4b3d      	ldr	r3, [pc, #244]	; (800283c <HAL_RCC_ClockConfig+0x1c4>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d101      	bne.n	8002756 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e06b      	b.n	800282e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002756:	4b39      	ldr	r3, [pc, #228]	; (800283c <HAL_RCC_ClockConfig+0x1c4>)
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f023 0203 	bic.w	r2, r3, #3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	4936      	ldr	r1, [pc, #216]	; (800283c <HAL_RCC_ClockConfig+0x1c4>)
 8002764:	4313      	orrs	r3, r2
 8002766:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002768:	f7fe fc10 	bl	8000f8c <HAL_GetTick>
 800276c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800276e:	e00a      	b.n	8002786 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002770:	f7fe fc0c 	bl	8000f8c <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	f241 3288 	movw	r2, #5000	; 0x1388
 800277e:	4293      	cmp	r3, r2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e053      	b.n	800282e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002786:	4b2d      	ldr	r3, [pc, #180]	; (800283c <HAL_RCC_ClockConfig+0x1c4>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f003 020c 	and.w	r2, r3, #12
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	429a      	cmp	r2, r3
 8002796:	d1eb      	bne.n	8002770 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002798:	4b27      	ldr	r3, [pc, #156]	; (8002838 <HAL_RCC_ClockConfig+0x1c0>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0307 	and.w	r3, r3, #7
 80027a0:	683a      	ldr	r2, [r7, #0]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d210      	bcs.n	80027c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027a6:	4b24      	ldr	r3, [pc, #144]	; (8002838 <HAL_RCC_ClockConfig+0x1c0>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f023 0207 	bic.w	r2, r3, #7
 80027ae:	4922      	ldr	r1, [pc, #136]	; (8002838 <HAL_RCC_ClockConfig+0x1c0>)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027b6:	4b20      	ldr	r3, [pc, #128]	; (8002838 <HAL_RCC_ClockConfig+0x1c0>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0307 	and.w	r3, r3, #7
 80027be:	683a      	ldr	r2, [r7, #0]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d001      	beq.n	80027c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e032      	b.n	800282e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0304 	and.w	r3, r3, #4
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d008      	beq.n	80027e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027d4:	4b19      	ldr	r3, [pc, #100]	; (800283c <HAL_RCC_ClockConfig+0x1c4>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	4916      	ldr	r1, [pc, #88]	; (800283c <HAL_RCC_ClockConfig+0x1c4>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0308 	and.w	r3, r3, #8
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d009      	beq.n	8002806 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027f2:	4b12      	ldr	r3, [pc, #72]	; (800283c <HAL_RCC_ClockConfig+0x1c4>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	490e      	ldr	r1, [pc, #56]	; (800283c <HAL_RCC_ClockConfig+0x1c4>)
 8002802:	4313      	orrs	r3, r2
 8002804:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002806:	f000 f821 	bl	800284c <HAL_RCC_GetSysClockFreq>
 800280a:	4602      	mov	r2, r0
 800280c:	4b0b      	ldr	r3, [pc, #44]	; (800283c <HAL_RCC_ClockConfig+0x1c4>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	091b      	lsrs	r3, r3, #4
 8002812:	f003 030f 	and.w	r3, r3, #15
 8002816:	490a      	ldr	r1, [pc, #40]	; (8002840 <HAL_RCC_ClockConfig+0x1c8>)
 8002818:	5ccb      	ldrb	r3, [r1, r3]
 800281a:	fa22 f303 	lsr.w	r3, r2, r3
 800281e:	4a09      	ldr	r2, [pc, #36]	; (8002844 <HAL_RCC_ClockConfig+0x1cc>)
 8002820:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002822:	4b09      	ldr	r3, [pc, #36]	; (8002848 <HAL_RCC_ClockConfig+0x1d0>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4618      	mov	r0, r3
 8002828:	f7fe fb6e 	bl	8000f08 <HAL_InitTick>

  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	40022000 	.word	0x40022000
 800283c:	40021000 	.word	0x40021000
 8002840:	08002e78 	.word	0x08002e78
 8002844:	20000000 	.word	0x20000000
 8002848:	20000004 	.word	0x20000004

0800284c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800284c:	b480      	push	{r7}
 800284e:	b087      	sub	sp, #28
 8002850:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002852:	2300      	movs	r3, #0
 8002854:	60fb      	str	r3, [r7, #12]
 8002856:	2300      	movs	r3, #0
 8002858:	60bb      	str	r3, [r7, #8]
 800285a:	2300      	movs	r3, #0
 800285c:	617b      	str	r3, [r7, #20]
 800285e:	2300      	movs	r3, #0
 8002860:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002862:	2300      	movs	r3, #0
 8002864:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002866:	4b1e      	ldr	r3, [pc, #120]	; (80028e0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f003 030c 	and.w	r3, r3, #12
 8002872:	2b04      	cmp	r3, #4
 8002874:	d002      	beq.n	800287c <HAL_RCC_GetSysClockFreq+0x30>
 8002876:	2b08      	cmp	r3, #8
 8002878:	d003      	beq.n	8002882 <HAL_RCC_GetSysClockFreq+0x36>
 800287a:	e027      	b.n	80028cc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800287c:	4b19      	ldr	r3, [pc, #100]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x98>)
 800287e:	613b      	str	r3, [r7, #16]
      break;
 8002880:	e027      	b.n	80028d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	0c9b      	lsrs	r3, r3, #18
 8002886:	f003 030f 	and.w	r3, r3, #15
 800288a:	4a17      	ldr	r2, [pc, #92]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800288c:	5cd3      	ldrb	r3, [r2, r3]
 800288e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d010      	beq.n	80028bc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800289a:	4b11      	ldr	r3, [pc, #68]	; (80028e0 <HAL_RCC_GetSysClockFreq+0x94>)
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	0c5b      	lsrs	r3, r3, #17
 80028a0:	f003 0301 	and.w	r3, r3, #1
 80028a4:	4a11      	ldr	r2, [pc, #68]	; (80028ec <HAL_RCC_GetSysClockFreq+0xa0>)
 80028a6:	5cd3      	ldrb	r3, [r2, r3]
 80028a8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a0d      	ldr	r2, [pc, #52]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80028ae:	fb03 f202 	mul.w	r2, r3, r2
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028b8:	617b      	str	r3, [r7, #20]
 80028ba:	e004      	b.n	80028c6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4a0c      	ldr	r2, [pc, #48]	; (80028f0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80028c0:	fb02 f303 	mul.w	r3, r2, r3
 80028c4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	613b      	str	r3, [r7, #16]
      break;
 80028ca:	e002      	b.n	80028d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028cc:	4b05      	ldr	r3, [pc, #20]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80028ce:	613b      	str	r3, [r7, #16]
      break;
 80028d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028d2:	693b      	ldr	r3, [r7, #16]
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	371c      	adds	r7, #28
 80028d8:	46bd      	mov	sp, r7
 80028da:	bc80      	pop	{r7}
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	40021000 	.word	0x40021000
 80028e4:	007a1200 	.word	0x007a1200
 80028e8:	08002e88 	.word	0x08002e88
 80028ec:	08002e98 	.word	0x08002e98
 80028f0:	003d0900 	.word	0x003d0900

080028f4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028fc:	4b0a      	ldr	r3, [pc, #40]	; (8002928 <RCC_Delay+0x34>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a0a      	ldr	r2, [pc, #40]	; (800292c <RCC_Delay+0x38>)
 8002902:	fba2 2303 	umull	r2, r3, r2, r3
 8002906:	0a5b      	lsrs	r3, r3, #9
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	fb02 f303 	mul.w	r3, r2, r3
 800290e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002910:	bf00      	nop
  }
  while (Delay --);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	1e5a      	subs	r2, r3, #1
 8002916:	60fa      	str	r2, [r7, #12]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d1f9      	bne.n	8002910 <RCC_Delay+0x1c>
}
 800291c:	bf00      	nop
 800291e:	bf00      	nop
 8002920:	3714      	adds	r7, #20
 8002922:	46bd      	mov	sp, r7
 8002924:	bc80      	pop	{r7}
 8002926:	4770      	bx	lr
 8002928:	20000000 	.word	0x20000000
 800292c:	10624dd3 	.word	0x10624dd3

08002930 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d101      	bne.n	8002942 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e041      	b.n	80029c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b00      	cmp	r3, #0
 800294c:	d106      	bne.n	800295c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f7fe fa46 	bl	8000de8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2202      	movs	r2, #2
 8002960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	3304      	adds	r3, #4
 800296c:	4619      	mov	r1, r3
 800296e:	4610      	mov	r0, r2
 8002970:	f000 f8f4 	bl	8002b5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b084      	sub	sp, #16
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
 80029d6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029d8:	2300      	movs	r3, #0
 80029da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d101      	bne.n	80029ea <HAL_TIM_ConfigClockSource+0x1c>
 80029e6:	2302      	movs	r3, #2
 80029e8:	e0b4      	b.n	8002b54 <HAL_TIM_ConfigClockSource+0x186>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2201      	movs	r2, #1
 80029ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2202      	movs	r2, #2
 80029f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002a08:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a10:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	68ba      	ldr	r2, [r7, #8]
 8002a18:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a22:	d03e      	beq.n	8002aa2 <HAL_TIM_ConfigClockSource+0xd4>
 8002a24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a28:	f200 8087 	bhi.w	8002b3a <HAL_TIM_ConfigClockSource+0x16c>
 8002a2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a30:	f000 8086 	beq.w	8002b40 <HAL_TIM_ConfigClockSource+0x172>
 8002a34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a38:	d87f      	bhi.n	8002b3a <HAL_TIM_ConfigClockSource+0x16c>
 8002a3a:	2b70      	cmp	r3, #112	; 0x70
 8002a3c:	d01a      	beq.n	8002a74 <HAL_TIM_ConfigClockSource+0xa6>
 8002a3e:	2b70      	cmp	r3, #112	; 0x70
 8002a40:	d87b      	bhi.n	8002b3a <HAL_TIM_ConfigClockSource+0x16c>
 8002a42:	2b60      	cmp	r3, #96	; 0x60
 8002a44:	d050      	beq.n	8002ae8 <HAL_TIM_ConfigClockSource+0x11a>
 8002a46:	2b60      	cmp	r3, #96	; 0x60
 8002a48:	d877      	bhi.n	8002b3a <HAL_TIM_ConfigClockSource+0x16c>
 8002a4a:	2b50      	cmp	r3, #80	; 0x50
 8002a4c:	d03c      	beq.n	8002ac8 <HAL_TIM_ConfigClockSource+0xfa>
 8002a4e:	2b50      	cmp	r3, #80	; 0x50
 8002a50:	d873      	bhi.n	8002b3a <HAL_TIM_ConfigClockSource+0x16c>
 8002a52:	2b40      	cmp	r3, #64	; 0x40
 8002a54:	d058      	beq.n	8002b08 <HAL_TIM_ConfigClockSource+0x13a>
 8002a56:	2b40      	cmp	r3, #64	; 0x40
 8002a58:	d86f      	bhi.n	8002b3a <HAL_TIM_ConfigClockSource+0x16c>
 8002a5a:	2b30      	cmp	r3, #48	; 0x30
 8002a5c:	d064      	beq.n	8002b28 <HAL_TIM_ConfigClockSource+0x15a>
 8002a5e:	2b30      	cmp	r3, #48	; 0x30
 8002a60:	d86b      	bhi.n	8002b3a <HAL_TIM_ConfigClockSource+0x16c>
 8002a62:	2b20      	cmp	r3, #32
 8002a64:	d060      	beq.n	8002b28 <HAL_TIM_ConfigClockSource+0x15a>
 8002a66:	2b20      	cmp	r3, #32
 8002a68:	d867      	bhi.n	8002b3a <HAL_TIM_ConfigClockSource+0x16c>
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d05c      	beq.n	8002b28 <HAL_TIM_ConfigClockSource+0x15a>
 8002a6e:	2b10      	cmp	r3, #16
 8002a70:	d05a      	beq.n	8002b28 <HAL_TIM_ConfigClockSource+0x15a>
 8002a72:	e062      	b.n	8002b3a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a84:	f000 f943 	bl	8002d0e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002a96:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	68ba      	ldr	r2, [r7, #8]
 8002a9e:	609a      	str	r2, [r3, #8]
      break;
 8002aa0:	e04f      	b.n	8002b42 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ab2:	f000 f92c 	bl	8002d0e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	689a      	ldr	r2, [r3, #8]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ac4:	609a      	str	r2, [r3, #8]
      break;
 8002ac6:	e03c      	b.n	8002b42 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	f000 f8a3 	bl	8002c20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2150      	movs	r1, #80	; 0x50
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f000 f8fa 	bl	8002cda <TIM_ITRx_SetConfig>
      break;
 8002ae6:	e02c      	b.n	8002b42 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002af4:	461a      	mov	r2, r3
 8002af6:	f000 f8c1 	bl	8002c7c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2160      	movs	r1, #96	; 0x60
 8002b00:	4618      	mov	r0, r3
 8002b02:	f000 f8ea 	bl	8002cda <TIM_ITRx_SetConfig>
      break;
 8002b06:	e01c      	b.n	8002b42 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b14:	461a      	mov	r2, r3
 8002b16:	f000 f883 	bl	8002c20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2140      	movs	r1, #64	; 0x40
 8002b20:	4618      	mov	r0, r3
 8002b22:	f000 f8da 	bl	8002cda <TIM_ITRx_SetConfig>
      break;
 8002b26:	e00c      	b.n	8002b42 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4619      	mov	r1, r3
 8002b32:	4610      	mov	r0, r2
 8002b34:	f000 f8d1 	bl	8002cda <TIM_ITRx_SetConfig>
      break;
 8002b38:	e003      	b.n	8002b42 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	73fb      	strb	r3, [r7, #15]
      break;
 8002b3e:	e000      	b.n	8002b42 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002b40:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2201      	movs	r2, #1
 8002b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3710      	adds	r7, #16
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b085      	sub	sp, #20
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	4a29      	ldr	r2, [pc, #164]	; (8002c14 <TIM_Base_SetConfig+0xb8>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d00b      	beq.n	8002b8c <TIM_Base_SetConfig+0x30>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b7a:	d007      	beq.n	8002b8c <TIM_Base_SetConfig+0x30>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	4a26      	ldr	r2, [pc, #152]	; (8002c18 <TIM_Base_SetConfig+0xbc>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d003      	beq.n	8002b8c <TIM_Base_SetConfig+0x30>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4a25      	ldr	r2, [pc, #148]	; (8002c1c <TIM_Base_SetConfig+0xc0>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d108      	bne.n	8002b9e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	68fa      	ldr	r2, [r7, #12]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a1c      	ldr	r2, [pc, #112]	; (8002c14 <TIM_Base_SetConfig+0xb8>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d00b      	beq.n	8002bbe <TIM_Base_SetConfig+0x62>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bac:	d007      	beq.n	8002bbe <TIM_Base_SetConfig+0x62>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a19      	ldr	r2, [pc, #100]	; (8002c18 <TIM_Base_SetConfig+0xbc>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d003      	beq.n	8002bbe <TIM_Base_SetConfig+0x62>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a18      	ldr	r2, [pc, #96]	; (8002c1c <TIM_Base_SetConfig+0xc0>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d108      	bne.n	8002bd0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	68fa      	ldr	r2, [r7, #12]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	695b      	ldr	r3, [r3, #20]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	68fa      	ldr	r2, [r7, #12]
 8002be2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	689a      	ldr	r2, [r3, #8]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	4a07      	ldr	r2, [pc, #28]	; (8002c14 <TIM_Base_SetConfig+0xb8>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d103      	bne.n	8002c04 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	691a      	ldr	r2, [r3, #16]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	615a      	str	r2, [r3, #20]
}
 8002c0a:	bf00      	nop
 8002c0c:	3714      	adds	r7, #20
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bc80      	pop	{r7}
 8002c12:	4770      	bx	lr
 8002c14:	40012c00 	.word	0x40012c00
 8002c18:	40000400 	.word	0x40000400
 8002c1c:	40000800 	.word	0x40000800

08002c20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b087      	sub	sp, #28
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6a1b      	ldr	r3, [r3, #32]
 8002c30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6a1b      	ldr	r3, [r3, #32]
 8002c36:	f023 0201 	bic.w	r2, r3, #1
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	011b      	lsls	r3, r3, #4
 8002c50:	693a      	ldr	r2, [r7, #16]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	f023 030a 	bic.w	r3, r3, #10
 8002c5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c5e:	697a      	ldr	r2, [r7, #20]
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	693a      	ldr	r2, [r7, #16]
 8002c6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	697a      	ldr	r2, [r7, #20]
 8002c70:	621a      	str	r2, [r3, #32]
}
 8002c72:	bf00      	nop
 8002c74:	371c      	adds	r7, #28
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bc80      	pop	{r7}
 8002c7a:	4770      	bx	lr

08002c7c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b087      	sub	sp, #28
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6a1b      	ldr	r3, [r3, #32]
 8002c8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6a1b      	ldr	r3, [r3, #32]
 8002c92:	f023 0210 	bic.w	r2, r3, #16
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ca6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	031b      	lsls	r3, r3, #12
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002cb8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	011b      	lsls	r3, r3, #4
 8002cbe:	697a      	ldr	r2, [r7, #20]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	693a      	ldr	r2, [r7, #16]
 8002cc8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	697a      	ldr	r2, [r7, #20]
 8002cce:	621a      	str	r2, [r3, #32]
}
 8002cd0:	bf00      	nop
 8002cd2:	371c      	adds	r7, #28
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bc80      	pop	{r7}
 8002cd8:	4770      	bx	lr

08002cda <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002cda:	b480      	push	{r7}
 8002cdc:	b085      	sub	sp, #20
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
 8002ce2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cf0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002cf2:	683a      	ldr	r2, [r7, #0]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	f043 0307 	orr.w	r3, r3, #7
 8002cfc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	68fa      	ldr	r2, [r7, #12]
 8002d02:	609a      	str	r2, [r3, #8]
}
 8002d04:	bf00      	nop
 8002d06:	3714      	adds	r7, #20
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bc80      	pop	{r7}
 8002d0c:	4770      	bx	lr

08002d0e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d0e:	b480      	push	{r7}
 8002d10:	b087      	sub	sp, #28
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	60f8      	str	r0, [r7, #12]
 8002d16:	60b9      	str	r1, [r7, #8]
 8002d18:	607a      	str	r2, [r7, #4]
 8002d1a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d28:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	021a      	lsls	r2, r3, #8
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	431a      	orrs	r2, r3
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	697a      	ldr	r2, [r7, #20]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	697a      	ldr	r2, [r7, #20]
 8002d40:	609a      	str	r2, [r3, #8]
}
 8002d42:	bf00      	nop
 8002d44:	371c      	adds	r7, #28
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bc80      	pop	{r7}
 8002d4a:	4770      	bx	lr

08002d4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b085      	sub	sp, #20
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d101      	bne.n	8002d64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d60:	2302      	movs	r3, #2
 8002d62:	e046      	b.n	8002df2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2202      	movs	r2, #2
 8002d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68fa      	ldr	r2, [r7, #12]
 8002d9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a16      	ldr	r2, [pc, #88]	; (8002dfc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d00e      	beq.n	8002dc6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002db0:	d009      	beq.n	8002dc6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a12      	ldr	r2, [pc, #72]	; (8002e00 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d004      	beq.n	8002dc6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a10      	ldr	r2, [pc, #64]	; (8002e04 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d10c      	bne.n	8002de0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002dcc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	68ba      	ldr	r2, [r7, #8]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68ba      	ldr	r2, [r7, #8]
 8002dde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3714      	adds	r7, #20
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bc80      	pop	{r7}
 8002dfa:	4770      	bx	lr
 8002dfc:	40012c00 	.word	0x40012c00
 8002e00:	40000400 	.word	0x40000400
 8002e04:	40000800 	.word	0x40000800

08002e08 <memset>:
 8002e08:	4603      	mov	r3, r0
 8002e0a:	4402      	add	r2, r0
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d100      	bne.n	8002e12 <memset+0xa>
 8002e10:	4770      	bx	lr
 8002e12:	f803 1b01 	strb.w	r1, [r3], #1
 8002e16:	e7f9      	b.n	8002e0c <memset+0x4>

08002e18 <__libc_init_array>:
 8002e18:	b570      	push	{r4, r5, r6, lr}
 8002e1a:	2600      	movs	r6, #0
 8002e1c:	4d0c      	ldr	r5, [pc, #48]	; (8002e50 <__libc_init_array+0x38>)
 8002e1e:	4c0d      	ldr	r4, [pc, #52]	; (8002e54 <__libc_init_array+0x3c>)
 8002e20:	1b64      	subs	r4, r4, r5
 8002e22:	10a4      	asrs	r4, r4, #2
 8002e24:	42a6      	cmp	r6, r4
 8002e26:	d109      	bne.n	8002e3c <__libc_init_array+0x24>
 8002e28:	f000 f81a 	bl	8002e60 <_init>
 8002e2c:	2600      	movs	r6, #0
 8002e2e:	4d0a      	ldr	r5, [pc, #40]	; (8002e58 <__libc_init_array+0x40>)
 8002e30:	4c0a      	ldr	r4, [pc, #40]	; (8002e5c <__libc_init_array+0x44>)
 8002e32:	1b64      	subs	r4, r4, r5
 8002e34:	10a4      	asrs	r4, r4, #2
 8002e36:	42a6      	cmp	r6, r4
 8002e38:	d105      	bne.n	8002e46 <__libc_init_array+0x2e>
 8002e3a:	bd70      	pop	{r4, r5, r6, pc}
 8002e3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e40:	4798      	blx	r3
 8002e42:	3601      	adds	r6, #1
 8002e44:	e7ee      	b.n	8002e24 <__libc_init_array+0xc>
 8002e46:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e4a:	4798      	blx	r3
 8002e4c:	3601      	adds	r6, #1
 8002e4e:	e7f2      	b.n	8002e36 <__libc_init_array+0x1e>
 8002e50:	08002e9c 	.word	0x08002e9c
 8002e54:	08002e9c 	.word	0x08002e9c
 8002e58:	08002e9c 	.word	0x08002e9c
 8002e5c:	08002ea0 	.word	0x08002ea0

08002e60 <_init>:
 8002e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e62:	bf00      	nop
 8002e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e66:	bc08      	pop	{r3}
 8002e68:	469e      	mov	lr, r3
 8002e6a:	4770      	bx	lr

08002e6c <_fini>:
 8002e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e6e:	bf00      	nop
 8002e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e72:	bc08      	pop	{r3}
 8002e74:	469e      	mov	lr, r3
 8002e76:	4770      	bx	lr
