
prototype.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b18  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08004c24  08004c24  00014c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c50  08004c50  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004c50  08004c50  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c50  08004c50  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c50  08004c50  00014c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c54  08004c54  00014c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004c58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000378  2000000c  08004c64  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000384  08004c64  00020384  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f11e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000247a  00000000  00000000  0002f196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ec0  00000000  00000000  00031610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b81  00000000  00000000  000324d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000180ea  00000000  00000000  00033051  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001032e  00000000  00000000  0004b13b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008cc12  00000000  00000000  0005b469  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003d68  00000000  00000000  000e807c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000ebde4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004c0c 	.word	0x08004c0c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08004c0c 	.word	0x08004c0c

0800014c <Can_Filter_Config>:
uint8_t	slaves_count = 0;
uint32_t Can_TxMailBox[3];

static ptrVoidFunction CAN_ISR_FUNCTION = NULL;

HAL_StatusTypeDef Can_Filter_Config(CAN_HandleTypeDef *hcan,uint8_t master_or_slave){
 800014c:	b580      	push	{r7, lr}
 800014e:	b08c      	sub	sp, #48	; 0x30
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	460b      	mov	r3, r1
 8000156:	70fb      	strb	r3, [r7, #3]
	if(!master_or_slave){
 8000158:	78fb      	ldrb	r3, [r7, #3]
 800015a:	2b00      	cmp	r3, #0
 800015c:	d139      	bne.n	80001d2 <Can_Filter_Config+0x86>

		CAN_FilterTypeDef	CANFilterConfig;
		CANFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 800015e:	2301      	movs	r3, #1
 8000160:	62bb      	str	r3, [r7, #40]	; 0x28
		CANFilterConfig.FilterBank = 10;
 8000162:	230a      	movs	r3, #10
 8000164:	61fb      	str	r3, [r7, #28]
		CANFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000166:	2300      	movs	r3, #0
 8000168:	61bb      	str	r3, [r7, #24]
		CANFilterConfig.FilterIdHigh = can_id<<5;
 800016a:	4b2f      	ldr	r3, [pc, #188]	; (8000228 <Can_Filter_Config+0xdc>)
 800016c:	681a      	ldr	r2, [r3, #0]
 800016e:	4b2f      	ldr	r3, [pc, #188]	; (800022c <Can_Filter_Config+0xe0>)
 8000170:	681b      	ldr	r3, [r3, #0]
 8000172:	405a      	eors	r2, r3
 8000174:	4b2e      	ldr	r3, [pc, #184]	; (8000230 <Can_Filter_Config+0xe4>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4053      	eors	r3, r2
 800017a:	0e1b      	lsrs	r3, r3, #24
 800017c:	015b      	lsls	r3, r3, #5
 800017e:	60bb      	str	r3, [r7, #8]
		CANFilterConfig.FilterIdLow = 0X0000;
 8000180:	2300      	movs	r3, #0
 8000182:	60fb      	str	r3, [r7, #12]
		CANFilterConfig.FilterMaskIdHigh = can_id<<5;
 8000184:	4b28      	ldr	r3, [pc, #160]	; (8000228 <Can_Filter_Config+0xdc>)
 8000186:	681a      	ldr	r2, [r3, #0]
 8000188:	4b28      	ldr	r3, [pc, #160]	; (800022c <Can_Filter_Config+0xe0>)
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	405a      	eors	r2, r3
 800018e:	4b28      	ldr	r3, [pc, #160]	; (8000230 <Can_Filter_Config+0xe4>)
 8000190:	681b      	ldr	r3, [r3, #0]
 8000192:	4053      	eors	r3, r2
 8000194:	0e1b      	lsrs	r3, r3, #24
 8000196:	015b      	lsls	r3, r3, #5
 8000198:	613b      	str	r3, [r7, #16]
		CANFilterConfig.FilterMaskIdLow = 0X0000;
 800019a:	2300      	movs	r3, #0
 800019c:	617b      	str	r3, [r7, #20]
		CANFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800019e:	2300      	movs	r3, #0
 80001a0:	623b      	str	r3, [r7, #32]
//		CANFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
		CANFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80001a2:	2301      	movs	r3, #1
 80001a4:	627b      	str	r3, [r7, #36]	; 0x24
		CANFilterConfig.SlaveStartFilterBank = 0;
 80001a6:	2300      	movs	r3, #0
 80001a8:	62fb      	str	r3, [r7, #44]	; 0x2c
		if( HAL_CAN_ConfigFilter(hcan, &CANFilterConfig) != HAL_OK)
 80001aa:	f107 0308 	add.w	r3, r7, #8
 80001ae:	4619      	mov	r1, r3
 80001b0:	6878      	ldr	r0, [r7, #4]
 80001b2:	f001 fcfe 	bl	8001bb2 <HAL_CAN_ConfigFilter>
 80001b6:	4603      	mov	r3, r0
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d001      	beq.n	80001c0 <Can_Filter_Config+0x74>
		{
			return HAL_ERROR;
 80001bc:	2301      	movs	r3, #1
 80001be:	e02f      	b.n	8000220 <Can_Filter_Config+0xd4>
		}
		HAL_CAN_Start(hcan);
 80001c0:	6878      	ldr	r0, [r7, #4]
 80001c2:	f001 fdbf 	bl	8001d44 <HAL_CAN_Start>
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80001c6:	2102      	movs	r1, #2
 80001c8:	6878      	ldr	r0, [r7, #4]
 80001ca:	f001 ffef 	bl	80021ac <HAL_CAN_ActivateNotification>

		return HAL_OK;
 80001ce:	2300      	movs	r3, #0
 80001d0:	e026      	b.n	8000220 <Can_Filter_Config+0xd4>
	}
	else
	{
		CAN_FilterTypeDef	CANFilterConfig;
		CANFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 80001d2:	2301      	movs	r3, #1
 80001d4:	62bb      	str	r3, [r7, #40]	; 0x28
		CANFilterConfig.FilterBank = 10;
 80001d6:	230a      	movs	r3, #10
 80001d8:	61fb      	str	r3, [r7, #28]
		CANFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80001da:	2300      	movs	r3, #0
 80001dc:	61bb      	str	r3, [r7, #24]
		CANFilterConfig.FilterIdHigh = CAN_Master_Id<<5;
 80001de:	2300      	movs	r3, #0
 80001e0:	60bb      	str	r3, [r7, #8]
		CANFilterConfig.FilterIdLow = 0X0000;
 80001e2:	2300      	movs	r3, #0
 80001e4:	60fb      	str	r3, [r7, #12]
		CANFilterConfig.FilterMaskIdHigh = CAN_Master_Id<<5;
 80001e6:	2300      	movs	r3, #0
 80001e8:	613b      	str	r3, [r7, #16]
		CANFilterConfig.FilterMaskIdLow = 0X0000;
 80001ea:	2300      	movs	r3, #0
 80001ec:	617b      	str	r3, [r7, #20]
		CANFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80001ee:	2300      	movs	r3, #0
 80001f0:	623b      	str	r3, [r7, #32]
//		CANFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
		CANFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80001f2:	2301      	movs	r3, #1
 80001f4:	627b      	str	r3, [r7, #36]	; 0x24
		CANFilterConfig.SlaveStartFilterBank = 0;
 80001f6:	2300      	movs	r3, #0
 80001f8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( HAL_CAN_ConfigFilter(hcan, &CANFilterConfig) != HAL_OK)
 80001fa:	f107 0308 	add.w	r3, r7, #8
 80001fe:	4619      	mov	r1, r3
 8000200:	6878      	ldr	r0, [r7, #4]
 8000202:	f001 fcd6 	bl	8001bb2 <HAL_CAN_ConfigFilter>
 8000206:	4603      	mov	r3, r0
 8000208:	2b00      	cmp	r3, #0
 800020a:	d001      	beq.n	8000210 <Can_Filter_Config+0xc4>
		{
			return HAL_ERROR;
 800020c:	2301      	movs	r3, #1
 800020e:	e007      	b.n	8000220 <Can_Filter_Config+0xd4>
		}
		HAL_CAN_Start(hcan);
 8000210:	6878      	ldr	r0, [r7, #4]
 8000212:	f001 fd97 	bl	8001d44 <HAL_CAN_Start>
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000216:	2102      	movs	r1, #2
 8000218:	6878      	ldr	r0, [r7, #4]
 800021a:	f001 ffc7 	bl	80021ac <HAL_CAN_ActivateNotification>
		return HAL_OK;
 800021e:	2300      	movs	r3, #0
	}
}
 8000220:	4618      	mov	r0, r3
 8000222:	3730      	adds	r7, #48	; 0x30
 8000224:	46bd      	mov	sp, r7
 8000226:	bd80      	pop	{r7, pc}
 8000228:	1ffff7e8 	.word	0x1ffff7e8
 800022c:	1ffff7ec 	.word	0x1ffff7ec
 8000230:	1ffff7f0 	.word	0x1ffff7f0

08000234 <Can_Send>:

HAL_StatusTypeDef Can_Send(CAN_HandleTypeDef *hcan,uint8_t ID, uint8_t DLC, uint8_t* data,uint32_t* Mailbox)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af00      	add	r7, sp, #0
 800023a:	60f8      	str	r0, [r7, #12]
 800023c:	607b      	str	r3, [r7, #4]
 800023e:	460b      	mov	r3, r1
 8000240:	72fb      	strb	r3, [r7, #11]
 8000242:	4613      	mov	r3, r2
 8000244:	72bb      	strb	r3, [r7, #10]
	TxHeader.IDE = CAN_ID_STD;
 8000246:	4b0e      	ldr	r3, [pc, #56]	; (8000280 <Can_Send+0x4c>)
 8000248:	2200      	movs	r2, #0
 800024a:	609a      	str	r2, [r3, #8]
	TxHeader.StdId = ID;
 800024c:	7afb      	ldrb	r3, [r7, #11]
 800024e:	4a0c      	ldr	r2, [pc, #48]	; (8000280 <Can_Send+0x4c>)
 8000250:	6013      	str	r3, [r2, #0]
	TxHeader.RTR = CAN_RTR_DATA;
 8000252:	4b0b      	ldr	r3, [pc, #44]	; (8000280 <Can_Send+0x4c>)
 8000254:	2200      	movs	r2, #0
 8000256:	60da      	str	r2, [r3, #12]
	TxHeader.DLC = DLC;
 8000258:	7abb      	ldrb	r3, [r7, #10]
 800025a:	4a09      	ldr	r2, [pc, #36]	; (8000280 <Can_Send+0x4c>)
 800025c:	6113      	str	r3, [r2, #16]

	if ( HAL_CAN_AddTxMessage(hcan, &TxHeader, data, Mailbox) != HAL_OK)
 800025e:	69bb      	ldr	r3, [r7, #24]
 8000260:	687a      	ldr	r2, [r7, #4]
 8000262:	4907      	ldr	r1, [pc, #28]	; (8000280 <Can_Send+0x4c>)
 8000264:	68f8      	ldr	r0, [r7, #12]
 8000266:	f001 fdb1 	bl	8001dcc <HAL_CAN_AddTxMessage>
 800026a:	4603      	mov	r3, r0
 800026c:	2b00      	cmp	r3, #0
 800026e:	d001      	beq.n	8000274 <Can_Send+0x40>
	{

		return HAL_ERROR;
 8000270:	2301      	movs	r3, #1
 8000272:	e000      	b.n	8000276 <Can_Send+0x42>
	}

	return HAL_OK;
 8000274:	2300      	movs	r3, #0
}
 8000276:	4618      	mov	r0, r3
 8000278:	3710      	adds	r7, #16
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	20000028 	.word	0x20000028

08000284 <Can_InterruptCallBack>:

void Can_InterruptCallBack(ptrVoidFunction callBackFunction)
{
 8000284:	b480      	push	{r7}
 8000286:	b083      	sub	sp, #12
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
	if(callBackFunction != NULL)
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	2b00      	cmp	r3, #0
 8000290:	d002      	beq.n	8000298 <Can_InterruptCallBack+0x14>
	{
		CAN_ISR_FUNCTION = callBackFunction;
 8000292:	4a04      	ldr	r2, [pc, #16]	; (80002a4 <Can_InterruptCallBack+0x20>)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	6013      	str	r3, [r2, #0]
	}
}
 8000298:	bf00      	nop
 800029a:	370c      	adds	r7, #12
 800029c:	46bd      	mov	sp, r7
 800029e:	bc80      	pop	{r7}
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop
 80002a4:	20000070 	.word	0x20000070

080002a8 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b082      	sub	sp, #8
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, Can_RxData);
 80002b0:	4b06      	ldr	r3, [pc, #24]	; (80002cc <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 80002b2:	4a07      	ldr	r2, [pc, #28]	; (80002d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 80002b4:	2100      	movs	r1, #0
 80002b6:	6878      	ldr	r0, [r7, #4]
 80002b8:	f001 fe57 	bl	8001f6a <HAL_CAN_GetRxMessage>

	CAN_ISR_FUNCTION();
 80002bc:	4b05      	ldr	r3, [pc, #20]	; (80002d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	4798      	blx	r3

}
 80002c2:	bf00      	nop
 80002c4:	3708      	adds	r7, #8
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	2000005c 	.word	0x2000005c
 80002d0:	20000040 	.word	0x20000040
 80002d4:	20000070 	.word	0x20000070

080002d8 <priority_queue_init>:
#include <stdint.h>

void heapify(priority_queue* queue, uint8_t index);
void swap_operations(priority_queue* queue, uint8_t index1, uint8_t index2);

void priority_queue_init(priority_queue* queue){
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
	queue->tail = 0;
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	2200      	movs	r2, #0
 80002e4:	701a      	strb	r2, [r3, #0]
}
 80002e6:	bf00      	nop
 80002e8:	370c      	adds	r7, #12
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bc80      	pop	{r7}
 80002ee:	4770      	bx	lr

080002f0 <priority_queue_push>:

void priority_queue_push(priority_queue* queue, uint8_t item, uint8_t priority){
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b084      	sub	sp, #16
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
 80002f8:	460b      	mov	r3, r1
 80002fa:	70fb      	strb	r3, [r7, #3]
 80002fc:	4613      	mov	r3, r2
 80002fe:	70bb      	strb	r3, [r7, #2]
	// TODO: add here an error state
	if(queue->tail >= MAX_ITEM_NUM)
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	2b0f      	cmp	r3, #15
 8000306:	d828      	bhi.n	800035a <priority_queue_push+0x6a>
		return;
	// add queue_item to the queue at index tail [x x x tail] <----- three elements, tail = 3, tail = number of elements
	queue->queue[queue->tail].item = item;
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	687a      	ldr	r2, [r7, #4]
 800030e:	005b      	lsls	r3, r3, #1
 8000310:	4413      	add	r3, r2
 8000312:	78fa      	ldrb	r2, [r7, #3]
 8000314:	705a      	strb	r2, [r3, #1]
	queue->queue[queue->tail].priority = priority;
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	781b      	ldrb	r3, [r3, #0]
 800031a:	687a      	ldr	r2, [r7, #4]
 800031c:	005b      	lsls	r3, r3, #1
 800031e:	4413      	add	r3, r2
 8000320:	78ba      	ldrb	r2, [r7, #2]
 8000322:	709a      	strb	r2, [r3, #2]
	// heapify the queue
	for(int i=(queue->tail-1)/2; i>=0; i--)
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	3b01      	subs	r3, #1
 800032a:	0fda      	lsrs	r2, r3, #31
 800032c:	4413      	add	r3, r2
 800032e:	105b      	asrs	r3, r3, #1
 8000330:	60fb      	str	r3, [r7, #12]
 8000332:	e008      	b.n	8000346 <priority_queue_push+0x56>
		heapify(queue, i);
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	b2db      	uxtb	r3, r3
 8000338:	4619      	mov	r1, r3
 800033a:	6878      	ldr	r0, [r7, #4]
 800033c:	f000 f843 	bl	80003c6 <heapify>
	for(int i=(queue->tail-1)/2; i>=0; i--)
 8000340:	68fb      	ldr	r3, [r7, #12]
 8000342:	3b01      	subs	r3, #1
 8000344:	60fb      	str	r3, [r7, #12]
 8000346:	68fb      	ldr	r3, [r7, #12]
 8000348:	2b00      	cmp	r3, #0
 800034a:	daf3      	bge.n	8000334 <priority_queue_push+0x44>
	// increase number of elements/tail
	queue->tail++;
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	781b      	ldrb	r3, [r3, #0]
 8000350:	3301      	adds	r3, #1
 8000352:	b2da      	uxtb	r2, r3
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	701a      	strb	r2, [r3, #0]
 8000358:	e000      	b.n	800035c <priority_queue_push+0x6c>
		return;
 800035a:	bf00      	nop
}
 800035c:	3710      	adds	r7, #16
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}

08000362 <priority_queue_pop>:

uint8_t priority_queue_pop(priority_queue* queue){
 8000362:	b580      	push	{r7, lr}
 8000364:	b082      	sub	sp, #8
 8000366:	af00      	add	r7, sp, #0
 8000368:	6078      	str	r0, [r7, #4]
	// TODO: add here an errors state
	if(queue->tail <=0)
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	781b      	ldrb	r3, [r3, #0]
 800036e:	2b00      	cmp	r3, #0
 8000370:	d101      	bne.n	8000376 <priority_queue_pop+0x14>
		return 0;
 8000372:	2300      	movs	r3, #0
 8000374:	e018      	b.n	80003a8 <priority_queue_pop+0x46>
	// swap first and last elements
	swap_operations(queue, 0, queue->tail-1);
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	3b01      	subs	r3, #1
 800037c:	b2db      	uxtb	r3, r3
 800037e:	461a      	mov	r2, r3
 8000380:	2100      	movs	r1, #0
 8000382:	6878      	ldr	r0, [r7, #4]
 8000384:	f000 f868 	bl	8000458 <swap_operations>
	// decrement tail so now, last element is out of bounds of the queue
	queue->tail--;
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	781b      	ldrb	r3, [r3, #0]
 800038c:	3b01      	subs	r3, #1
 800038e:	b2da      	uxtb	r2, r3
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	701a      	strb	r2, [r3, #0]
	// heapify the queue
	heapify(queue, 0);
 8000394:	2100      	movs	r1, #0
 8000396:	6878      	ldr	r0, [r7, #4]
 8000398:	f000 f815 	bl	80003c6 <heapify>
	// return the item of the element of the queue, which is discarded
	return queue->queue[queue->tail].item;
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	687a      	ldr	r2, [r7, #4]
 80003a2:	005b      	lsls	r3, r3, #1
 80003a4:	4413      	add	r3, r2
 80003a6:	785b      	ldrb	r3, [r3, #1]
}
 80003a8:	4618      	mov	r0, r3
 80003aa:	3708      	adds	r7, #8
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}

080003b0 <priority_queue_peak>:

uint8_t priority_queue_peak(priority_queue* queue){
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
	return queue->queue[0].item;
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	785b      	ldrb	r3, [r3, #1]
}
 80003bc:	4618      	mov	r0, r3
 80003be:	370c      	adds	r7, #12
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bc80      	pop	{r7}
 80003c4:	4770      	bx	lr

080003c6 <heapify>:

void heapify(priority_queue* queue, uint8_t index){
 80003c6:	b580      	push	{r7, lr}
 80003c8:	b084      	sub	sp, #16
 80003ca:	af00      	add	r7, sp, #0
 80003cc:	6078      	str	r0, [r7, #4]
 80003ce:	460b      	mov	r3, r1
 80003d0:	70fb      	strb	r3, [r7, #3]
	// store current node as the smallest and save left and right children
	uint8_t smallest = index;
 80003d2:	78fb      	ldrb	r3, [r7, #3]
 80003d4:	73fb      	strb	r3, [r7, #15]
	uint8_t left_child = index * 2 + 1;
 80003d6:	78fb      	ldrb	r3, [r7, #3]
 80003d8:	005b      	lsls	r3, r3, #1
 80003da:	b2db      	uxtb	r3, r3
 80003dc:	3301      	adds	r3, #1
 80003de:	73bb      	strb	r3, [r7, #14]
	uint8_t right_child = left_child + 1;
 80003e0:	7bbb      	ldrb	r3, [r7, #14]
 80003e2:	3301      	adds	r3, #1
 80003e4:	737b      	strb	r3, [r7, #13]
	// if left child is smaller than current, left child is the smallest
	if(left_child < queue->tail && queue->queue[left_child].priority < queue->queue[index].priority)
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	781b      	ldrb	r3, [r3, #0]
 80003ea:	7bba      	ldrb	r2, [r7, #14]
 80003ec:	429a      	cmp	r2, r3
 80003ee:	d20d      	bcs.n	800040c <heapify+0x46>
 80003f0:	7bbb      	ldrb	r3, [r7, #14]
 80003f2:	687a      	ldr	r2, [r7, #4]
 80003f4:	005b      	lsls	r3, r3, #1
 80003f6:	4413      	add	r3, r2
 80003f8:	789a      	ldrb	r2, [r3, #2]
 80003fa:	78fb      	ldrb	r3, [r7, #3]
 80003fc:	6879      	ldr	r1, [r7, #4]
 80003fe:	005b      	lsls	r3, r3, #1
 8000400:	440b      	add	r3, r1
 8000402:	789b      	ldrb	r3, [r3, #2]
 8000404:	429a      	cmp	r2, r3
 8000406:	d201      	bcs.n	800040c <heapify+0x46>
		smallest = left_child;
 8000408:	7bbb      	ldrb	r3, [r7, #14]
 800040a:	73fb      	strb	r3, [r7, #15]
	// if right child is smaller than current, right child is the smallest
	if(right_child < queue->tail && queue->queue[right_child].priority < queue->queue[index].priority)
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	7b7a      	ldrb	r2, [r7, #13]
 8000412:	429a      	cmp	r2, r3
 8000414:	d20d      	bcs.n	8000432 <heapify+0x6c>
 8000416:	7b7b      	ldrb	r3, [r7, #13]
 8000418:	687a      	ldr	r2, [r7, #4]
 800041a:	005b      	lsls	r3, r3, #1
 800041c:	4413      	add	r3, r2
 800041e:	789a      	ldrb	r2, [r3, #2]
 8000420:	78fb      	ldrb	r3, [r7, #3]
 8000422:	6879      	ldr	r1, [r7, #4]
 8000424:	005b      	lsls	r3, r3, #1
 8000426:	440b      	add	r3, r1
 8000428:	789b      	ldrb	r3, [r3, #2]
 800042a:	429a      	cmp	r2, r3
 800042c:	d201      	bcs.n	8000432 <heapify+0x6c>
			smallest = right_child;
 800042e:	7b7b      	ldrb	r3, [r7, #13]
 8000430:	73fb      	strb	r3, [r7, #15]
	// if the smallest is not the current, swap smallest with current then heapify again
	if(smallest != index){
 8000432:	7bfa      	ldrb	r2, [r7, #15]
 8000434:	78fb      	ldrb	r3, [r7, #3]
 8000436:	429a      	cmp	r2, r3
 8000438:	d00a      	beq.n	8000450 <heapify+0x8a>
		swap_operations(queue, smallest, index);
 800043a:	78fa      	ldrb	r2, [r7, #3]
 800043c:	7bfb      	ldrb	r3, [r7, #15]
 800043e:	4619      	mov	r1, r3
 8000440:	6878      	ldr	r0, [r7, #4]
 8000442:	f000 f809 	bl	8000458 <swap_operations>
		heapify(queue, smallest);
 8000446:	7bfb      	ldrb	r3, [r7, #15]
 8000448:	4619      	mov	r1, r3
 800044a:	6878      	ldr	r0, [r7, #4]
 800044c:	f7ff ffbb 	bl	80003c6 <heapify>
	}
}
 8000450:	bf00      	nop
 8000452:	3710      	adds	r7, #16
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}

08000458 <swap_operations>:

void swap_operations(priority_queue* queue, uint8_t index1, uint8_t index2){
 8000458:	b480      	push	{r7}
 800045a:	b085      	sub	sp, #20
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
 8000460:	460b      	mov	r3, r1
 8000462:	70fb      	strb	r3, [r7, #3]
 8000464:	4613      	mov	r3, r2
 8000466:	70bb      	strb	r3, [r7, #2]
	queue_item temp = queue->queue[index1];
 8000468:	78fb      	ldrb	r3, [r7, #3]
 800046a:	687a      	ldr	r2, [r7, #4]
 800046c:	005b      	lsls	r3, r3, #1
 800046e:	4413      	add	r3, r2
 8000470:	f107 020c 	add.w	r2, r7, #12
 8000474:	3301      	adds	r3, #1
 8000476:	881b      	ldrh	r3, [r3, #0]
 8000478:	8013      	strh	r3, [r2, #0]
	queue->queue[index1] = queue->queue[index2];
 800047a:	78bb      	ldrb	r3, [r7, #2]
 800047c:	78fa      	ldrb	r2, [r7, #3]
 800047e:	6879      	ldr	r1, [r7, #4]
 8000480:	0052      	lsls	r2, r2, #1
 8000482:	440a      	add	r2, r1
 8000484:	6879      	ldr	r1, [r7, #4]
 8000486:	005b      	lsls	r3, r3, #1
 8000488:	440b      	add	r3, r1
 800048a:	3201      	adds	r2, #1
 800048c:	3301      	adds	r3, #1
 800048e:	881b      	ldrh	r3, [r3, #0]
 8000490:	8013      	strh	r3, [r2, #0]
	queue->queue[index2] = temp;
 8000492:	78bb      	ldrb	r3, [r7, #2]
 8000494:	687a      	ldr	r2, [r7, #4]
 8000496:	005b      	lsls	r3, r3, #1
 8000498:	4413      	add	r3, r2
 800049a:	3301      	adds	r3, #1
 800049c:	f107 020c 	add.w	r2, r7, #12
 80004a0:	8812      	ldrh	r2, [r2, #0]
 80004a2:	801a      	strh	r2, [r3, #0]
}
 80004a4:	bf00      	nop
 80004a6:	3714      	adds	r7, #20
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bc80      	pop	{r7}
 80004ac:	4770      	bx	lr

080004ae <sheduler_init>:
 */

#include "sheduler.h"
#include <stdlib.h>

void sheduler_init(ROM_sheduler* sheduler){
 80004ae:	b580      	push	{r7, lr}
 80004b0:	b084      	sub	sp, #16
 80004b2:	af00      	add	r7, sp, #0
 80004b4:	6078      	str	r0, [r7, #4]
	sheduler->current_slave_in_ROM = 0;
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	2200      	movs	r2, #0
 80004ba:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
	sheduler->number_of_slaves = 0;
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	2200      	movs	r2, #0
 80004c2:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
	sheduler->number_of_available_operations = 0;
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	2200      	movs	r2, #0
 80004ca:	f883 21f1 	strb.w	r2, [r3, #497]	; 0x1f1
	sheduler->number_of_idle_slaves = 0;
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	2200      	movs	r2, #0
 80004d2:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
	sheduler->number_of_waiting_slaves = 0;
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	2200      	movs	r2, #0
 80004da:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
	sheduler->number_of_working_slaves = 0;
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	2200      	movs	r2, #0
 80004e2:	f883 21f0 	strb.w	r2, [r3, #496]	; 0x1f0
	sheduler->sheduler_state = INIT_STATE;
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	2201      	movs	r2, #1
 80004ea:	f883 21f2 	strb.w	r2, [r3, #498]	; 0x1f2
	sheduler->is_ROM_available = 1;
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	2201      	movs	r2, #1
 80004f2:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
	sheduler->process_being_sent.operation_ID = 0x00;
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	2200      	movs	r2, #0
 80004fa:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
	sheduler->selected_pin = 0;
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	2200      	movs	r2, #0
 8000502:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
	sheduler->slave_pins[0] = 0x20;
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	2220      	movs	r2, #32
 800050a:	f8a3 21f4 	strh.w	r2, [r3, #500]	; 0x1f4
	sheduler->slave_pins[1] = 0x40;
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	2240      	movs	r2, #64	; 0x40
 8000512:	f8a3 21f6 	strh.w	r2, [r3, #502]	; 0x1f6
	sheduler->slave_pins[2] = 0x80;
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	2280      	movs	r2, #128	; 0x80
 800051a:	f8a3 21f8 	strh.w	r2, [r3, #504]	; 0x1f8
	sheduler->slave_pins[3] = 0x100;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000524:	f8a3 21fa 	strh.w	r2, [r3, #506]	; 0x1fa
 	priority_queue_init(&sheduler->operations);
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	f503 73e5 	add.w	r3, r3, #458	; 0x1ca
 800052e:	4618      	mov	r0, r3
 8000530:	f7ff fed2 	bl	80002d8 <priority_queue_init>
	priority_queue_init(&sheduler->waiting_slaves_queue);
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	f203 13a9 	addw	r3, r3, #425	; 0x1a9
 800053a:	4618      	mov	r0, r3
 800053c:	f7ff fecc 	bl	80002d8 <priority_queue_init>
	stack_init(&sheduler->idle_slaves_stack);
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8000546:	4618      	mov	r0, r3
 8000548:	f000 f9d0 	bl	80008ec <stack_init>
	for(uint8_t i=0; i<MAX_SLAVE_NUM; i++)
 800054c:	2300      	movs	r3, #0
 800054e:	73fb      	strb	r3, [r7, #15]
 8000550:	e00b      	b.n	800056a <sheduler_init+0xbc>
		sheduler->slave_blocks[i].slave_ID = -1;
 8000552:	7bfa      	ldrb	r2, [r7, #15]
 8000554:	6879      	ldr	r1, [r7, #4]
 8000556:	4613      	mov	r3, r2
 8000558:	005b      	lsls	r3, r3, #1
 800055a:	4413      	add	r3, r2
 800055c:	005b      	lsls	r3, r3, #1
 800055e:	440b      	add	r3, r1
 8000560:	22ff      	movs	r2, #255	; 0xff
 8000562:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0; i<MAX_SLAVE_NUM; i++)
 8000564:	7bfb      	ldrb	r3, [r7, #15]
 8000566:	3301      	adds	r3, #1
 8000568:	73fb      	strb	r3, [r7, #15]
 800056a:	7bfb      	ldrb	r3, [r7, #15]
 800056c:	2b03      	cmp	r3, #3
 800056e:	d9f0      	bls.n	8000552 <sheduler_init+0xa4>
}
 8000570:	bf00      	nop
 8000572:	bf00      	nop
 8000574:	3710      	adds	r7, #16
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}

0800057a <add_idle_slave>:

void add_idle_slave(ROM_sheduler* sheduler, uint8_t slave_id, uint8_t slave_num){
 800057a:	b580      	push	{r7, lr}
 800057c:	b082      	sub	sp, #8
 800057e:	af00      	add	r7, sp, #0
 8000580:	6078      	str	r0, [r7, #4]
 8000582:	460b      	mov	r3, r1
 8000584:	70fb      	strb	r3, [r7, #3]
 8000586:	4613      	mov	r3, r2
 8000588:	70bb      	strb	r3, [r7, #2]
	// TODO: add here an error state
	if(slave_num >= MAX_SLAVE_NUM)
 800058a:	78bb      	ldrb	r3, [r7, #2]
 800058c:	2b03      	cmp	r3, #3
 800058e:	d854      	bhi.n	800063a <add_idle_slave+0xc0>
		return;
	// increase number of saved slaves
	sheduler->number_of_slaves++;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	f893 31ed 	ldrb.w	r3, [r3, #493]	; 0x1ed
 8000596:	3301      	adds	r3, #1
 8000598:	b2da      	uxtb	r2, r3
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
	// increase number of known idle slaves
	sheduler->number_of_idle_slaves++;
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 80005a6:	3301      	adds	r3, #1
 80005a8:	b2da      	uxtb	r2, r3
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
	// register slave to SCB
	sheduler->slave_blocks[slave_num].slave_ID = slave_id;
 80005b0:	78ba      	ldrb	r2, [r7, #2]
 80005b2:	f997 0003 	ldrsb.w	r0, [r7, #3]
 80005b6:	6879      	ldr	r1, [r7, #4]
 80005b8:	4613      	mov	r3, r2
 80005ba:	005b      	lsls	r3, r3, #1
 80005bc:	4413      	add	r3, r2
 80005be:	005b      	lsls	r3, r3, #1
 80005c0:	440b      	add	r3, r1
 80005c2:	4602      	mov	r2, r0
 80005c4:	701a      	strb	r2, [r3, #0]
	sheduler->slave_blocks[slave_num].slave_number = slave_num;
 80005c6:	78ba      	ldrb	r2, [r7, #2]
 80005c8:	6879      	ldr	r1, [r7, #4]
 80005ca:	4613      	mov	r3, r2
 80005cc:	005b      	lsls	r3, r3, #1
 80005ce:	4413      	add	r3, r2
 80005d0:	005b      	lsls	r3, r3, #1
 80005d2:	440b      	add	r3, r1
 80005d4:	3302      	adds	r3, #2
 80005d6:	78ba      	ldrb	r2, [r7, #2]
 80005d8:	701a      	strb	r2, [r3, #0]
	sheduler->slave_blocks[slave_num].slave_state = SLAVE_IDLE;
 80005da:	78ba      	ldrb	r2, [r7, #2]
 80005dc:	6879      	ldr	r1, [r7, #4]
 80005de:	4613      	mov	r3, r2
 80005e0:	005b      	lsls	r3, r3, #1
 80005e2:	4413      	add	r3, r2
 80005e4:	005b      	lsls	r3, r3, #1
 80005e6:	440b      	add	r3, r1
 80005e8:	3301      	adds	r3, #1
 80005ea:	2200      	movs	r2, #0
 80005ec:	701a      	strb	r2, [r3, #0]
	sheduler->slave_blocks[slave_num].current_opcode = 0x00;
 80005ee:	78ba      	ldrb	r2, [r7, #2]
 80005f0:	6879      	ldr	r1, [r7, #4]
 80005f2:	4613      	mov	r3, r2
 80005f4:	005b      	lsls	r3, r3, #1
 80005f6:	4413      	add	r3, r2
 80005f8:	005b      	lsls	r3, r3, #1
 80005fa:	440b      	add	r3, r1
 80005fc:	3303      	adds	r3, #3
 80005fe:	2200      	movs	r2, #0
 8000600:	701a      	strb	r2, [r3, #0]
	sheduler->slave_blocks[slave_num].pin = sheduler->slave_pins[sheduler->selected_pin - 1];
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	f9b3 31fc 	ldrsh.w	r3, [r3, #508]	; 0x1fc
 8000608:	3b01      	subs	r3, #1
 800060a:	78ba      	ldrb	r2, [r7, #2]
 800060c:	6879      	ldr	r1, [r7, #4]
 800060e:	33f8      	adds	r3, #248	; 0xf8
 8000610:	005b      	lsls	r3, r3, #1
 8000612:	440b      	add	r3, r1
 8000614:	8898      	ldrh	r0, [r3, #4]
 8000616:	6879      	ldr	r1, [r7, #4]
 8000618:	4613      	mov	r3, r2
 800061a:	005b      	lsls	r3, r3, #1
 800061c:	4413      	add	r3, r2
 800061e:	005b      	lsls	r3, r3, #1
 8000620:	440b      	add	r3, r1
 8000622:	3304      	adds	r3, #4
 8000624:	4602      	mov	r2, r0
 8000626:	801a      	strh	r2, [r3, #0]
	// push slave number to free slave stack
	stack_push(&sheduler->idle_slaves_stack, slave_num);
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 800062e:	78ba      	ldrb	r2, [r7, #2]
 8000630:	4611      	mov	r1, r2
 8000632:	4618      	mov	r0, r3
 8000634:	f000 f966 	bl	8000904 <stack_push>
 8000638:	e000      	b.n	800063c <add_idle_slave+0xc2>
		return;
 800063a:	bf00      	nop
}
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}

08000642 <add_operation>:

// TODO: implement send_number_of_idle_slaves(uint8_t num)

void add_operation(ROM_sheduler* sheduler, operation_control_block new_operation){
 8000642:	b580      	push	{r7, lr}
 8000644:	b084      	sub	sp, #16
 8000646:	af00      	add	r7, sp, #0
 8000648:	60f8      	str	r0, [r7, #12]
 800064a:	1d3b      	adds	r3, r7, #4
 800064c:	e883 0006 	stmia.w	r3, {r1, r2}
	// TODO: add here an error state
	if(sheduler->number_of_available_operations >= MAX_OPERATIONS_NUM)
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	f893 31f1 	ldrb.w	r3, [r3, #497]	; 0x1f1
 8000656:	2b3f      	cmp	r3, #63	; 0x3f
 8000658:	d830      	bhi.n	80006bc <add_operation+0x7a>
		return;
	// register operation to OCB
	sheduler->operation_blocks[sheduler->number_of_available_operations] = new_operation;
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	f893 31f1 	ldrb.w	r3, [r3, #497]	; 0x1f1
 8000660:	4619      	mov	r1, r3
 8000662:	68fa      	ldr	r2, [r7, #12]
 8000664:	460b      	mov	r3, r1
 8000666:	005b      	lsls	r3, r3, #1
 8000668:	440b      	add	r3, r1
 800066a:	005b      	lsls	r3, r3, #1
 800066c:	4413      	add	r3, r2
 800066e:	3318      	adds	r3, #24
 8000670:	461a      	mov	r2, r3
 8000672:	1d3b      	adds	r3, r7, #4
 8000674:	6818      	ldr	r0, [r3, #0]
 8000676:	6010      	str	r0, [r2, #0]
 8000678:	889b      	ldrh	r3, [r3, #4]
 800067a:	8093      	strh	r3, [r2, #4]
	sheduler->operation_blocks[sheduler->number_of_available_operations].number_of_working_slaves = 0x00;
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	f893 31f1 	ldrb.w	r3, [r3, #497]	; 0x1f1
 8000682:	4619      	mov	r1, r3
 8000684:	68fa      	ldr	r2, [r7, #12]
 8000686:	460b      	mov	r3, r1
 8000688:	005b      	lsls	r3, r3, #1
 800068a:	440b      	add	r3, r1
 800068c:	005b      	lsls	r3, r3, #1
 800068e:	4413      	add	r3, r2
 8000690:	331a      	adds	r3, #26
 8000692:	2200      	movs	r2, #0
 8000694:	701a      	strb	r2, [r3, #0]
	// push operation number to operation queue
	priority_queue_push(&sheduler->operations, sheduler->number_of_available_operations, new_operation.operation_priority);
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	f503 70e5 	add.w	r0, r3, #458	; 0x1ca
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	f893 31f1 	ldrb.w	r3, [r3, #497]	; 0x1f1
 80006a2:	797a      	ldrb	r2, [r7, #5]
 80006a4:	4619      	mov	r1, r3
 80006a6:	f7ff fe23 	bl	80002f0 <priority_queue_push>
	// increase number of available operations
	sheduler->number_of_available_operations++;
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	f893 31f1 	ldrb.w	r3, [r3, #497]	; 0x1f1
 80006b0:	3301      	adds	r3, #1
 80006b2:	b2da      	uxtb	r2, r3
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	f883 21f1 	strb.w	r2, [r3, #497]	; 0x1f1
 80006ba:	e000      	b.n	80006be <add_operation+0x7c>
		return;
 80006bc:	bf00      	nop
}
 80006be:	3710      	adds	r7, #16
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}

080006c4 <give_slave_opcode>:

// remove slave from the idle stack then push it to the waiting queue with the opcode to be sent
void give_slave_opcode(ROM_sheduler* sheduler, operation_control_block slave_operation, uint8_t slave_recieving_number){
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b086      	sub	sp, #24
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	60f8      	str	r0, [r7, #12]
 80006cc:	1d38      	adds	r0, r7, #4
 80006ce:	e880 0006 	stmia.w	r0, {r1, r2}
 80006d2:	70fb      	strb	r3, [r7, #3]
	// TODO: add here an error state
	if(sheduler->number_of_idle_slaves <= 0)
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d079      	beq.n	80007d2 <give_slave_opcode+0x10e>
		return;
	// change slave state in SCB
#if SCHEDULING_TECHNIQUE == SCHEDULE_ON_NUMBERS

#else
	for(int i=0; i<slave_operation.number_of_working_slaves; i++){
 80006de:	2300      	movs	r3, #0
 80006e0:	617b      	str	r3, [r7, #20]
 80006e2:	e002      	b.n	80006ea <give_slave_opcode+0x26>
 80006e4:	697b      	ldr	r3, [r7, #20]
 80006e6:	3301      	adds	r3, #1
 80006e8:	617b      	str	r3, [r7, #20]
 80006ea:	79bb      	ldrb	r3, [r7, #6]
 80006ec:	461a      	mov	r2, r3
 80006ee:	697b      	ldr	r3, [r7, #20]
 80006f0:	4293      	cmp	r3, r2
 80006f2:	dbf7      	blt.n	80006e4 <give_slave_opcode+0x20>

	}
	sheduler->slave_blocks[slave_recieving_number].slave_state = SLAVE_WAITING;
 80006f4:	78fa      	ldrb	r2, [r7, #3]
 80006f6:	68f9      	ldr	r1, [r7, #12]
 80006f8:	4613      	mov	r3, r2
 80006fa:	005b      	lsls	r3, r3, #1
 80006fc:	4413      	add	r3, r2
 80006fe:	005b      	lsls	r3, r3, #1
 8000700:	440b      	add	r3, r1
 8000702:	3301      	adds	r3, #1
 8000704:	2201      	movs	r2, #1
 8000706:	701a      	strb	r2, [r3, #0]
	// assign slave the operation code in its SCB
	sheduler->slave_blocks[slave_recieving_number].current_opcode = slave_operation.operation_ID;
 8000708:	78fa      	ldrb	r2, [r7, #3]
 800070a:	7938      	ldrb	r0, [r7, #4]
 800070c:	68f9      	ldr	r1, [r7, #12]
 800070e:	4613      	mov	r3, r2
 8000710:	005b      	lsls	r3, r3, #1
 8000712:	4413      	add	r3, r2
 8000714:	005b      	lsls	r3, r3, #1
 8000716:	440b      	add	r3, r1
 8000718:	3303      	adds	r3, #3
 800071a:	4602      	mov	r2, r0
 800071c:	701a      	strb	r2, [r3, #0]
	// push slave number to waiting slaves queue and use operation priority
	priority_queue_push(&sheduler->waiting_slaves_queue, slave_recieving_number, slave_operation.operation_priority);
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	f203 13a9 	addw	r3, r3, #425	; 0x1a9
 8000724:	797a      	ldrb	r2, [r7, #5]
 8000726:	78f9      	ldrb	r1, [r7, #3]
 8000728:	4618      	mov	r0, r3
 800072a:	f7ff fde1 	bl	80002f0 <priority_queue_push>
	// increase number of waiting slaves
	sheduler->number_of_waiting_slaves++;
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8000734:	3301      	adds	r3, #1
 8000736:	b2da      	uxtb	r2, r3
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
	// reduce idle slaves number
	sheduler->number_of_idle_slaves--;
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8000744:	3b01      	subs	r3, #1
 8000746:	b2da      	uxtb	r2, r3
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
	// decrement number of slaves left
	sheduler->process_being_sent.number_of_working_slaves--;
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8000754:	3b01      	subs	r3, #1
 8000756:	b2da      	uxtb	r2, r3
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	// if the operation was sent to the required slaves
	if(sheduler->process_being_sent.number_of_working_slaves == 0){
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8000764:	2b00      	cmp	r3, #0
 8000766:	d135      	bne.n	80007d4 <give_slave_opcode+0x110>
		// set process to be sent to 0 again
		sheduler->process_being_sent.operation_ID = 0x00;
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	2200      	movs	r2, #0
 800076c:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
		// decrement number of available operations
		sheduler->number_of_available_operations--;
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	f893 31f1 	ldrb.w	r3, [r3, #497]	; 0x1f1
 8000776:	3b01      	subs	r3, #1
 8000778:	b2da      	uxtb	r2, r3
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	f883 21f1 	strb.w	r2, [r3, #497]	; 0x1f1
		// remove the operation from queue
		priority_queue_pop(&sheduler->operations);
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	f503 73e5 	add.w	r3, r3, #458	; 0x1ca
 8000786:	4618      	mov	r0, r3
 8000788:	f7ff fdeb 	bl	8000362 <priority_queue_pop>
		// if we can still send operations, set process being set
		if(sheduler->number_of_idle_slaves != 0 && sheduler->number_of_available_operations != 0)
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8000792:	2b00      	cmp	r3, #0
 8000794:	d01e      	beq.n	80007d4 <give_slave_opcode+0x110>
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	f893 31f1 	ldrb.w	r3, [r3, #497]	; 0x1f1
 800079c:	2b00      	cmp	r3, #0
 800079e:	d019      	beq.n	80007d4 <give_slave_opcode+0x110>
			sheduler->process_being_sent = sheduler->operation_blocks[priority_queue_peak(&sheduler->operations)];
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	f503 73e5 	add.w	r3, r3, #458	; 0x1ca
 80007a6:	4618      	mov	r0, r3
 80007a8:	f7ff fe02 	bl	80003b0 <priority_queue_peak>
 80007ac:	4603      	mov	r3, r0
 80007ae:	4618      	mov	r0, r3
 80007b0:	68fa      	ldr	r2, [r7, #12]
 80007b2:	68f9      	ldr	r1, [r7, #12]
 80007b4:	4603      	mov	r3, r0
 80007b6:	005b      	lsls	r3, r3, #1
 80007b8:	4403      	add	r3, r0
 80007ba:	005b      	lsls	r3, r3, #1
 80007bc:	440b      	add	r3, r1
 80007be:	f103 0118 	add.w	r1, r3, #24
 80007c2:	f502 73ff 	add.w	r3, r2, #510	; 0x1fe
 80007c6:	460a      	mov	r2, r1
 80007c8:	6811      	ldr	r1, [r2, #0]
 80007ca:	6019      	str	r1, [r3, #0]
 80007cc:	8892      	ldrh	r2, [r2, #4]
 80007ce:	809a      	strh	r2, [r3, #4]
 80007d0:	e000      	b.n	80007d4 <give_slave_opcode+0x110>
		return;
 80007d2:	bf00      	nop
	}
#endif
}
 80007d4:	3718      	adds	r7, #24
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}

080007da <give_slave_access_to_ROM>:

void give_slave_access_to_ROM(ROM_sheduler* sheduler){
 80007da:	b580      	push	{r7, lr}
 80007dc:	b082      	sub	sp, #8
 80007de:	af00      	add	r7, sp, #0
 80007e0:	6078      	str	r0, [r7, #4]
	// pop slave from its waiting queue and set the current_slave_in_ROM to it
	sheduler->current_slave_in_ROM = priority_queue_pop(&sheduler->waiting_slaves_queue);
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	f203 13a9 	addw	r3, r3, #425	; 0x1a9
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff fdba 	bl	8000362 <priority_queue_pop>
 80007ee:	4603      	mov	r3, r0
 80007f0:	461a      	mov	r2, r3
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
	// decremnt number of waiting slaves
	sheduler->number_of_waiting_slaves--;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 80007fe:	3b01      	subs	r3, #1
 8000800:	b2da      	uxtb	r2, r3
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
	// change the slave's state in the block
	sheduler->slave_blocks[sheduler->current_slave_in_ROM].slave_state = SLAVE_IN_ROM;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800080e:	4619      	mov	r1, r3
 8000810:	687a      	ldr	r2, [r7, #4]
 8000812:	460b      	mov	r3, r1
 8000814:	005b      	lsls	r3, r3, #1
 8000816:	440b      	add	r3, r1
 8000818:	005b      	lsls	r3, r3, #1
 800081a:	4413      	add	r3, r2
 800081c:	3301      	adds	r3, #1
 800081e:	2202      	movs	r2, #2
 8000820:	701a      	strb	r2, [r3, #0]
	// set ROM is not available
	sheduler->is_ROM_available = 0;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	2200      	movs	r2, #0
 8000826:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
}
 800082a:	bf00      	nop
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <set_slave_idle>:

void set_slave_idle(ROM_sheduler* sheduler, uint8_t slave_num){
 8000832:	b580      	push	{r7, lr}
 8000834:	b082      	sub	sp, #8
 8000836:	af00      	add	r7, sp, #0
 8000838:	6078      	str	r0, [r7, #4]
 800083a:	460b      	mov	r3, r1
 800083c:	70fb      	strb	r3, [r7, #3]
	sheduler->slave_blocks[slave_num].slave_state = SLAVE_IDLE;
 800083e:	78fa      	ldrb	r2, [r7, #3]
 8000840:	6879      	ldr	r1, [r7, #4]
 8000842:	4613      	mov	r3, r2
 8000844:	005b      	lsls	r3, r3, #1
 8000846:	4413      	add	r3, r2
 8000848:	005b      	lsls	r3, r3, #1
 800084a:	440b      	add	r3, r1
 800084c:	3301      	adds	r3, #1
 800084e:	2200      	movs	r2, #0
 8000850:	701a      	strb	r2, [r3, #0]
	sheduler->slave_blocks[slave_num].current_opcode = 0x00;
 8000852:	78fa      	ldrb	r2, [r7, #3]
 8000854:	6879      	ldr	r1, [r7, #4]
 8000856:	4613      	mov	r3, r2
 8000858:	005b      	lsls	r3, r3, #1
 800085a:	4413      	add	r3, r2
 800085c:	005b      	lsls	r3, r3, #1
 800085e:	440b      	add	r3, r1
 8000860:	3303      	adds	r3, #3
 8000862:	2200      	movs	r2, #0
 8000864:	701a      	strb	r2, [r3, #0]
	stack_push(&sheduler->idle_slaves_stack, slave_num);
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 800086c:	78fa      	ldrb	r2, [r7, #3]
 800086e:	4611      	mov	r1, r2
 8000870:	4618      	mov	r0, r3
 8000872:	f000 f847 	bl	8000904 <stack_push>
}
 8000876:	bf00      	nop
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}

0800087e <set_slave_idle_by_id>:


void set_slave_idle_by_id(ROM_sheduler* sheduler, uint32_t id){
 800087e:	b480      	push	{r7}
 8000880:	b085      	sub	sp, #20
 8000882:	af00      	add	r7, sp, #0
 8000884:	6078      	str	r0, [r7, #4]
 8000886:	6039      	str	r1, [r7, #0]
	for(uint8_t i=0; i<sheduler->number_of_slaves; i++){
 8000888:	2300      	movs	r3, #0
 800088a:	73fb      	strb	r3, [r7, #15]
 800088c:	e024      	b.n	80008d8 <set_slave_idle_by_id+0x5a>
		if(sheduler->slave_blocks[i].slave_ID == id){
 800088e:	7bfa      	ldrb	r2, [r7, #15]
 8000890:	6879      	ldr	r1, [r7, #4]
 8000892:	4613      	mov	r3, r2
 8000894:	005b      	lsls	r3, r3, #1
 8000896:	4413      	add	r3, r2
 8000898:	005b      	lsls	r3, r3, #1
 800089a:	440b      	add	r3, r1
 800089c:	f993 3000 	ldrsb.w	r3, [r3]
 80008a0:	461a      	mov	r2, r3
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	4293      	cmp	r3, r2
 80008a6:	d114      	bne.n	80008d2 <set_slave_idle_by_id+0x54>
			sheduler->slave_blocks[i].slave_state = SLAVE_IDLE;
 80008a8:	7bfa      	ldrb	r2, [r7, #15]
 80008aa:	6879      	ldr	r1, [r7, #4]
 80008ac:	4613      	mov	r3, r2
 80008ae:	005b      	lsls	r3, r3, #1
 80008b0:	4413      	add	r3, r2
 80008b2:	005b      	lsls	r3, r3, #1
 80008b4:	440b      	add	r3, r1
 80008b6:	3301      	adds	r3, #1
 80008b8:	2200      	movs	r2, #0
 80008ba:	701a      	strb	r2, [r3, #0]
			sheduler->slave_blocks[i].current_opcode = 0x00;
 80008bc:	7bfa      	ldrb	r2, [r7, #15]
 80008be:	6879      	ldr	r1, [r7, #4]
 80008c0:	4613      	mov	r3, r2
 80008c2:	005b      	lsls	r3, r3, #1
 80008c4:	4413      	add	r3, r2
 80008c6:	005b      	lsls	r3, r3, #1
 80008c8:	440b      	add	r3, r1
 80008ca:	3303      	adds	r3, #3
 80008cc:	2200      	movs	r2, #0
 80008ce:	701a      	strb	r2, [r3, #0]
			return;
 80008d0:	e008      	b.n	80008e4 <set_slave_idle_by_id+0x66>
	for(uint8_t i=0; i<sheduler->number_of_slaves; i++){
 80008d2:	7bfb      	ldrb	r3, [r7, #15]
 80008d4:	3301      	adds	r3, #1
 80008d6:	73fb      	strb	r3, [r7, #15]
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	f893 31ed 	ldrb.w	r3, [r3, #493]	; 0x1ed
 80008de:	7bfa      	ldrb	r2, [r7, #15]
 80008e0:	429a      	cmp	r2, r3
 80008e2:	d3d4      	bcc.n	800088e <set_slave_idle_by_id+0x10>
		}
	}
}
 80008e4:	3714      	adds	r7, #20
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bc80      	pop	{r7}
 80008ea:	4770      	bx	lr

080008ec <stack_init>:
 *      Author: ahmad
 */

#include "stack.h"

void stack_init(stack* _stack){
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
	_stack->top = 0;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	2200      	movs	r2, #0
 80008f8:	701a      	strb	r2, [r3, #0]
}
 80008fa:	bf00      	nop
 80008fc:	370c      	adds	r7, #12
 80008fe:	46bd      	mov	sp, r7
 8000900:	bc80      	pop	{r7}
 8000902:	4770      	bx	lr

08000904 <stack_push>:

void stack_push(stack* _stack, uint8_t item){
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	460b      	mov	r3, r1
 800090e:	70fb      	strb	r3, [r7, #3]
	// TODO: add here an error state
	if(_stack->top >= MAX_ITEM_NUM)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	2b0f      	cmp	r3, #15
 8000916:	d80d      	bhi.n	8000934 <stack_push+0x30>
		return;
	// add item to the top of stack, top = number of elements
	_stack->item[_stack->top] = item;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	461a      	mov	r2, r3
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	4413      	add	r3, r2
 8000922:	78fa      	ldrb	r2, [r7, #3]
 8000924:	705a      	strb	r2, [r3, #1]
	_stack->top++;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	3301      	adds	r3, #1
 800092c:	b2da      	uxtb	r2, r3
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	701a      	strb	r2, [r3, #0]
 8000932:	e000      	b.n	8000936 <stack_push+0x32>
		return;
 8000934:	bf00      	nop
}
 8000936:	370c      	adds	r7, #12
 8000938:	46bd      	mov	sp, r7
 800093a:	bc80      	pop	{r7}
 800093c:	4770      	bx	lr

0800093e <stack_pop>:

uint8_t stack_pop(stack* _stack){
 800093e:	b480      	push	{r7}
 8000940:	b083      	sub	sp, #12
 8000942:	af00      	add	r7, sp, #0
 8000944:	6078      	str	r0, [r7, #4]
	// TODO: add here an error state
	if(_stack->top <= 0)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d101      	bne.n	8000952 <stack_pop+0x14>
			return 0;
 800094e:	2300      	movs	r3, #0
 8000950:	e00b      	b.n	800096a <stack_pop+0x2c>
	// decrement top index, top becomes the last element
	_stack->top--;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	3b01      	subs	r3, #1
 8000958:	b2da      	uxtb	r2, r3
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	701a      	strb	r2, [r3, #0]
	return _stack->item[_stack->top];
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	461a      	mov	r2, r3
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	4413      	add	r3, r2
 8000968:	785b      	ldrb	r3, [r3, #1]
}
 800096a:	4618      	mov	r0, r3
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	bc80      	pop	{r7}
 8000972:	4770      	bx	lr

08000974 <stack_peak>:

uint8_t stack_peak(stack* _stack){
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
	return _stack->item[_stack->top-1];
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	3b01      	subs	r3, #1
 8000982:	687a      	ldr	r2, [r7, #4]
 8000984:	4413      	add	r3, r2
 8000986:	785b      	ldrb	r3, [r3, #1]
}
 8000988:	4618      	mov	r0, r3
 800098a:	370c      	adds	r7, #12
 800098c:	46bd      	mov	sp, r7
 800098e:	bc80      	pop	{r7}
 8000990:	4770      	bx	lr
	...

08000994 <reset_all_select_pins>:
void system_callback(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void reset_all_select_pins(void){
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
	for(uint8_t i=0; i<MAX_SLAVE_NUM; i++)
 800099a:	2300      	movs	r3, #0
 800099c:	71fb      	strb	r3, [r7, #7]
 800099e:	e00d      	b.n	80009bc <reset_all_select_pins+0x28>
		HAL_GPIO_WritePin(GPIOB, sheduler.slave_pins[i], GPIO_PIN_RESET);
 80009a0:	79fb      	ldrb	r3, [r7, #7]
 80009a2:	4a0a      	ldr	r2, [pc, #40]	; (80009cc <reset_all_select_pins+0x38>)
 80009a4:	33f8      	adds	r3, #248	; 0xf8
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	4413      	add	r3, r2
 80009aa:	889b      	ldrh	r3, [r3, #4]
 80009ac:	2200      	movs	r2, #0
 80009ae:	4619      	mov	r1, r3
 80009b0:	4807      	ldr	r0, [pc, #28]	; (80009d0 <reset_all_select_pins+0x3c>)
 80009b2:	f002 f987 	bl	8002cc4 <HAL_GPIO_WritePin>
	for(uint8_t i=0; i<MAX_SLAVE_NUM; i++)
 80009b6:	79fb      	ldrb	r3, [r7, #7]
 80009b8:	3301      	adds	r3, #1
 80009ba:	71fb      	strb	r3, [r7, #7]
 80009bc:	79fb      	ldrb	r3, [r7, #7]
 80009be:	2b03      	cmp	r3, #3
 80009c0:	d9ee      	bls.n	80009a0 <reset_all_select_pins+0xc>
}
 80009c2:	bf00      	nop
 80009c4:	bf00      	nop
 80009c6:	3708      	adds	r7, #8
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	20000174 	.word	0x20000174
 80009d0:	40010c00 	.word	0x40010c00

080009d4 <set_current_pin>:

void set_current_pin(void){
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, sheduler.slave_pins[sheduler.selected_pin], GPIO_PIN_SET);
 80009d8:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <set_current_pin+0x38>)
 80009da:	f9b3 31fc 	ldrsh.w	r3, [r3, #508]	; 0x1fc
 80009de:	4a0b      	ldr	r2, [pc, #44]	; (8000a0c <set_current_pin+0x38>)
 80009e0:	33f8      	adds	r3, #248	; 0xf8
 80009e2:	005b      	lsls	r3, r3, #1
 80009e4:	4413      	add	r3, r2
 80009e6:	889b      	ldrh	r3, [r3, #4]
 80009e8:	2201      	movs	r2, #1
 80009ea:	4619      	mov	r1, r3
 80009ec:	4808      	ldr	r0, [pc, #32]	; (8000a10 <set_current_pin+0x3c>)
 80009ee:	f002 f969 	bl	8002cc4 <HAL_GPIO_WritePin>
	sheduler.selected_pin++;
 80009f2:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <set_current_pin+0x38>)
 80009f4:	f9b3 31fc 	ldrsh.w	r3, [r3, #508]	; 0x1fc
 80009f8:	b29b      	uxth	r3, r3
 80009fa:	3301      	adds	r3, #1
 80009fc:	b29b      	uxth	r3, r3
 80009fe:	b21a      	sxth	r2, r3
 8000a00:	4b02      	ldr	r3, [pc, #8]	; (8000a0c <set_current_pin+0x38>)
 8000a02:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	20000174 	.word	0x20000174
 8000a10:	40010c00 	.word	0x40010c00

08000a14 <add_slave_to_sheduler>:

void add_slave_to_sheduler(void){
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim2);
 8000a1a:	481f      	ldr	r0, [pc, #124]	; (8000a98 <add_slave_to_sheduler+0x84>)
 8000a1c:	f002 fe36 	bl	800368c <HAL_TIM_Base_Stop_IT>
	// deselect any slave
	reset_all_select_pins();
 8000a20:	f7ff ffb8 	bl	8000994 <reset_all_select_pins>
	// add slave to sheduler
	add_idle_slave(&sheduler, RxHeader.StdId, sheduler.number_of_slaves);
 8000a24:	4b1d      	ldr	r3, [pc, #116]	; (8000a9c <add_slave_to_sheduler+0x88>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	b2db      	uxtb	r3, r3
 8000a2a:	4a1d      	ldr	r2, [pc, #116]	; (8000aa0 <add_slave_to_sheduler+0x8c>)
 8000a2c:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8000a30:	4619      	mov	r1, r3
 8000a32:	481b      	ldr	r0, [pc, #108]	; (8000aa0 <add_slave_to_sheduler+0x8c>)
 8000a34:	f7ff fda1 	bl	800057a <add_idle_slave>
	// if the next slave is the last one, change sheduler state
	if(sheduler.number_of_slaves == MAX_SLAVE_NUM || sheduler.selected_pin == MAX_SLAVE_NUM){
 8000a38:	4b19      	ldr	r3, [pc, #100]	; (8000aa0 <add_slave_to_sheduler+0x8c>)
 8000a3a:	f893 31ed 	ldrb.w	r3, [r3, #493]	; 0x1ed
 8000a3e:	2b04      	cmp	r3, #4
 8000a40:	d004      	beq.n	8000a4c <add_slave_to_sheduler+0x38>
 8000a42:	4b17      	ldr	r3, [pc, #92]	; (8000aa0 <add_slave_to_sheduler+0x8c>)
 8000a44:	f9b3 31fc 	ldrsh.w	r3, [r3, #508]	; 0x1fc
 8000a48:	2b04      	cmp	r3, #4
 8000a4a:	d11c      	bne.n	8000a86 <add_slave_to_sheduler+0x72>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a52:	4814      	ldr	r0, [pc, #80]	; (8000aa4 <add_slave_to_sheduler+0x90>)
 8000a54:	f002 f936 	bl	8002cc4 <HAL_GPIO_WritePin>
		sheduler.selected_pin = -1;
 8000a58:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <add_slave_to_sheduler+0x8c>)
 8000a5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a5e:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
		HAL_TIM_Base_Start_IT(&htim3);
 8000a62:	4811      	ldr	r0, [pc, #68]	; (8000aa8 <add_slave_to_sheduler+0x94>)
 8000a64:	f002 fdc0 	bl	80035e8 <HAL_TIM_Base_Start_IT>
		uint8_t msg[1];
		msg[0] = INTERFACE_READY_SIGNAL;
 8000a68:	2341      	movs	r3, #65	; 0x41
 8000a6a:	713b      	strb	r3, [r7, #4]
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, 1, 10);
 8000a6c:	1d39      	adds	r1, r7, #4
 8000a6e:	230a      	movs	r3, #10
 8000a70:	2201      	movs	r2, #1
 8000a72:	480e      	ldr	r0, [pc, #56]	; (8000aac <add_slave_to_sheduler+0x98>)
 8000a74:	f003 f9e4 	bl	8003e40 <HAL_UART_Transmit>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000a78:	2201      	movs	r2, #1
 8000a7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a7e:	4809      	ldr	r0, [pc, #36]	; (8000aa4 <add_slave_to_sheduler+0x90>)
 8000a80:	f002 f920 	bl	8002cc4 <HAL_GPIO_WritePin>
 8000a84:	e004      	b.n	8000a90 <add_slave_to_sheduler+0x7c>
		return;
	}
	set_current_pin();
 8000a86:	f7ff ffa5 	bl	80009d4 <set_current_pin>
	HAL_TIM_Base_Start_IT(&htim2);
 8000a8a:	4803      	ldr	r0, [pc, #12]	; (8000a98 <add_slave_to_sheduler+0x84>)
 8000a8c:	f002 fdac 	bl	80035e8 <HAL_TIM_Base_Start_IT>
}
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	2000009c 	.word	0x2000009c
 8000a9c:	20000040 	.word	0x20000040
 8000aa0:	20000174 	.word	0x20000174
 8000aa4:	40011000 	.word	0x40011000
 8000aa8:	200000e4 	.word	0x200000e4
 8000aac:	2000012c 	.word	0x2000012c

08000ab0 <send_opcode_to_slave>:

void send_opcode_to_slave(void){
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b086      	sub	sp, #24
 8000ab4:	af02      	add	r7, sp, #8
	// extract operation to be sent from the priority queue and the slave from the slave stack
	sheduler.process_being_sent = sheduler.operation_blocks[priority_queue_peak(&sheduler.operations)];
 8000ab6:	4834      	ldr	r0, [pc, #208]	; (8000b88 <send_opcode_to_slave+0xd8>)
 8000ab8:	f7ff fc7a 	bl	80003b0 <priority_queue_peak>
 8000abc:	4603      	mov	r3, r0
 8000abe:	4618      	mov	r0, r3
 8000ac0:	4a32      	ldr	r2, [pc, #200]	; (8000b8c <send_opcode_to_slave+0xdc>)
 8000ac2:	4932      	ldr	r1, [pc, #200]	; (8000b8c <send_opcode_to_slave+0xdc>)
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	005b      	lsls	r3, r3, #1
 8000ac8:	4403      	add	r3, r0
 8000aca:	005b      	lsls	r3, r3, #1
 8000acc:	440b      	add	r3, r1
 8000ace:	f103 0118 	add.w	r1, r3, #24
 8000ad2:	f502 73ff 	add.w	r3, r2, #510	; 0x1fe
 8000ad6:	460a      	mov	r2, r1
 8000ad8:	6811      	ldr	r1, [r2, #0]
 8000ada:	6019      	str	r1, [r3, #0]
 8000adc:	8892      	ldrh	r2, [r2, #4]
 8000ade:	809a      	strh	r2, [r3, #4]
	uint8_t operation_id = priority_queue_peak(&sheduler.operations);
 8000ae0:	4829      	ldr	r0, [pc, #164]	; (8000b88 <send_opcode_to_slave+0xd8>)
 8000ae2:	f7ff fc65 	bl	80003b0 <priority_queue_peak>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	73fb      	strb	r3, [r7, #15]
	uint8_t slave_recieving_number = stack_peak(&sheduler.idle_slaves_stack);
 8000aea:	4829      	ldr	r0, [pc, #164]	; (8000b90 <send_opcode_to_slave+0xe0>)
 8000aec:	f7ff ff42 	bl	8000974 <stack_peak>
 8000af0:	4603      	mov	r3, r0
 8000af2:	73bb      	strb	r3, [r7, #14]
	// if the current operation needs more slaves than available, move on
	if(sheduler.number_of_idle_slaves < sheduler.process_being_sent.number_of_working_slaves){
 8000af4:	4b25      	ldr	r3, [pc, #148]	; (8000b8c <send_opcode_to_slave+0xdc>)
 8000af6:	f893 21ee 	ldrb.w	r2, [r3, #494]	; 0x1ee
 8000afa:	4b24      	ldr	r3, [pc, #144]	; (8000b8c <send_opcode_to_slave+0xdc>)
 8000afc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8000b00:	429a      	cmp	r2, r3
 8000b02:	d204      	bcs.n	8000b0e <send_opcode_to_slave+0x5e>
		sheduler.sheduler_state = IDLE_STATE;
 8000b04:	4b21      	ldr	r3, [pc, #132]	; (8000b8c <send_opcode_to_slave+0xdc>)
 8000b06:	2202      	movs	r2, #2
 8000b08:	f883 21f2 	strb.w	r2, [r3, #498]	; 0x1f2
		return;
 8000b0c:	e039      	b.n	8000b82 <send_opcode_to_slave+0xd2>
	}
	// extract operation data to be sent
	uint8_t data[8];
	data[0] = (uint8_t)FRAME_SIGNAL;
 8000b0e:	2330      	movs	r3, #48	; 0x30
 8000b10:	713b      	strb	r3, [r7, #4]
	data[1] = sheduler.operation_blocks[operation_id].operation_ID;
 8000b12:	7bfa      	ldrb	r2, [r7, #15]
 8000b14:	491d      	ldr	r1, [pc, #116]	; (8000b8c <send_opcode_to_slave+0xdc>)
 8000b16:	4613      	mov	r3, r2
 8000b18:	005b      	lsls	r3, r3, #1
 8000b1a:	4413      	add	r3, r2
 8000b1c:	005b      	lsls	r3, r3, #1
 8000b1e:	440b      	add	r3, r1
 8000b20:	3318      	adds	r3, #24
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	717b      	strb	r3, [r7, #5]
	data[2] = (uint8_t)(sheduler.operation_blocks[operation_id].operation_length >> 8);
 8000b26:	7bfa      	ldrb	r2, [r7, #15]
 8000b28:	4918      	ldr	r1, [pc, #96]	; (8000b8c <send_opcode_to_slave+0xdc>)
 8000b2a:	4613      	mov	r3, r2
 8000b2c:	005b      	lsls	r3, r3, #1
 8000b2e:	4413      	add	r3, r2
 8000b30:	005b      	lsls	r3, r3, #1
 8000b32:	440b      	add	r3, r1
 8000b34:	331c      	adds	r3, #28
 8000b36:	881b      	ldrh	r3, [r3, #0]
 8000b38:	0a1b      	lsrs	r3, r3, #8
 8000b3a:	b29b      	uxth	r3, r3
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	71bb      	strb	r3, [r7, #6]
	data[3] = (uint8_t)(sheduler.operation_blocks[operation_id].operation_length & 0xFF);
 8000b40:	7bfa      	ldrb	r2, [r7, #15]
 8000b42:	4912      	ldr	r1, [pc, #72]	; (8000b8c <send_opcode_to_slave+0xdc>)
 8000b44:	4613      	mov	r3, r2
 8000b46:	005b      	lsls	r3, r3, #1
 8000b48:	4413      	add	r3, r2
 8000b4a:	005b      	lsls	r3, r3, #1
 8000b4c:	440b      	add	r3, r1
 8000b4e:	331c      	adds	r3, #28
 8000b50:	881b      	ldrh	r3, [r3, #0]
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	71fb      	strb	r3, [r7, #7]
	// set state to waiting ack then send to ensure interrupt works
	Can_Send(&hcan, sheduler.slave_blocks[slave_recieving_number].slave_ID, 4, data, &Can_TxMailBox[0]);
 8000b56:	7bba      	ldrb	r2, [r7, #14]
 8000b58:	490c      	ldr	r1, [pc, #48]	; (8000b8c <send_opcode_to_slave+0xdc>)
 8000b5a:	4613      	mov	r3, r2
 8000b5c:	005b      	lsls	r3, r3, #1
 8000b5e:	4413      	add	r3, r2
 8000b60:	005b      	lsls	r3, r3, #1
 8000b62:	440b      	add	r3, r1
 8000b64:	f993 3000 	ldrsb.w	r3, [r3]
 8000b68:	b2d9      	uxtb	r1, r3
 8000b6a:	1d3b      	adds	r3, r7, #4
 8000b6c:	4a09      	ldr	r2, [pc, #36]	; (8000b94 <send_opcode_to_slave+0xe4>)
 8000b6e:	9200      	str	r2, [sp, #0]
 8000b70:	2204      	movs	r2, #4
 8000b72:	4809      	ldr	r0, [pc, #36]	; (8000b98 <send_opcode_to_slave+0xe8>)
 8000b74:	f7ff fb5e 	bl	8000234 <Can_Send>
	sheduler.sheduler_state = WAITING_ACK_STATE;
 8000b78:	4b04      	ldr	r3, [pc, #16]	; (8000b8c <send_opcode_to_slave+0xdc>)
 8000b7a:	2204      	movs	r2, #4
 8000b7c:	f883 21f2 	strb.w	r2, [r3, #498]	; 0x1f2
	return;
 8000b80:	bf00      	nop
}
 8000b82:	3710      	adds	r7, #16
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	2000033e 	.word	0x2000033e
 8000b8c:	20000174 	.word	0x20000174
 8000b90:	2000030c 	.word	0x2000030c
 8000b94:	20000064 	.word	0x20000064
 8000b98:	20000074 	.word	0x20000074

08000b9c <give_rom_to_slave>:

void give_rom_to_slave(void){
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af02      	add	r7, sp, #8
	give_slave_access_to_ROM(&sheduler);
 8000ba2:	480e      	ldr	r0, [pc, #56]	; (8000bdc <give_rom_to_slave+0x40>)
 8000ba4:	f7ff fe19 	bl	80007da <give_slave_access_to_ROM>
	// send ROM signal to the slave to be in the ROM
	uint8_t data[8];
	data[0] = ROM_SIGNAL;
 8000ba8:	2340      	movs	r3, #64	; 0x40
 8000baa:	703b      	strb	r3, [r7, #0]
	Can_Send(&hcan, sheduler.slave_blocks[sheduler.current_slave_in_ROM].slave_ID, 1, data, &Can_TxMailBox[0]);
 8000bac:	4b0b      	ldr	r3, [pc, #44]	; (8000bdc <give_rom_to_slave+0x40>)
 8000bae:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4a09      	ldr	r2, [pc, #36]	; (8000bdc <give_rom_to_slave+0x40>)
 8000bb6:	460b      	mov	r3, r1
 8000bb8:	005b      	lsls	r3, r3, #1
 8000bba:	440b      	add	r3, r1
 8000bbc:	005b      	lsls	r3, r3, #1
 8000bbe:	4413      	add	r3, r2
 8000bc0:	f993 3000 	ldrsb.w	r3, [r3]
 8000bc4:	b2d9      	uxtb	r1, r3
 8000bc6:	463b      	mov	r3, r7
 8000bc8:	4a05      	ldr	r2, [pc, #20]	; (8000be0 <give_rom_to_slave+0x44>)
 8000bca:	9200      	str	r2, [sp, #0]
 8000bcc:	2201      	movs	r2, #1
 8000bce:	4805      	ldr	r0, [pc, #20]	; (8000be4 <give_rom_to_slave+0x48>)
 8000bd0:	f7ff fb30 	bl	8000234 <Can_Send>
}
 8000bd4:	bf00      	nop
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	20000174 	.word	0x20000174
 8000be0:	20000064 	.word	0x20000064
 8000be4:	20000074 	.word	0x20000074

08000be8 <add_slave_to_waiting_queue>:

void add_slave_to_waiting_queue(void){
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
//		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
	uint8_t operation_id = priority_queue_peak(&sheduler.operations);
 8000bee:	481e      	ldr	r0, [pc, #120]	; (8000c68 <add_slave_to_waiting_queue+0x80>)
 8000bf0:	f7ff fbde 	bl	80003b0 <priority_queue_peak>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	71fb      	strb	r3, [r7, #7]
	uint8_t slave_recieving_number = stack_pop(&sheduler.idle_slaves_stack);
 8000bf8:	481c      	ldr	r0, [pc, #112]	; (8000c6c <add_slave_to_waiting_queue+0x84>)
 8000bfa:	f7ff fea0 	bl	800093e <stack_pop>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	71bb      	strb	r3, [r7, #6]
	// give the slave the current operation
	give_slave_opcode(&sheduler, sheduler.operation_blocks[operation_id], slave_recieving_number);
 8000c02:	79fa      	ldrb	r2, [r7, #7]
 8000c04:	79b9      	ldrb	r1, [r7, #6]
 8000c06:	481a      	ldr	r0, [pc, #104]	; (8000c70 <add_slave_to_waiting_queue+0x88>)
 8000c08:	4613      	mov	r3, r2
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	4413      	add	r3, r2
 8000c0e:	005b      	lsls	r3, r3, #1
 8000c10:	4403      	add	r3, r0
 8000c12:	3318      	adds	r3, #24
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	4610      	mov	r0, r2
 8000c18:	889b      	ldrh	r3, [r3, #4]
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	f363 020f 	bfi	r2, r3, #0, #16
 8000c20:	460b      	mov	r3, r1
 8000c22:	4601      	mov	r1, r0
 8000c24:	4812      	ldr	r0, [pc, #72]	; (8000c70 <add_slave_to_waiting_queue+0x88>)
 8000c26:	f7ff fd4d 	bl	80006c4 <give_slave_opcode>
	// change state to sending code again if there are still operations to send and slaves to receive
	// if slave received the opcode, the slave sends a RCV_ACK
	if(sheduler.is_ROM_available){
 8000c2a:	4b11      	ldr	r3, [pc, #68]	; (8000c70 <add_slave_to_waiting_queue+0x88>)
 8000c2c:	f893 31ec 	ldrb.w	r3, [r3, #492]	; 0x1ec
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <add_slave_to_waiting_queue+0x50>
		// move the slave from the waiting queue
		give_rom_to_slave();
 8000c34:	f7ff ffb2 	bl	8000b9c <give_rom_to_slave>
	}
	if(sheduler.number_of_idle_slaves != 0 && sheduler.number_of_available_operations != 0)
 8000c38:	4b0d      	ldr	r3, [pc, #52]	; (8000c70 <add_slave_to_waiting_queue+0x88>)
 8000c3a:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d009      	beq.n	8000c56 <add_slave_to_waiting_queue+0x6e>
 8000c42:	4b0b      	ldr	r3, [pc, #44]	; (8000c70 <add_slave_to_waiting_queue+0x88>)
 8000c44:	f893 31f1 	ldrb.w	r3, [r3, #497]	; 0x1f1
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d004      	beq.n	8000c56 <add_slave_to_waiting_queue+0x6e>
		sheduler.sheduler_state = SENDING_CODE_STATE;
 8000c4c:	4b08      	ldr	r3, [pc, #32]	; (8000c70 <add_slave_to_waiting_queue+0x88>)
 8000c4e:	2203      	movs	r2, #3
 8000c50:	f883 21f2 	strb.w	r2, [r3, #498]	; 0x1f2
 8000c54:	e003      	b.n	8000c5e <add_slave_to_waiting_queue+0x76>
	else
		sheduler.sheduler_state = IDLE_STATE;
 8000c56:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <add_slave_to_waiting_queue+0x88>)
 8000c58:	2202      	movs	r2, #2
 8000c5a:	f883 21f2 	strb.w	r2, [r3, #498]	; 0x1f2
	return;
 8000c5e:	bf00      	nop
}
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	2000033e 	.word	0x2000033e
 8000c6c:	2000030c 	.word	0x2000030c
 8000c70:	20000174 	.word	0x20000174

08000c74 <set_slave_busy>:

void set_slave_busy(void){
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
	// set rom is available
	sheduler.is_ROM_available = 1;
 8000c78:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <set_slave_busy+0x38>)
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
	// change the slave's state to idle
	sheduler.slave_blocks[sheduler.current_slave_in_ROM].slave_state = SLAVE_WORKING;
 8000c80:	4b0a      	ldr	r3, [pc, #40]	; (8000cac <set_slave_busy+0x38>)
 8000c82:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8000c86:	4619      	mov	r1, r3
 8000c88:	4a08      	ldr	r2, [pc, #32]	; (8000cac <set_slave_busy+0x38>)
 8000c8a:	460b      	mov	r3, r1
 8000c8c:	005b      	lsls	r3, r3, #1
 8000c8e:	440b      	add	r3, r1
 8000c90:	005b      	lsls	r3, r3, #1
 8000c92:	4413      	add	r3, r2
 8000c94:	3301      	adds	r3, #1
 8000c96:	2203      	movs	r2, #3
 8000c98:	701a      	strb	r2, [r3, #0]
	// if there are more waiting slaves, give one access to ROM
	if(sheduler.number_of_waiting_slaves != 0)
 8000c9a:	4b04      	ldr	r3, [pc, #16]	; (8000cac <set_slave_busy+0x38>)
 8000c9c:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <set_slave_busy+0x34>
		give_rom_to_slave();
 8000ca4:	f7ff ff7a 	bl	8000b9c <give_rom_to_slave>
}
 8000ca8:	bf00      	nop
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	20000174 	.word	0x20000174

08000cb0 <send_status_to_interface>:
	}
	reset_all_select_pins();
	set_current_pin();
}

void send_status_to_interface(void){
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
	for(uint8_t i=0; i<MAX_SLAVE_NUM; i++){
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	71fb      	strb	r3, [r7, #7]
 8000cba:	e044      	b.n	8000d46 <send_status_to_interface+0x96>
		if(sheduler.slave_blocks[i].slave_ID == -1){
 8000cbc:	79fa      	ldrb	r2, [r7, #7]
 8000cbe:	4926      	ldr	r1, [pc, #152]	; (8000d58 <send_status_to_interface+0xa8>)
 8000cc0:	4613      	mov	r3, r2
 8000cc2:	005b      	lsls	r3, r3, #1
 8000cc4:	4413      	add	r3, r2
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	440b      	add	r3, r1
 8000cca:	f993 3000 	ldrsb.w	r3, [r3]
 8000cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cd2:	d034      	beq.n	8000d3e <send_status_to_interface+0x8e>
			continue;
		}
		uint8_t msg[5];
		msg[0] = INTERFACE_STATUS_MSG;
 8000cd4:	2343      	movs	r3, #67	; 0x43
 8000cd6:	703b      	strb	r3, [r7, #0]
		msg[1] = sheduler.slave_blocks[i].slave_number;
 8000cd8:	79fa      	ldrb	r2, [r7, #7]
 8000cda:	491f      	ldr	r1, [pc, #124]	; (8000d58 <send_status_to_interface+0xa8>)
 8000cdc:	4613      	mov	r3, r2
 8000cde:	005b      	lsls	r3, r3, #1
 8000ce0:	4413      	add	r3, r2
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	440b      	add	r3, r1
 8000ce6:	3302      	adds	r3, #2
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	707b      	strb	r3, [r7, #1]
		msg[2] = sheduler.slave_blocks[i].slave_state;
 8000cec:	79fa      	ldrb	r2, [r7, #7]
 8000cee:	491a      	ldr	r1, [pc, #104]	; (8000d58 <send_status_to_interface+0xa8>)
 8000cf0:	4613      	mov	r3, r2
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	4413      	add	r3, r2
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	440b      	add	r3, r1
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	70bb      	strb	r3, [r7, #2]
		msg[3] = sheduler.slave_blocks[i].current_opcode;
 8000d00:	79fa      	ldrb	r2, [r7, #7]
 8000d02:	4915      	ldr	r1, [pc, #84]	; (8000d58 <send_status_to_interface+0xa8>)
 8000d04:	4613      	mov	r3, r2
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	4413      	add	r3, r2
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	440b      	add	r3, r1
 8000d0e:	3303      	adds	r3, #3
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	70fb      	strb	r3, [r7, #3]
		if(i != MAX_SLAVE_NUM - 1){
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	2b03      	cmp	r3, #3
 8000d18:	d008      	beq.n	8000d2c <send_status_to_interface+0x7c>
			msg[4] = INTERFACE_MORE_SIGNAL;
 8000d1a:	2345      	movs	r3, #69	; 0x45
 8000d1c:	713b      	strb	r3, [r7, #4]
			HAL_UART_Transmit(&huart2, (uint8_t*)msg, 5, 10);
 8000d1e:	4639      	mov	r1, r7
 8000d20:	230a      	movs	r3, #10
 8000d22:	2205      	movs	r2, #5
 8000d24:	480d      	ldr	r0, [pc, #52]	; (8000d5c <send_status_to_interface+0xac>)
 8000d26:	f003 f88b 	bl	8003e40 <HAL_UART_Transmit>
			continue;
 8000d2a:	e009      	b.n	8000d40 <send_status_to_interface+0x90>
		}
		msg[4] = INTERFACE_DONE_SIGNAL;
 8000d2c:	2347      	movs	r3, #71	; 0x47
 8000d2e:	713b      	strb	r3, [r7, #4]
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, 5, 10);
 8000d30:	4639      	mov	r1, r7
 8000d32:	230a      	movs	r3, #10
 8000d34:	2205      	movs	r2, #5
 8000d36:	4809      	ldr	r0, [pc, #36]	; (8000d5c <send_status_to_interface+0xac>)
 8000d38:	f003 f882 	bl	8003e40 <HAL_UART_Transmit>
 8000d3c:	e000      	b.n	8000d40 <send_status_to_interface+0x90>
			continue;
 8000d3e:	bf00      	nop
	for(uint8_t i=0; i<MAX_SLAVE_NUM; i++){
 8000d40:	79fb      	ldrb	r3, [r7, #7]
 8000d42:	3301      	adds	r3, #1
 8000d44:	71fb      	strb	r3, [r7, #7]
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	2b03      	cmp	r3, #3
 8000d4a:	d9b7      	bls.n	8000cbc <send_status_to_interface+0xc>
	}
}
 8000d4c:	bf00      	nop
 8000d4e:	bf00      	nop
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20000174 	.word	0x20000174
 8000d5c:	2000012c 	.word	0x2000012c

08000d60 <send_slave_ids_to_interface>:

void send_slave_ids_to_interface(void){
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
	uint8_t temp = 0x41;
 8000d66:	2341      	movs	r3, #65	; 0x41
 8000d68:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i=0; i<3; i++){
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	73bb      	strb	r3, [r7, #14]
 8000d6e:	e036      	b.n	8000dde <send_slave_ids_to_interface+0x7e>
//		if(sheduler.slave_blocks[i].slave_ID == -1){
//			continue;
//		}
		uint8_t msg[10];
		msg[0] = INTERFACE_ID_MSG;
 8000d70:	2350      	movs	r3, #80	; 0x50
 8000d72:	713b      	strb	r3, [r7, #4]
		msg[1] = temp;
 8000d74:	7bfb      	ldrb	r3, [r7, #15]
 8000d76:	717b      	strb	r3, [r7, #5]
		msg[2] = i + 1;
 8000d78:	7bbb      	ldrb	r3, [r7, #14]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	71bb      	strb	r3, [r7, #6]
		msg[3] = 0;
 8000d80:	2300      	movs	r3, #0
 8000d82:	71fb      	strb	r3, [r7, #7]
		msg[4] = 0;
 8000d84:	2300      	movs	r3, #0
 8000d86:	723b      	strb	r3, [r7, #8]
		msg[5] = 0;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	727b      	strb	r3, [r7, #9]
		msg[6] = 0;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	72bb      	strb	r3, [r7, #10]
		msg[7] = 0;
 8000d90:	2300      	movs	r3, #0
 8000d92:	72fb      	strb	r3, [r7, #11]
		msg[8] = 0;
 8000d94:	2300      	movs	r3, #0
 8000d96:	733b      	strb	r3, [r7, #12]
		temp++;
 8000d98:	7bfb      	ldrb	r3, [r7, #15]
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	73fb      	strb	r3, [r7, #15]
		if(i == 0 || i == 1) {
 8000d9e:	7bbb      	ldrb	r3, [r7, #14]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d002      	beq.n	8000daa <send_slave_ids_to_interface+0x4a>
 8000da4:	7bbb      	ldrb	r3, [r7, #14]
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d102      	bne.n	8000db0 <send_slave_ids_to_interface+0x50>
			msg[9] = INTERFACE_MORE_SIGNAL;
 8000daa:	2345      	movs	r3, #69	; 0x45
 8000dac:	737b      	strb	r3, [r7, #13]
 8000dae:	e001      	b.n	8000db4 <send_slave_ids_to_interface+0x54>
		}
		else {
			msg[9] = INTERFACE_DONE_SIGNAL;
 8000db0:	2347      	movs	r3, #71	; 0x47
 8000db2:	737b      	strb	r3, [r7, #13]
		}
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, 10, 10);
 8000db4:	1d39      	adds	r1, r7, #4
 8000db6:	230a      	movs	r3, #10
 8000db8:	220a      	movs	r2, #10
 8000dba:	480d      	ldr	r0, [pc, #52]	; (8000df0 <send_slave_ids_to_interface+0x90>)
 8000dbc:	f003 f840 	bl	8003e40 <HAL_UART_Transmit>
		while(1) {
			HAL_UART_Receive(&huart2, UART2_rxBuffer, 8, 10);
 8000dc0:	230a      	movs	r3, #10
 8000dc2:	2208      	movs	r2, #8
 8000dc4:	490b      	ldr	r1, [pc, #44]	; (8000df4 <send_slave_ids_to_interface+0x94>)
 8000dc6:	480a      	ldr	r0, [pc, #40]	; (8000df0 <send_slave_ids_to_interface+0x90>)
 8000dc8:	f003 f8bd 	bl	8003f46 <HAL_UART_Receive>
			if(UART2_rxBuffer[0] == INTERFACE_ACK) {
 8000dcc:	4b09      	ldr	r3, [pc, #36]	; (8000df4 <send_slave_ids_to_interface+0x94>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	2b51      	cmp	r3, #81	; 0x51
 8000dd2:	d000      	beq.n	8000dd6 <send_slave_ids_to_interface+0x76>
			HAL_UART_Receive(&huart2, UART2_rxBuffer, 8, 10);
 8000dd4:	e7f4      	b.n	8000dc0 <send_slave_ids_to_interface+0x60>
				break;
 8000dd6:	bf00      	nop
	for(uint8_t i=0; i<3; i++){
 8000dd8:	7bbb      	ldrb	r3, [r7, #14]
 8000dda:	3301      	adds	r3, #1
 8000ddc:	73bb      	strb	r3, [r7, #14]
 8000dde:	7bbb      	ldrb	r3, [r7, #14]
 8000de0:	2b02      	cmp	r3, #2
 8000de2:	d9c5      	bls.n	8000d70 <send_slave_ids_to_interface+0x10>
			}
		}
	}
}
 8000de4:	bf00      	nop
 8000de6:	bf00      	nop
 8000de8:	3710      	adds	r7, #16
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	2000012c 	.word	0x2000012c
 8000df4:	20000378 	.word	0x20000378

08000df8 <kill_slave_process>:

void kill_slave_process(uint8_t slave_number){
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b086      	sub	sp, #24
 8000dfc:	af02      	add	r7, sp, #8
 8000dfe:	4603      	mov	r3, r0
 8000e00:	71fb      	strb	r3, [r7, #7]
	uint8_t data[8];
	data[0] = RESET_SIGNAL;
 8000e02:	2350      	movs	r3, #80	; 0x50
 8000e04:	723b      	strb	r3, [r7, #8]
	Can_Send(&hcan, sheduler.slave_blocks[slave_number].slave_ID, 1, data, &Can_TxMailBox[0]);
 8000e06:	79fa      	ldrb	r2, [r7, #7]
 8000e08:	490c      	ldr	r1, [pc, #48]	; (8000e3c <kill_slave_process+0x44>)
 8000e0a:	4613      	mov	r3, r2
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	4413      	add	r3, r2
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	440b      	add	r3, r1
 8000e14:	f993 3000 	ldrsb.w	r3, [r3]
 8000e18:	b2d9      	uxtb	r1, r3
 8000e1a:	f107 0308 	add.w	r3, r7, #8
 8000e1e:	4a08      	ldr	r2, [pc, #32]	; (8000e40 <kill_slave_process+0x48>)
 8000e20:	9200      	str	r2, [sp, #0]
 8000e22:	2201      	movs	r2, #1
 8000e24:	4807      	ldr	r0, [pc, #28]	; (8000e44 <kill_slave_process+0x4c>)
 8000e26:	f7ff fa05 	bl	8000234 <Can_Send>
	set_slave_idle(&sheduler, slave_number);
 8000e2a:	79fb      	ldrb	r3, [r7, #7]
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4803      	ldr	r0, [pc, #12]	; (8000e3c <kill_slave_process+0x44>)
 8000e30:	f7ff fcff 	bl	8000832 <set_slave_idle>
}
 8000e34:	bf00      	nop
 8000e36:	3710      	adds	r7, #16
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	20000174 	.word	0x20000174
 8000e40:	20000064 	.word	0x20000064
 8000e44:	20000074 	.word	0x20000074

08000e48 <run_operation>:

void run_operation(uint8_t slave_id, uint8_t index, uint8_t length_high, uint8_t length_low, uint8_t priority, uint8_t number_of_slaves){
 8000e48:	b590      	push	{r4, r7, lr}
 8000e4a:	b089      	sub	sp, #36	; 0x24
 8000e4c:	af02      	add	r7, sp, #8
 8000e4e:	4604      	mov	r4, r0
 8000e50:	4608      	mov	r0, r1
 8000e52:	4611      	mov	r1, r2
 8000e54:	461a      	mov	r2, r3
 8000e56:	4623      	mov	r3, r4
 8000e58:	71fb      	strb	r3, [r7, #7]
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	71bb      	strb	r3, [r7, #6]
 8000e5e:	460b      	mov	r3, r1
 8000e60:	717b      	strb	r3, [r7, #5]
 8000e62:	4613      	mov	r3, r2
 8000e64:	713b      	strb	r3, [r7, #4]
	// if slave is selected by id, run it immediately
	if(slave_id != MAX_SLAVE_NUM){
 8000e66:	79fb      	ldrb	r3, [r7, #7]
 8000e68:	2b04      	cmp	r3, #4
 8000e6a:	d01f      	beq.n	8000eac <run_operation+0x64>
		uint8_t data[8];
		data[0] = (uint8_t)FRAME_SIGNAL;
 8000e6c:	2330      	movs	r3, #48	; 0x30
 8000e6e:	723b      	strb	r3, [r7, #8]
		data[1] = index;
 8000e70:	79bb      	ldrb	r3, [r7, #6]
 8000e72:	727b      	strb	r3, [r7, #9]
		data[2] = length_high;
 8000e74:	797b      	ldrb	r3, [r7, #5]
 8000e76:	72bb      	strb	r3, [r7, #10]
		data[3] = length_low;
 8000e78:	793b      	ldrb	r3, [r7, #4]
 8000e7a:	72fb      	strb	r3, [r7, #11]
		Can_Send(&hcan, sheduler.slave_blocks[slave_id-1].slave_ID, 4, data, &Can_TxMailBox[0]);
 8000e7c:	79fb      	ldrb	r3, [r7, #7]
 8000e7e:	1e5a      	subs	r2, r3, #1
 8000e80:	4919      	ldr	r1, [pc, #100]	; (8000ee8 <run_operation+0xa0>)
 8000e82:	4613      	mov	r3, r2
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	4413      	add	r3, r2
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	440b      	add	r3, r1
 8000e8c:	f993 3000 	ldrsb.w	r3, [r3]
 8000e90:	b2d9      	uxtb	r1, r3
 8000e92:	f107 0308 	add.w	r3, r7, #8
 8000e96:	4a15      	ldr	r2, [pc, #84]	; (8000eec <run_operation+0xa4>)
 8000e98:	9200      	str	r2, [sp, #0]
 8000e9a:	2204      	movs	r2, #4
 8000e9c:	4814      	ldr	r0, [pc, #80]	; (8000ef0 <run_operation+0xa8>)
 8000e9e:	f7ff f9c9 	bl	8000234 <Can_Send>
		sheduler.sheduler_state = WAITING_ACK_STATE;
 8000ea2:	4b11      	ldr	r3, [pc, #68]	; (8000ee8 <run_operation+0xa0>)
 8000ea4:	2204      	movs	r2, #4
 8000ea6:	f883 21f2 	strb.w	r2, [r3, #498]	; 0x1f2
 8000eaa:	e01a      	b.n	8000ee2 <run_operation+0x9a>
		return;
	}
	operation_control_block operation;
	operation.operation_ID = index;
 8000eac:	79bb      	ldrb	r3, [r7, #6]
 8000eae:	743b      	strb	r3, [r7, #16]
	uint16_t length = 0;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	82fb      	strh	r3, [r7, #22]
	length = (length_high << 8) | length_low;
 8000eb4:	797b      	ldrb	r3, [r7, #5]
 8000eb6:	021b      	lsls	r3, r3, #8
 8000eb8:	b21a      	sxth	r2, r3
 8000eba:	793b      	ldrb	r3, [r7, #4]
 8000ebc:	b21b      	sxth	r3, r3
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	b21b      	sxth	r3, r3
 8000ec2:	82fb      	strh	r3, [r7, #22]
	operation.operation_length = length;
 8000ec4:	8afb      	ldrh	r3, [r7, #22]
 8000ec6:	82bb      	strh	r3, [r7, #20]
	operation.number_of_working_slaves = number_of_slaves;
 8000ec8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000ecc:	74bb      	strb	r3, [r7, #18]
	operation.operation_priority = priority;
 8000ece:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000ed2:	747b      	strb	r3, [r7, #17]
	add_operation(&sheduler, operation);
 8000ed4:	f107 0310 	add.w	r3, r7, #16
 8000ed8:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000edc:	4802      	ldr	r0, [pc, #8]	; (8000ee8 <run_operation+0xa0>)
 8000ede:	f7ff fbb0 	bl	8000642 <add_operation>
}
 8000ee2:	371c      	adds	r7, #28
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd90      	pop	{r4, r7, pc}
 8000ee8:	20000174 	.word	0x20000174
 8000eec:	20000064 	.word	0x20000064
 8000ef0:	20000074 	.word	0x20000074

08000ef4 <alert_slave_finished>:

void alert_slave_finished(uint8_t slave_number){
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	71fb      	strb	r3, [r7, #7]
	uint8_t msg[3];
	msg[0] = INTERFACE_DONE_SIGNAL;
 8000efe:	2347      	movs	r3, #71	; 0x47
 8000f00:	733b      	strb	r3, [r7, #12]
	msg[1] = slave_number;
 8000f02:	79fb      	ldrb	r3, [r7, #7]
 8000f04:	737b      	strb	r3, [r7, #13]
	msg[2] = INTERFACE_DONE_SIGNAL;
 8000f06:	2347      	movs	r3, #71	; 0x47
 8000f08:	73bb      	strb	r3, [r7, #14]
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, 3, 10);
 8000f0a:	f107 010c 	add.w	r1, r7, #12
 8000f0e:	230a      	movs	r3, #10
 8000f10:	2203      	movs	r2, #3
 8000f12:	4803      	ldr	r0, [pc, #12]	; (8000f20 <alert_slave_finished+0x2c>)
 8000f14:	f002 ff94 	bl	8003e40 <HAL_UART_Transmit>
}
 8000f18:	bf00      	nop
 8000f1a:	3710      	adds	r7, #16
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	2000012c 	.word	0x2000012c

08000f24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f2a:	f000 fce5 	bl	80018f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f2e:	f000 f857 	bl	8000fe0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f32:	f000 f997 	bl	8001264 <MX_GPIO_Init>
  MX_CAN_Init();
 8000f36:	f000 f899 	bl	800106c <MX_CAN_Init>
  MX_TIM2_Init();
 8000f3a:	f000 f8cd 	bl	80010d8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000f3e:	f000 f919 	bl	8001174 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000f42:	f000 f965 	bl	8001210 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  Can_Filter_Config(&hcan, master);
 8000f46:	2101      	movs	r1, #1
 8000f48:	481e      	ldr	r0, [pc, #120]	; (8000fc4 <main+0xa0>)
 8000f4a:	f7ff f8ff 	bl	800014c <Can_Filter_Config>
//   initiate can receive callback
  Can_InterruptCallBack(system_callback);
 8000f4e:	481e      	ldr	r0, [pc, #120]	; (8000fc8 <main+0xa4>)
 8000f50:	f7ff f998 	bl	8000284 <Can_InterruptCallBack>
//   select pins for initialization
  sheduler_init(&sheduler);
 8000f54:	481d      	ldr	r0, [pc, #116]	; (8000fcc <main+0xa8>)
 8000f56:	f7ff faaa 	bl	80004ae <sheduler_init>
//   create 2 dummy operations then add it to the operation priority queue
//   this approach is used since the interface microcontroller is not ready
  operation_control_block operation;
  operation.operation_ID = 0x00;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	703b      	strb	r3, [r7, #0]
  operation.operation_length = 0x1900;
 8000f5e:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000f62:	80bb      	strh	r3, [r7, #4]
  operation.number_of_working_slaves = 1;
 8000f64:	2301      	movs	r3, #1
 8000f66:	70bb      	strb	r3, [r7, #2]
  operation.operation_priority = 1;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	707b      	strb	r3, [r7, #1]
  add_operation(&sheduler, operation);
 8000f6c:	463b      	mov	r3, r7
 8000f6e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000f72:	4816      	ldr	r0, [pc, #88]	; (8000fcc <main+0xa8>)
 8000f74:	f7ff fb65 	bl	8000642 <add_operation>
  add_operation(&sheduler, operation);
 8000f78:	463b      	mov	r3, r7
 8000f7a:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000f7e:	4813      	ldr	r0, [pc, #76]	; (8000fcc <main+0xa8>)
 8000f80:	f7ff fb5f 	bl	8000642 <add_operation>
  add_operation(&sheduler, operation);
 8000f84:	463b      	mov	r3, r7
 8000f86:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000f8a:	4810      	ldr	r0, [pc, #64]	; (8000fcc <main+0xa8>)
 8000f8c:	f7ff fb59 	bl	8000642 <add_operation>
  add_operation(&sheduler, operation);
 8000f90:	463b      	mov	r3, r7
 8000f92:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000f96:	480d      	ldr	r0, [pc, #52]	; (8000fcc <main+0xa8>)
 8000f98:	f7ff fb53 	bl	8000642 <add_operation>
//   select the first slave
  reset_all_select_pins();
 8000f9c:	f7ff fcfa 	bl	8000994 <reset_all_select_pins>
  set_current_pin();
 8000fa0:	f7ff fd18 	bl	80009d4 <set_current_pin>
  HAL_TIM_Base_Start_IT(&htim2);
 8000fa4:	480a      	ldr	r0, [pc, #40]	; (8000fd0 <main+0xac>)
 8000fa6:	f002 fb1f 	bl	80035e8 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart2, UART2_rxBuffer, 8);
 8000faa:	2208      	movs	r2, #8
 8000fac:	4909      	ldr	r1, [pc, #36]	; (8000fd4 <main+0xb0>)
 8000fae:	480a      	ldr	r0, [pc, #40]	; (8000fd8 <main+0xb4>)
 8000fb0:	f003 f85b 	bl	800406a <HAL_UART_Receive_IT>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fba:	4808      	ldr	r0, [pc, #32]	; (8000fdc <main+0xb8>)
 8000fbc:	f001 fe82 	bl	8002cc4 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
 8000fc0:	e7fe      	b.n	8000fc0 <main+0x9c>
 8000fc2:	bf00      	nop
 8000fc4:	20000074 	.word	0x20000074
 8000fc8:	08001395 	.word	0x08001395
 8000fcc:	20000174 	.word	0x20000174
 8000fd0:	2000009c 	.word	0x2000009c
 8000fd4:	20000378 	.word	0x20000378
 8000fd8:	2000012c 	.word	0x2000012c
 8000fdc:	40011000 	.word	0x40011000

08000fe0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b090      	sub	sp, #64	; 0x40
 8000fe4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fe6:	f107 0318 	add.w	r3, r7, #24
 8000fea:	2228      	movs	r2, #40	; 0x28
 8000fec:	2100      	movs	r1, #0
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f003 fde0 	bl	8004bb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ff4:	1d3b      	adds	r3, r7, #4
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	605a      	str	r2, [r3, #4]
 8000ffc:	609a      	str	r2, [r3, #8]
 8000ffe:	60da      	str	r2, [r3, #12]
 8001000:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001002:	2301      	movs	r3, #1
 8001004:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001006:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800100a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800100c:	2300      	movs	r3, #0
 800100e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001010:	2301      	movs	r3, #1
 8001012:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001014:	2302      	movs	r3, #2
 8001016:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001018:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800101c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800101e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001022:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001024:	f107 0318 	add.w	r3, r7, #24
 8001028:	4618      	mov	r0, r3
 800102a:	f001 fe7d 	bl	8002d28 <HAL_RCC_OscConfig>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001034:	f000 fac6 	bl	80015c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001038:	230f      	movs	r3, #15
 800103a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800103c:	2302      	movs	r3, #2
 800103e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001040:	2300      	movs	r3, #0
 8001042:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001044:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001048:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800104a:	2300      	movs	r3, #0
 800104c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800104e:	1d3b      	adds	r3, r7, #4
 8001050:	2102      	movs	r1, #2
 8001052:	4618      	mov	r0, r3
 8001054:	f002 f8ea 	bl	800322c <HAL_RCC_ClockConfig>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800105e:	f000 fab1 	bl	80015c4 <Error_Handler>
  }
}
 8001062:	bf00      	nop
 8001064:	3740      	adds	r7, #64	; 0x40
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
	...

0800106c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8001070:	4b17      	ldr	r3, [pc, #92]	; (80010d0 <MX_CAN_Init+0x64>)
 8001072:	4a18      	ldr	r2, [pc, #96]	; (80010d4 <MX_CAN_Init+0x68>)
 8001074:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 8001076:	4b16      	ldr	r3, [pc, #88]	; (80010d0 <MX_CAN_Init+0x64>)
 8001078:	2212      	movs	r2, #18
 800107a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800107c:	4b14      	ldr	r3, [pc, #80]	; (80010d0 <MX_CAN_Init+0x64>)
 800107e:	2200      	movs	r2, #0
 8001080:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001082:	4b13      	ldr	r3, [pc, #76]	; (80010d0 <MX_CAN_Init+0x64>)
 8001084:	2200      	movs	r2, #0
 8001086:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001088:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <MX_CAN_Init+0x64>)
 800108a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800108e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001090:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <MX_CAN_Init+0x64>)
 8001092:	2200      	movs	r2, #0
 8001094:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001096:	4b0e      	ldr	r3, [pc, #56]	; (80010d0 <MX_CAN_Init+0x64>)
 8001098:	2200      	movs	r2, #0
 800109a:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800109c:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <MX_CAN_Init+0x64>)
 800109e:	2200      	movs	r2, #0
 80010a0:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80010a2:	4b0b      	ldr	r3, [pc, #44]	; (80010d0 <MX_CAN_Init+0x64>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80010a8:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <MX_CAN_Init+0x64>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80010ae:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <MX_CAN_Init+0x64>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80010b4:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <MX_CAN_Init+0x64>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80010ba:	4805      	ldr	r0, [pc, #20]	; (80010d0 <MX_CAN_Init+0x64>)
 80010bc:	f000 fc7e 	bl	80019bc <HAL_CAN_Init>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 80010c6:	f000 fa7d 	bl	80015c4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20000074 	.word	0x20000074
 80010d4:	40006400 	.word	0x40006400

080010d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010de:	f107 0308 	add.w	r3, r7, #8
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	605a      	str	r2, [r3, #4]
 80010e8:	609a      	str	r2, [r3, #8]
 80010ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ec:	463b      	mov	r3, r7
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010f4:	4b1e      	ldr	r3, [pc, #120]	; (8001170 <MX_TIM2_Init+0x98>)
 80010f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200-1;
 80010fc:	4b1c      	ldr	r3, [pc, #112]	; (8001170 <MX_TIM2_Init+0x98>)
 80010fe:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001102:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001104:	4b1a      	ldr	r3, [pc, #104]	; (8001170 <MX_TIM2_Init+0x98>)
 8001106:	2200      	movs	r2, #0
 8001108:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 800110a:	4b19      	ldr	r3, [pc, #100]	; (8001170 <MX_TIM2_Init+0x98>)
 800110c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001110:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001112:	4b17      	ldr	r3, [pc, #92]	; (8001170 <MX_TIM2_Init+0x98>)
 8001114:	2200      	movs	r2, #0
 8001116:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001118:	4b15      	ldr	r3, [pc, #84]	; (8001170 <MX_TIM2_Init+0x98>)
 800111a:	2280      	movs	r2, #128	; 0x80
 800111c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800111e:	4814      	ldr	r0, [pc, #80]	; (8001170 <MX_TIM2_Init+0x98>)
 8001120:	f002 fa12 	bl	8003548 <HAL_TIM_Base_Init>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800112a:	f000 fa4b 	bl	80015c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800112e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001132:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001134:	f107 0308 	add.w	r3, r7, #8
 8001138:	4619      	mov	r1, r3
 800113a:	480d      	ldr	r0, [pc, #52]	; (8001170 <MX_TIM2_Init+0x98>)
 800113c:	f002 fbdc 	bl	80038f8 <HAL_TIM_ConfigClockSource>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001146:	f000 fa3d 	bl	80015c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800114a:	2300      	movs	r3, #0
 800114c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800114e:	2300      	movs	r3, #0
 8001150:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001152:	463b      	mov	r3, r7
 8001154:	4619      	mov	r1, r3
 8001156:	4806      	ldr	r0, [pc, #24]	; (8001170 <MX_TIM2_Init+0x98>)
 8001158:	f002 fdb2 	bl	8003cc0 <HAL_TIMEx_MasterConfigSynchronization>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001162:	f000 fa2f 	bl	80015c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001166:	bf00      	nop
 8001168:	3718      	adds	r7, #24
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	2000009c 	.word	0x2000009c

08001174 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800117a:	f107 0308 	add.w	r3, r7, #8
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]
 8001184:	609a      	str	r2, [r3, #8]
 8001186:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001188:	463b      	mov	r3, r7
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001190:	4b1d      	ldr	r3, [pc, #116]	; (8001208 <MX_TIM3_Init+0x94>)
 8001192:	4a1e      	ldr	r2, [pc, #120]	; (800120c <MX_TIM3_Init+0x98>)
 8001194:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200-1;
 8001196:	4b1c      	ldr	r3, [pc, #112]	; (8001208 <MX_TIM3_Init+0x94>)
 8001198:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800119c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800119e:	4b1a      	ldr	r3, [pc, #104]	; (8001208 <MX_TIM3_Init+0x94>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500;
 80011a4:	4b18      	ldr	r3, [pc, #96]	; (8001208 <MX_TIM3_Init+0x94>)
 80011a6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80011aa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ac:	4b16      	ldr	r3, [pc, #88]	; (8001208 <MX_TIM3_Init+0x94>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011b2:	4b15      	ldr	r3, [pc, #84]	; (8001208 <MX_TIM3_Init+0x94>)
 80011b4:	2280      	movs	r2, #128	; 0x80
 80011b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011b8:	4813      	ldr	r0, [pc, #76]	; (8001208 <MX_TIM3_Init+0x94>)
 80011ba:	f002 f9c5 	bl	8003548 <HAL_TIM_Base_Init>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80011c4:	f000 f9fe 	bl	80015c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011ce:	f107 0308 	add.w	r3, r7, #8
 80011d2:	4619      	mov	r1, r3
 80011d4:	480c      	ldr	r0, [pc, #48]	; (8001208 <MX_TIM3_Init+0x94>)
 80011d6:	f002 fb8f 	bl	80038f8 <HAL_TIM_ConfigClockSource>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80011e0:	f000 f9f0 	bl	80015c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011e4:	2300      	movs	r3, #0
 80011e6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011e8:	2300      	movs	r3, #0
 80011ea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011ec:	463b      	mov	r3, r7
 80011ee:	4619      	mov	r1, r3
 80011f0:	4805      	ldr	r0, [pc, #20]	; (8001208 <MX_TIM3_Init+0x94>)
 80011f2:	f002 fd65 	bl	8003cc0 <HAL_TIMEx_MasterConfigSynchronization>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80011fc:	f000 f9e2 	bl	80015c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001200:	bf00      	nop
 8001202:	3718      	adds	r7, #24
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	200000e4 	.word	0x200000e4
 800120c:	40000400 	.word	0x40000400

08001210 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001214:	4b11      	ldr	r3, [pc, #68]	; (800125c <MX_USART2_UART_Init+0x4c>)
 8001216:	4a12      	ldr	r2, [pc, #72]	; (8001260 <MX_USART2_UART_Init+0x50>)
 8001218:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800121a:	4b10      	ldr	r3, [pc, #64]	; (800125c <MX_USART2_UART_Init+0x4c>)
 800121c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001220:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001222:	4b0e      	ldr	r3, [pc, #56]	; (800125c <MX_USART2_UART_Init+0x4c>)
 8001224:	2200      	movs	r2, #0
 8001226:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001228:	4b0c      	ldr	r3, [pc, #48]	; (800125c <MX_USART2_UART_Init+0x4c>)
 800122a:	2200      	movs	r2, #0
 800122c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800122e:	4b0b      	ldr	r3, [pc, #44]	; (800125c <MX_USART2_UART_Init+0x4c>)
 8001230:	2200      	movs	r2, #0
 8001232:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001234:	4b09      	ldr	r3, [pc, #36]	; (800125c <MX_USART2_UART_Init+0x4c>)
 8001236:	220c      	movs	r2, #12
 8001238:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800123a:	4b08      	ldr	r3, [pc, #32]	; (800125c <MX_USART2_UART_Init+0x4c>)
 800123c:	2200      	movs	r2, #0
 800123e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001240:	4b06      	ldr	r3, [pc, #24]	; (800125c <MX_USART2_UART_Init+0x4c>)
 8001242:	2200      	movs	r2, #0
 8001244:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001246:	4805      	ldr	r0, [pc, #20]	; (800125c <MX_USART2_UART_Init+0x4c>)
 8001248:	f002 fdaa 	bl	8003da0 <HAL_UART_Init>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001252:	f000 f9b7 	bl	80015c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	2000012c 	.word	0x2000012c
 8001260:	40004400 	.word	0x40004400

08001264 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b088      	sub	sp, #32
 8001268:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126a:	f107 0310 	add.w	r3, r7, #16
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	605a      	str	r2, [r3, #4]
 8001274:	609a      	str	r2, [r3, #8]
 8001276:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001278:	4b42      	ldr	r3, [pc, #264]	; (8001384 <MX_GPIO_Init+0x120>)
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	4a41      	ldr	r2, [pc, #260]	; (8001384 <MX_GPIO_Init+0x120>)
 800127e:	f043 0310 	orr.w	r3, r3, #16
 8001282:	6193      	str	r3, [r2, #24]
 8001284:	4b3f      	ldr	r3, [pc, #252]	; (8001384 <MX_GPIO_Init+0x120>)
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	f003 0310 	and.w	r3, r3, #16
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001290:	4b3c      	ldr	r3, [pc, #240]	; (8001384 <MX_GPIO_Init+0x120>)
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	4a3b      	ldr	r2, [pc, #236]	; (8001384 <MX_GPIO_Init+0x120>)
 8001296:	f043 0320 	orr.w	r3, r3, #32
 800129a:	6193      	str	r3, [r2, #24]
 800129c:	4b39      	ldr	r3, [pc, #228]	; (8001384 <MX_GPIO_Init+0x120>)
 800129e:	699b      	ldr	r3, [r3, #24]
 80012a0:	f003 0320 	and.w	r3, r3, #32
 80012a4:	60bb      	str	r3, [r7, #8]
 80012a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a8:	4b36      	ldr	r3, [pc, #216]	; (8001384 <MX_GPIO_Init+0x120>)
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	4a35      	ldr	r2, [pc, #212]	; (8001384 <MX_GPIO_Init+0x120>)
 80012ae:	f043 0304 	orr.w	r3, r3, #4
 80012b2:	6193      	str	r3, [r2, #24]
 80012b4:	4b33      	ldr	r3, [pc, #204]	; (8001384 <MX_GPIO_Init+0x120>)
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	f003 0304 	and.w	r3, r3, #4
 80012bc:	607b      	str	r3, [r7, #4]
 80012be:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c0:	4b30      	ldr	r3, [pc, #192]	; (8001384 <MX_GPIO_Init+0x120>)
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	4a2f      	ldr	r2, [pc, #188]	; (8001384 <MX_GPIO_Init+0x120>)
 80012c6:	f043 0308 	orr.w	r3, r3, #8
 80012ca:	6193      	str	r3, [r2, #24]
 80012cc:	4b2d      	ldr	r3, [pc, #180]	; (8001384 <MX_GPIO_Init+0x120>)
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	f003 0308 	and.w	r3, r3, #8
 80012d4:	603b      	str	r3, [r7, #0]
 80012d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80012d8:	2200      	movs	r2, #0
 80012da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012de:	482a      	ldr	r0, [pc, #168]	; (8001388 <MX_GPIO_Init+0x124>)
 80012e0:	f001 fcf0 	bl	8002cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80012e4:	2201      	movs	r2, #1
 80012e6:	2120      	movs	r1, #32
 80012e8:	4828      	ldr	r0, [pc, #160]	; (800138c <MX_GPIO_Init+0x128>)
 80012ea:	f001 fceb 	bl	8002cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10, GPIO_PIN_RESET);
 80012ee:	2200      	movs	r2, #0
 80012f0:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
 80012f4:	4825      	ldr	r0, [pc, #148]	; (800138c <MX_GPIO_Init+0x128>)
 80012f6:	f001 fce5 	bl	8002cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 80012fa:	2200      	movs	r2, #0
 80012fc:	f44f 71cc 	mov.w	r1, #408	; 0x198
 8001300:	4823      	ldr	r0, [pc, #140]	; (8001390 <MX_GPIO_Init+0x12c>)
 8001302:	f001 fcdf 	bl	8002cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001306:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800130a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800130c:	2301      	movs	r3, #1
 800130e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001314:	2302      	movs	r3, #2
 8001316:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001318:	f107 0310 	add.w	r3, r7, #16
 800131c:	4619      	mov	r1, r3
 800131e:	481a      	ldr	r0, [pc, #104]	; (8001388 <MX_GPIO_Init+0x124>)
 8001320:	f001 fb4c 	bl	80029bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001324:	2320      	movs	r3, #32
 8001326:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001328:	2301      	movs	r3, #1
 800132a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800132c:	2301      	movs	r3, #1
 800132e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001330:	2302      	movs	r3, #2
 8001332:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001334:	f107 0310 	add.w	r3, r7, #16
 8001338:	4619      	mov	r1, r3
 800133a:	4814      	ldr	r0, [pc, #80]	; (800138c <MX_GPIO_Init+0x128>)
 800133c:	f001 fb3e 	bl	80029bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8001340:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001344:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001346:	2301      	movs	r3, #1
 8001348:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134a:	2300      	movs	r3, #0
 800134c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134e:	2302      	movs	r3, #2
 8001350:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001352:	f107 0310 	add.w	r3, r7, #16
 8001356:	4619      	mov	r1, r3
 8001358:	480c      	ldr	r0, [pc, #48]	; (800138c <MX_GPIO_Init+0x128>)
 800135a:	f001 fb2f 	bl	80029bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_8;
 800135e:	f44f 73cc 	mov.w	r3, #408	; 0x198
 8001362:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001364:	2301      	movs	r3, #1
 8001366:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136c:	2302      	movs	r3, #2
 800136e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001370:	f107 0310 	add.w	r3, r7, #16
 8001374:	4619      	mov	r1, r3
 8001376:	4806      	ldr	r0, [pc, #24]	; (8001390 <MX_GPIO_Init+0x12c>)
 8001378:	f001 fb20 	bl	80029bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800137c:	bf00      	nop
 800137e:	3720      	adds	r7, #32
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	40021000 	.word	0x40021000
 8001388:	40011000 	.word	0x40011000
 800138c:	40010800 	.word	0x40010800
 8001390:	40010c00 	.word	0x40010c00

08001394 <system_callback>:
/* USER CODE BEGIN 4 */

/**
 * Scheduler <--> Slave Communications
 **/
void system_callback(){
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
	// INIT state adds slaves to the slave control block
	if(sheduler.sheduler_state == INIT_STATE){
 8001398:	4b1f      	ldr	r3, [pc, #124]	; (8001418 <system_callback+0x84>)
 800139a:	f893 31f2 	ldrb.w	r3, [r3, #498]	; 0x1f2
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d102      	bne.n	80013a8 <system_callback+0x14>
		add_slave_to_sheduler();
 80013a2:	f7ff fb37 	bl	8000a14 <add_slave_to_sheduler>
		return;
 80013a6:	e036      	b.n	8001416 <system_callback+0x82>
	}
	// if the reset slave sends ack it was reset
	if(Can_RxData[0] == RESET_SIGNAL){
 80013a8:	4b1c      	ldr	r3, [pc, #112]	; (800141c <system_callback+0x88>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	2b50      	cmp	r3, #80	; 0x50
 80013ae:	d106      	bne.n	80013be <system_callback+0x2a>
		set_slave_idle_by_id(&sheduler, RxHeader.StdId);
 80013b0:	4b1b      	ldr	r3, [pc, #108]	; (8001420 <system_callback+0x8c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4619      	mov	r1, r3
 80013b6:	4818      	ldr	r0, [pc, #96]	; (8001418 <system_callback+0x84>)
 80013b8:	f7ff fa61 	bl	800087e <set_slave_idle_by_id>
		return;
 80013bc:	e02b      	b.n	8001416 <system_callback+0x82>
	}
	// send opcode to any slave
	if(sheduler.sheduler_state == SENDING_CODE_STATE){
 80013be:	4b16      	ldr	r3, [pc, #88]	; (8001418 <system_callback+0x84>)
 80013c0:	f893 31f2 	ldrb.w	r3, [r3, #498]	; 0x1f2
 80013c4:	2b03      	cmp	r3, #3
 80013c6:	d102      	bne.n	80013ce <system_callback+0x3a>
		send_opcode_to_slave();
 80013c8:	f7ff fb72 	bl	8000ab0 <send_opcode_to_slave>
		return;
 80013cc:	e023      	b.n	8001416 <system_callback+0x82>
	}
	// received ACK and now adding the slave to the waiting queue
	if(sheduler.sheduler_state == WAITING_ACK_STATE && Can_RxData[0] == RCVD_ACK){
 80013ce:	4b12      	ldr	r3, [pc, #72]	; (8001418 <system_callback+0x84>)
 80013d0:	f893 31f2 	ldrb.w	r3, [r3, #498]	; 0x1f2
 80013d4:	2b04      	cmp	r3, #4
 80013d6:	d106      	bne.n	80013e6 <system_callback+0x52>
 80013d8:	4b10      	ldr	r3, [pc, #64]	; (800141c <system_callback+0x88>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d102      	bne.n	80013e6 <system_callback+0x52>
		add_slave_to_waiting_queue();
 80013e0:	f7ff fc02 	bl	8000be8 <add_slave_to_waiting_queue>
		return;
 80013e4:	e017      	b.n	8001416 <system_callback+0x82>
	}
	// if slave is finished accessing the ROM
	if(Can_RxData[0] == MEM_FREE_ACK){
 80013e6:	4b0d      	ldr	r3, [pc, #52]	; (800141c <system_callback+0x88>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2b03      	cmp	r3, #3
 80013ec:	d102      	bne.n	80013f4 <system_callback+0x60>
		set_slave_busy();
 80013ee:	f7ff fc41 	bl	8000c74 <set_slave_busy>
		return;
 80013f2:	e010      	b.n	8001416 <system_callback+0x82>
	}
	// if slave finished working on operation
	if(Can_RxData[0] == WORK_DONE_ACK){
 80013f4:	4b09      	ldr	r3, [pc, #36]	; (800141c <system_callback+0x88>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	2b04      	cmp	r3, #4
 80013fa:	d10c      	bne.n	8001416 <system_callback+0x82>
		set_slave_idle(&sheduler, Can_RxData[1]);
 80013fc:	4b07      	ldr	r3, [pc, #28]	; (800141c <system_callback+0x88>)
 80013fe:	785b      	ldrb	r3, [r3, #1]
 8001400:	4619      	mov	r1, r3
 8001402:	4805      	ldr	r0, [pc, #20]	; (8001418 <system_callback+0x84>)
 8001404:	f7ff fa15 	bl	8000832 <set_slave_idle>
		alert_slave_finished(RxHeader.StdId);
 8001408:	4b05      	ldr	r3, [pc, #20]	; (8001420 <system_callback+0x8c>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	b2db      	uxtb	r3, r3
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff fd70 	bl	8000ef4 <alert_slave_finished>
		return;
 8001414:	bf00      	nop
	}
}
 8001416:	bd80      	pop	{r7, pc}
 8001418:	20000174 	.word	0x20000174
 800141c:	2000005c 	.word	0x2000005c
 8001420:	20000040 	.word	0x20000040

08001424 <HAL_UART_RxCpltCallback>:

/*
 * Scheduler <--> Interface Communications
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001424:	b5b0      	push	{r4, r5, r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af02      	add	r7, sp, #8
 800142a:	6078      	str	r0, [r7, #4]
	if(UART2_rxBuffer[0] == INTERFACE_START_SIGNAL){
 800142c:	4b2f      	ldr	r3, [pc, #188]	; (80014ec <HAL_UART_RxCpltCallback+0xc8>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b40      	cmp	r3, #64	; 0x40
 8001432:	d112      	bne.n	800145a <HAL_UART_RxCpltCallback+0x36>
		sheduler.sheduler_state = IDLE_STATE;
 8001434:	4b2e      	ldr	r3, [pc, #184]	; (80014f0 <HAL_UART_RxCpltCallback+0xcc>)
 8001436:	2202      	movs	r2, #2
 8001438:	f883 21f2 	strb.w	r2, [r3, #498]	; 0x1f2
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800143c:	2201      	movs	r2, #1
 800143e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001442:	482c      	ldr	r0, [pc, #176]	; (80014f4 <HAL_UART_RxCpltCallback+0xd0>)
 8001444:	f001 fc3e 	bl	8002cc4 <HAL_GPIO_WritePin>
		send_slave_ids_to_interface();
 8001448:	f7ff fc8a 	bl	8000d60 <send_slave_ids_to_interface>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800144c:	2200      	movs	r2, #0
 800144e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001452:	4828      	ldr	r0, [pc, #160]	; (80014f4 <HAL_UART_RxCpltCallback+0xd0>)
 8001454:	f001 fc36 	bl	8002cc4 <HAL_GPIO_WritePin>
		return;
 8001458:	e045      	b.n	80014e6 <HAL_UART_RxCpltCallback+0xc2>
	}
	if(UART2_rxBuffer[0] == INTERFACE_STATUS_SIGNAL){
 800145a:	4b24      	ldr	r3, [pc, #144]	; (80014ec <HAL_UART_RxCpltCallback+0xc8>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	2b44      	cmp	r3, #68	; 0x44
 8001460:	d102      	bne.n	8001468 <HAL_UART_RxCpltCallback+0x44>
		send_status_to_interface();
 8001462:	f7ff fc25 	bl	8000cb0 <send_status_to_interface>
		return;
 8001466:	e03e      	b.n	80014e6 <HAL_UART_RxCpltCallback+0xc2>
	}
	if(UART2_rxBuffer[0] == INTERFACE_RUN_SIGNAL){
 8001468:	4b20      	ldr	r3, [pc, #128]	; (80014ec <HAL_UART_RxCpltCallback+0xc8>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b46      	cmp	r3, #70	; 0x46
 800146e:	d112      	bne.n	8001496 <HAL_UART_RxCpltCallback+0x72>
		run_operation(UART2_rxBuffer[1], UART2_rxBuffer[2], UART2_rxBuffer[3], UART2_rxBuffer[4], UART2_rxBuffer[5], UART2_rxBuffer[6]);
 8001470:	4b1e      	ldr	r3, [pc, #120]	; (80014ec <HAL_UART_RxCpltCallback+0xc8>)
 8001472:	7858      	ldrb	r0, [r3, #1]
 8001474:	4b1d      	ldr	r3, [pc, #116]	; (80014ec <HAL_UART_RxCpltCallback+0xc8>)
 8001476:	7899      	ldrb	r1, [r3, #2]
 8001478:	4b1c      	ldr	r3, [pc, #112]	; (80014ec <HAL_UART_RxCpltCallback+0xc8>)
 800147a:	78dc      	ldrb	r4, [r3, #3]
 800147c:	4b1b      	ldr	r3, [pc, #108]	; (80014ec <HAL_UART_RxCpltCallback+0xc8>)
 800147e:	791d      	ldrb	r5, [r3, #4]
 8001480:	4b1a      	ldr	r3, [pc, #104]	; (80014ec <HAL_UART_RxCpltCallback+0xc8>)
 8001482:	795b      	ldrb	r3, [r3, #5]
 8001484:	4a19      	ldr	r2, [pc, #100]	; (80014ec <HAL_UART_RxCpltCallback+0xc8>)
 8001486:	7992      	ldrb	r2, [r2, #6]
 8001488:	9201      	str	r2, [sp, #4]
 800148a:	9300      	str	r3, [sp, #0]
 800148c:	462b      	mov	r3, r5
 800148e:	4622      	mov	r2, r4
 8001490:	f7ff fcda 	bl	8000e48 <run_operation>
		return;
 8001494:	e027      	b.n	80014e6 <HAL_UART_RxCpltCallback+0xc2>
	}
	if(UART2_rxBuffer[0] == INTERFACE_KILL_SIGNAL){
 8001496:	4b15      	ldr	r3, [pc, #84]	; (80014ec <HAL_UART_RxCpltCallback+0xc8>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	2b48      	cmp	r3, #72	; 0x48
 800149c:	d105      	bne.n	80014aa <HAL_UART_RxCpltCallback+0x86>
		kill_slave_process(UART2_rxBuffer[1]);
 800149e:	4b13      	ldr	r3, [pc, #76]	; (80014ec <HAL_UART_RxCpltCallback+0xc8>)
 80014a0:	785b      	ldrb	r3, [r3, #1]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff fca8 	bl	8000df8 <kill_slave_process>
		return;
 80014a8:	e01d      	b.n	80014e6 <HAL_UART_RxCpltCallback+0xc2>
	}
	if(UART2_rxBuffer[0] == INTERFACE_ROM_SIGNAL) {
 80014aa:	4b10      	ldr	r3, [pc, #64]	; (80014ec <HAL_UART_RxCpltCallback+0xc8>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	2b49      	cmp	r3, #73	; 0x49
 80014b0:	d114      	bne.n	80014dc <HAL_UART_RxCpltCallback+0xb8>
		uint8_t data[1] = {0};
 80014b2:	2300      	movs	r3, #0
 80014b4:	733b      	strb	r3, [r7, #12]
		if(sheduler.is_ROM_available && sheduler.number_of_waiting_slaves == 0) {
 80014b6:	4b0e      	ldr	r3, [pc, #56]	; (80014f0 <HAL_UART_RxCpltCallback+0xcc>)
 80014b8:	f893 31ec 	ldrb.w	r3, [r3, #492]	; 0x1ec
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d006      	beq.n	80014ce <HAL_UART_RxCpltCallback+0xaa>
 80014c0:	4b0b      	ldr	r3, [pc, #44]	; (80014f0 <HAL_UART_RxCpltCallback+0xcc>)
 80014c2:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d101      	bne.n	80014ce <HAL_UART_RxCpltCallback+0xaa>
			data[0] = 1;
 80014ca:	2301      	movs	r3, #1
 80014cc:	733b      	strb	r3, [r7, #12]
		}
		HAL_UART_Transmit(huart, data, 1, 10);
 80014ce:	f107 010c 	add.w	r1, r7, #12
 80014d2:	230a      	movs	r3, #10
 80014d4:	2201      	movs	r2, #1
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f002 fcb2 	bl	8003e40 <HAL_UART_Transmit>
	}
	HAL_UART_Receive_IT(&huart2, UART2_rxBuffer, 8);
 80014dc:	2208      	movs	r2, #8
 80014de:	4903      	ldr	r1, [pc, #12]	; (80014ec <HAL_UART_RxCpltCallback+0xc8>)
 80014e0:	4805      	ldr	r0, [pc, #20]	; (80014f8 <HAL_UART_RxCpltCallback+0xd4>)
 80014e2:	f002 fdc2 	bl	800406a <HAL_UART_Receive_IT>
}
 80014e6:	3710      	adds	r7, #16
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bdb0      	pop	{r4, r5, r7, pc}
 80014ec:	20000378 	.word	0x20000378
 80014f0:	20000174 	.word	0x20000174
 80014f4:	40011000 	.word	0x40011000
 80014f8:	2000012c 	.word	0x2000012c

080014fc <HAL_TIM_PeriodElapsedCallback>:

/*
 * Scheduler tick time
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b086      	sub	sp, #24
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM2){
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800150c:	d12e      	bne.n	800156c <HAL_TIM_PeriodElapsedCallback+0x70>
    	if(sheduler.sheduler_state == INIT_STATE) {
 800150e:	4b29      	ldr	r3, [pc, #164]	; (80015b4 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001510:	f893 31f2 	ldrb.w	r3, [r3, #498]	; 0x1f2
 8001514:	2b01      	cmp	r3, #1
 8001516:	d144      	bne.n	80015a2 <HAL_TIM_PeriodElapsedCallback+0xa6>
    		reset_all_select_pins();
 8001518:	f7ff fa3c 	bl	8000994 <reset_all_select_pins>
    		set_current_pin();
 800151c:	f7ff fa5a 	bl	80009d4 <set_current_pin>
    		if(sheduler.selected_pin >= MAX_SLAVE_NUM) {
 8001520:	4b24      	ldr	r3, [pc, #144]	; (80015b4 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001522:	f9b3 31fc 	ldrsh.w	r3, [r3, #508]	; 0x1fc
 8001526:	2b03      	cmp	r3, #3
 8001528:	dd3d      	ble.n	80015a6 <HAL_TIM_PeriodElapsedCallback+0xaa>
    			uint8_t msg[10];
    			msg[0] = INTERFACE_READY_SIGNAL;
 800152a:	2341      	movs	r3, #65	; 0x41
 800152c:	733b      	strb	r3, [r7, #12]
    			msg[1] = 0;
 800152e:	2300      	movs	r3, #0
 8001530:	737b      	strb	r3, [r7, #13]
    			msg[2] = 0;
 8001532:	2300      	movs	r3, #0
 8001534:	73bb      	strb	r3, [r7, #14]
    			msg[3] = 0;
 8001536:	2300      	movs	r3, #0
 8001538:	73fb      	strb	r3, [r7, #15]
    			msg[4] = 0;
 800153a:	2300      	movs	r3, #0
 800153c:	743b      	strb	r3, [r7, #16]
    			msg[5] = 0;
 800153e:	2300      	movs	r3, #0
 8001540:	747b      	strb	r3, [r7, #17]
    			msg[6] = 0;
 8001542:	2300      	movs	r3, #0
 8001544:	74bb      	strb	r3, [r7, #18]
    			msg[7] = 0;
 8001546:	2300      	movs	r3, #0
 8001548:	74fb      	strb	r3, [r7, #19]
    			msg[8] = 0;
 800154a:	2300      	movs	r3, #0
 800154c:	753b      	strb	r3, [r7, #20]
    			msg[9] = 0;
 800154e:	2300      	movs	r3, #0
 8001550:	757b      	strb	r3, [r7, #21]
				HAL_UART_Transmit(&huart2, (uint8_t*)msg, 10, 10);
 8001552:	f107 010c 	add.w	r1, r7, #12
 8001556:	230a      	movs	r3, #10
 8001558:	220a      	movs	r2, #10
 800155a:	4817      	ldr	r0, [pc, #92]	; (80015b8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800155c:	f002 fc70 	bl	8003e40 <HAL_UART_Transmit>
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001560:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001564:	4815      	ldr	r0, [pc, #84]	; (80015bc <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001566:	f001 fbc5 	bl	8002cf4 <HAL_GPIO_TogglePin>
			}
    		return;
 800156a:	e01c      	b.n	80015a6 <HAL_TIM_PeriodElapsedCallback+0xaa>
    	}
    	return;
    }
    if(htim->Instance == TIM3){
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a13      	ldr	r2, [pc, #76]	; (80015c0 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d11a      	bne.n	80015ac <HAL_TIM_PeriodElapsedCallback+0xb0>
    	if(sheduler.sheduler_state == IDLE_STATE && sheduler.number_of_idle_slaves != 0 && sheduler.number_of_available_operations != 0){
 8001576:	4b0f      	ldr	r3, [pc, #60]	; (80015b4 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001578:	f893 31f2 	ldrb.w	r3, [r3, #498]	; 0x1f2
 800157c:	2b02      	cmp	r3, #2
 800157e:	d114      	bne.n	80015aa <HAL_TIM_PeriodElapsedCallback+0xae>
 8001580:	4b0c      	ldr	r3, [pc, #48]	; (80015b4 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001582:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8001586:	2b00      	cmp	r3, #0
 8001588:	d00f      	beq.n	80015aa <HAL_TIM_PeriodElapsedCallback+0xae>
 800158a:	4b0a      	ldr	r3, [pc, #40]	; (80015b4 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800158c:	f893 31f1 	ldrb.w	r3, [r3, #497]	; 0x1f1
 8001590:	2b00      	cmp	r3, #0
 8001592:	d00a      	beq.n	80015aa <HAL_TIM_PeriodElapsedCallback+0xae>
    		sheduler.sheduler_state = SENDING_CODE_STATE;
 8001594:	4b07      	ldr	r3, [pc, #28]	; (80015b4 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001596:	2203      	movs	r2, #3
 8001598:	f883 21f2 	strb.w	r2, [r3, #498]	; 0x1f2
    		send_opcode_to_slave();
 800159c:	f7ff fa88 	bl	8000ab0 <send_opcode_to_slave>
			return;
 80015a0:	e004      	b.n	80015ac <HAL_TIM_PeriodElapsedCallback+0xb0>
    	return;
 80015a2:	bf00      	nop
 80015a4:	e002      	b.n	80015ac <HAL_TIM_PeriodElapsedCallback+0xb0>
    		return;
 80015a6:	bf00      	nop
 80015a8:	e000      	b.n	80015ac <HAL_TIM_PeriodElapsedCallback+0xb0>
    	}
    	return;
 80015aa:	bf00      	nop
    }
}
 80015ac:	3718      	adds	r7, #24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	20000174 	.word	0x20000174
 80015b8:	2000012c 	.word	0x2000012c
 80015bc:	40011000 	.word	0x40011000
 80015c0:	40000400 	.word	0x40000400

080015c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015c8:	b672      	cpsid	i
}
 80015ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80015cc:	e7fe      	b.n	80015cc <Error_Handler+0x8>
	...

080015d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015d6:	4b15      	ldr	r3, [pc, #84]	; (800162c <HAL_MspInit+0x5c>)
 80015d8:	699b      	ldr	r3, [r3, #24]
 80015da:	4a14      	ldr	r2, [pc, #80]	; (800162c <HAL_MspInit+0x5c>)
 80015dc:	f043 0301 	orr.w	r3, r3, #1
 80015e0:	6193      	str	r3, [r2, #24]
 80015e2:	4b12      	ldr	r3, [pc, #72]	; (800162c <HAL_MspInit+0x5c>)
 80015e4:	699b      	ldr	r3, [r3, #24]
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	60bb      	str	r3, [r7, #8]
 80015ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ee:	4b0f      	ldr	r3, [pc, #60]	; (800162c <HAL_MspInit+0x5c>)
 80015f0:	69db      	ldr	r3, [r3, #28]
 80015f2:	4a0e      	ldr	r2, [pc, #56]	; (800162c <HAL_MspInit+0x5c>)
 80015f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015f8:	61d3      	str	r3, [r2, #28]
 80015fa:	4b0c      	ldr	r3, [pc, #48]	; (800162c <HAL_MspInit+0x5c>)
 80015fc:	69db      	ldr	r3, [r3, #28]
 80015fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001602:	607b      	str	r3, [r7, #4]
 8001604:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001606:	4b0a      	ldr	r3, [pc, #40]	; (8001630 <HAL_MspInit+0x60>)
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	60fb      	str	r3, [r7, #12]
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	4a04      	ldr	r2, [pc, #16]	; (8001630 <HAL_MspInit+0x60>)
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001622:	bf00      	nop
 8001624:	3714      	adds	r7, #20
 8001626:	46bd      	mov	sp, r7
 8001628:	bc80      	pop	{r7}
 800162a:	4770      	bx	lr
 800162c:	40021000 	.word	0x40021000
 8001630:	40010000 	.word	0x40010000

08001634 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b088      	sub	sp, #32
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163c:	f107 0310 	add.w	r3, r7, #16
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a20      	ldr	r2, [pc, #128]	; (80016d0 <HAL_CAN_MspInit+0x9c>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d139      	bne.n	80016c8 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001654:	4b1f      	ldr	r3, [pc, #124]	; (80016d4 <HAL_CAN_MspInit+0xa0>)
 8001656:	69db      	ldr	r3, [r3, #28]
 8001658:	4a1e      	ldr	r2, [pc, #120]	; (80016d4 <HAL_CAN_MspInit+0xa0>)
 800165a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800165e:	61d3      	str	r3, [r2, #28]
 8001660:	4b1c      	ldr	r3, [pc, #112]	; (80016d4 <HAL_CAN_MspInit+0xa0>)
 8001662:	69db      	ldr	r3, [r3, #28]
 8001664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001668:	60fb      	str	r3, [r7, #12]
 800166a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800166c:	4b19      	ldr	r3, [pc, #100]	; (80016d4 <HAL_CAN_MspInit+0xa0>)
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	4a18      	ldr	r2, [pc, #96]	; (80016d4 <HAL_CAN_MspInit+0xa0>)
 8001672:	f043 0304 	orr.w	r3, r3, #4
 8001676:	6193      	str	r3, [r2, #24]
 8001678:	4b16      	ldr	r3, [pc, #88]	; (80016d4 <HAL_CAN_MspInit+0xa0>)
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	f003 0304 	and.w	r3, r3, #4
 8001680:	60bb      	str	r3, [r7, #8]
 8001682:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001684:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001688:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800168a:	2300      	movs	r3, #0
 800168c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168e:	2300      	movs	r3, #0
 8001690:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001692:	f107 0310 	add.w	r3, r7, #16
 8001696:	4619      	mov	r1, r3
 8001698:	480f      	ldr	r0, [pc, #60]	; (80016d8 <HAL_CAN_MspInit+0xa4>)
 800169a:	f001 f98f 	bl	80029bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800169e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a4:	2302      	movs	r3, #2
 80016a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016a8:	2303      	movs	r3, #3
 80016aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ac:	f107 0310 	add.w	r3, r7, #16
 80016b0:	4619      	mov	r1, r3
 80016b2:	4809      	ldr	r0, [pc, #36]	; (80016d8 <HAL_CAN_MspInit+0xa4>)
 80016b4:	f001 f982 	bl	80029bc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80016b8:	2200      	movs	r2, #0
 80016ba:	2100      	movs	r1, #0
 80016bc:	2014      	movs	r0, #20
 80016be:	f001 f894 	bl	80027ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80016c2:	2014      	movs	r0, #20
 80016c4:	f001 f8ad 	bl	8002822 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80016c8:	bf00      	nop
 80016ca:	3720      	adds	r7, #32
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	40006400 	.word	0x40006400
 80016d4:	40021000 	.word	0x40021000
 80016d8:	40010800 	.word	0x40010800

080016dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016ec:	d114      	bne.n	8001718 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016ee:	4b19      	ldr	r3, [pc, #100]	; (8001754 <HAL_TIM_Base_MspInit+0x78>)
 80016f0:	69db      	ldr	r3, [r3, #28]
 80016f2:	4a18      	ldr	r2, [pc, #96]	; (8001754 <HAL_TIM_Base_MspInit+0x78>)
 80016f4:	f043 0301 	orr.w	r3, r3, #1
 80016f8:	61d3      	str	r3, [r2, #28]
 80016fa:	4b16      	ldr	r3, [pc, #88]	; (8001754 <HAL_TIM_Base_MspInit+0x78>)
 80016fc:	69db      	ldr	r3, [r3, #28]
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001706:	2200      	movs	r2, #0
 8001708:	2100      	movs	r1, #0
 800170a:	201c      	movs	r0, #28
 800170c:	f001 f86d 	bl	80027ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001710:	201c      	movs	r0, #28
 8001712:	f001 f886 	bl	8002822 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001716:	e018      	b.n	800174a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a0e      	ldr	r2, [pc, #56]	; (8001758 <HAL_TIM_Base_MspInit+0x7c>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d113      	bne.n	800174a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001722:	4b0c      	ldr	r3, [pc, #48]	; (8001754 <HAL_TIM_Base_MspInit+0x78>)
 8001724:	69db      	ldr	r3, [r3, #28]
 8001726:	4a0b      	ldr	r2, [pc, #44]	; (8001754 <HAL_TIM_Base_MspInit+0x78>)
 8001728:	f043 0302 	orr.w	r3, r3, #2
 800172c:	61d3      	str	r3, [r2, #28]
 800172e:	4b09      	ldr	r3, [pc, #36]	; (8001754 <HAL_TIM_Base_MspInit+0x78>)
 8001730:	69db      	ldr	r3, [r3, #28]
 8001732:	f003 0302 	and.w	r3, r3, #2
 8001736:	60bb      	str	r3, [r7, #8]
 8001738:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800173a:	2200      	movs	r2, #0
 800173c:	2100      	movs	r1, #0
 800173e:	201d      	movs	r0, #29
 8001740:	f001 f853 	bl	80027ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001744:	201d      	movs	r0, #29
 8001746:	f001 f86c 	bl	8002822 <HAL_NVIC_EnableIRQ>
}
 800174a:	bf00      	nop
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40021000 	.word	0x40021000
 8001758:	40000400 	.word	0x40000400

0800175c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b088      	sub	sp, #32
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001764:	f107 0310 	add.w	r3, r7, #16
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a1f      	ldr	r2, [pc, #124]	; (80017f4 <HAL_UART_MspInit+0x98>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d137      	bne.n	80017ec <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800177c:	4b1e      	ldr	r3, [pc, #120]	; (80017f8 <HAL_UART_MspInit+0x9c>)
 800177e:	69db      	ldr	r3, [r3, #28]
 8001780:	4a1d      	ldr	r2, [pc, #116]	; (80017f8 <HAL_UART_MspInit+0x9c>)
 8001782:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001786:	61d3      	str	r3, [r2, #28]
 8001788:	4b1b      	ldr	r3, [pc, #108]	; (80017f8 <HAL_UART_MspInit+0x9c>)
 800178a:	69db      	ldr	r3, [r3, #28]
 800178c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001794:	4b18      	ldr	r3, [pc, #96]	; (80017f8 <HAL_UART_MspInit+0x9c>)
 8001796:	699b      	ldr	r3, [r3, #24]
 8001798:	4a17      	ldr	r2, [pc, #92]	; (80017f8 <HAL_UART_MspInit+0x9c>)
 800179a:	f043 0304 	orr.w	r3, r3, #4
 800179e:	6193      	str	r3, [r2, #24]
 80017a0:	4b15      	ldr	r3, [pc, #84]	; (80017f8 <HAL_UART_MspInit+0x9c>)
 80017a2:	699b      	ldr	r3, [r3, #24]
 80017a4:	f003 0304 	and.w	r3, r3, #4
 80017a8:	60bb      	str	r3, [r7, #8]
 80017aa:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80017ac:	2304      	movs	r3, #4
 80017ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b0:	2302      	movs	r3, #2
 80017b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017b4:	2303      	movs	r3, #3
 80017b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b8:	f107 0310 	add.w	r3, r7, #16
 80017bc:	4619      	mov	r1, r3
 80017be:	480f      	ldr	r0, [pc, #60]	; (80017fc <HAL_UART_MspInit+0xa0>)
 80017c0:	f001 f8fc 	bl	80029bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017c4:	2308      	movs	r3, #8
 80017c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017c8:	2300      	movs	r3, #0
 80017ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d0:	f107 0310 	add.w	r3, r7, #16
 80017d4:	4619      	mov	r1, r3
 80017d6:	4809      	ldr	r0, [pc, #36]	; (80017fc <HAL_UART_MspInit+0xa0>)
 80017d8:	f001 f8f0 	bl	80029bc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80017dc:	2200      	movs	r2, #0
 80017de:	2100      	movs	r1, #0
 80017e0:	2026      	movs	r0, #38	; 0x26
 80017e2:	f001 f802 	bl	80027ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80017e6:	2026      	movs	r0, #38	; 0x26
 80017e8:	f001 f81b 	bl	8002822 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017ec:	bf00      	nop
 80017ee:	3720      	adds	r7, #32
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	40004400 	.word	0x40004400
 80017f8:	40021000 	.word	0x40021000
 80017fc:	40010800 	.word	0x40010800

08001800 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001804:	e7fe      	b.n	8001804 <NMI_Handler+0x4>

08001806 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001806:	b480      	push	{r7}
 8001808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800180a:	e7fe      	b.n	800180a <HardFault_Handler+0x4>

0800180c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001810:	e7fe      	b.n	8001810 <MemManage_Handler+0x4>

08001812 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001812:	b480      	push	{r7}
 8001814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001816:	e7fe      	b.n	8001816 <BusFault_Handler+0x4>

08001818 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800181c:	e7fe      	b.n	800181c <UsageFault_Handler+0x4>

0800181e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800181e:	b480      	push	{r7}
 8001820:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	46bd      	mov	sp, r7
 8001826:	bc80      	pop	{r7}
 8001828:	4770      	bx	lr

0800182a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800182a:	b480      	push	{r7}
 800182c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	46bd      	mov	sp, r7
 8001832:	bc80      	pop	{r7}
 8001834:	4770      	bx	lr

08001836 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001836:	b480      	push	{r7}
 8001838:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	46bd      	mov	sp, r7
 800183e:	bc80      	pop	{r7}
 8001840:	4770      	bx	lr

08001842 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001846:	f000 f89d 	bl	8001984 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
	...

08001850 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001854:	4802      	ldr	r0, [pc, #8]	; (8001860 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001856:	f000 fcce 	bl	80021f6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20000074 	.word	0x20000074

08001864 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001868:	4802      	ldr	r0, [pc, #8]	; (8001874 <TIM2_IRQHandler+0x10>)
 800186a:	f001 ff3d 	bl	80036e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	2000009c 	.word	0x2000009c

08001878 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800187c:	4802      	ldr	r0, [pc, #8]	; (8001888 <TIM3_IRQHandler+0x10>)
 800187e:	f001 ff33 	bl	80036e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	200000e4 	.word	0x200000e4

0800188c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001890:	4802      	ldr	r0, [pc, #8]	; (800189c <USART2_IRQHandler+0x10>)
 8001892:	f002 fc0f 	bl	80040b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	2000012c 	.word	0x2000012c

080018a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018a4:	bf00      	nop
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bc80      	pop	{r7}
 80018aa:	4770      	bx	lr

080018ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018ac:	f7ff fff8 	bl	80018a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018b0:	480b      	ldr	r0, [pc, #44]	; (80018e0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80018b2:	490c      	ldr	r1, [pc, #48]	; (80018e4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80018b4:	4a0c      	ldr	r2, [pc, #48]	; (80018e8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80018b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018b8:	e002      	b.n	80018c0 <LoopCopyDataInit>

080018ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018be:	3304      	adds	r3, #4

080018c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018c4:	d3f9      	bcc.n	80018ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018c6:	4a09      	ldr	r2, [pc, #36]	; (80018ec <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80018c8:	4c09      	ldr	r4, [pc, #36]	; (80018f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018cc:	e001      	b.n	80018d2 <LoopFillZerobss>

080018ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018d0:	3204      	adds	r2, #4

080018d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018d4:	d3fb      	bcc.n	80018ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018d6:	f003 f975 	bl	8004bc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018da:	f7ff fb23 	bl	8000f24 <main>
  bx lr
 80018de:	4770      	bx	lr
  ldr r0, =_sdata
 80018e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018e4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80018e8:	08004c58 	.word	0x08004c58
  ldr r2, =_sbss
 80018ec:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80018f0:	20000384 	.word	0x20000384

080018f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018f4:	e7fe      	b.n	80018f4 <ADC1_2_IRQHandler>
	...

080018f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018fc:	4b08      	ldr	r3, [pc, #32]	; (8001920 <HAL_Init+0x28>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a07      	ldr	r2, [pc, #28]	; (8001920 <HAL_Init+0x28>)
 8001902:	f043 0310 	orr.w	r3, r3, #16
 8001906:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001908:	2003      	movs	r0, #3
 800190a:	f000 ff63 	bl	80027d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800190e:	200f      	movs	r0, #15
 8001910:	f000 f808 	bl	8001924 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001914:	f7ff fe5c 	bl	80015d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40022000 	.word	0x40022000

08001924 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800192c:	4b12      	ldr	r3, [pc, #72]	; (8001978 <HAL_InitTick+0x54>)
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	4b12      	ldr	r3, [pc, #72]	; (800197c <HAL_InitTick+0x58>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	4619      	mov	r1, r3
 8001936:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800193a:	fbb3 f3f1 	udiv	r3, r3, r1
 800193e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001942:	4618      	mov	r0, r3
 8001944:	f000 ff7b 	bl	800283e <HAL_SYSTICK_Config>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e00e      	b.n	8001970 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2b0f      	cmp	r3, #15
 8001956:	d80a      	bhi.n	800196e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001958:	2200      	movs	r2, #0
 800195a:	6879      	ldr	r1, [r7, #4]
 800195c:	f04f 30ff 	mov.w	r0, #4294967295
 8001960:	f000 ff43 	bl	80027ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001964:	4a06      	ldr	r2, [pc, #24]	; (8001980 <HAL_InitTick+0x5c>)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800196a:	2300      	movs	r3, #0
 800196c:	e000      	b.n	8001970 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
}
 8001970:	4618      	mov	r0, r3
 8001972:	3708      	adds	r7, #8
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	20000000 	.word	0x20000000
 800197c:	20000008 	.word	0x20000008
 8001980:	20000004 	.word	0x20000004

08001984 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001988:	4b05      	ldr	r3, [pc, #20]	; (80019a0 <HAL_IncTick+0x1c>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	461a      	mov	r2, r3
 800198e:	4b05      	ldr	r3, [pc, #20]	; (80019a4 <HAL_IncTick+0x20>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4413      	add	r3, r2
 8001994:	4a03      	ldr	r2, [pc, #12]	; (80019a4 <HAL_IncTick+0x20>)
 8001996:	6013      	str	r3, [r2, #0]
}
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	bc80      	pop	{r7}
 800199e:	4770      	bx	lr
 80019a0:	20000008 	.word	0x20000008
 80019a4:	20000380 	.word	0x20000380

080019a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  return uwTick;
 80019ac:	4b02      	ldr	r3, [pc, #8]	; (80019b8 <HAL_GetTick+0x10>)
 80019ae:	681b      	ldr	r3, [r3, #0]
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bc80      	pop	{r7}
 80019b6:	4770      	bx	lr
 80019b8:	20000380 	.word	0x20000380

080019bc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d101      	bne.n	80019ce <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e0ed      	b.n	8001baa <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d102      	bne.n	80019e0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f7ff fe2a 	bl	8001634 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f042 0201 	orr.w	r2, r2, #1
 80019ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019f0:	f7ff ffda 	bl	80019a8 <HAL_GetTick>
 80019f4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80019f6:	e012      	b.n	8001a1e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80019f8:	f7ff ffd6 	bl	80019a8 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b0a      	cmp	r3, #10
 8001a04:	d90b      	bls.n	8001a1e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2205      	movs	r2, #5
 8001a16:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e0c5      	b.n	8001baa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f003 0301 	and.w	r3, r3, #1
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d0e5      	beq.n	80019f8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f022 0202 	bic.w	r2, r2, #2
 8001a3a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a3c:	f7ff ffb4 	bl	80019a8 <HAL_GetTick>
 8001a40:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a42:	e012      	b.n	8001a6a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a44:	f7ff ffb0 	bl	80019a8 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b0a      	cmp	r3, #10
 8001a50:	d90b      	bls.n	8001a6a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a56:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2205      	movs	r2, #5
 8001a62:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e09f      	b.n	8001baa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f003 0302 	and.w	r3, r3, #2
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d1e5      	bne.n	8001a44 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	7e1b      	ldrb	r3, [r3, #24]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d108      	bne.n	8001a92 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	e007      	b.n	8001aa2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001aa0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	7e5b      	ldrb	r3, [r3, #25]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d108      	bne.n	8001abc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ab8:	601a      	str	r2, [r3, #0]
 8001aba:	e007      	b.n	8001acc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001aca:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	7e9b      	ldrb	r3, [r3, #26]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d108      	bne.n	8001ae6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f042 0220 	orr.w	r2, r2, #32
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	e007      	b.n	8001af6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f022 0220 	bic.w	r2, r2, #32
 8001af4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	7edb      	ldrb	r3, [r3, #27]
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d108      	bne.n	8001b10 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f022 0210 	bic.w	r2, r2, #16
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	e007      	b.n	8001b20 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f042 0210 	orr.w	r2, r2, #16
 8001b1e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	7f1b      	ldrb	r3, [r3, #28]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d108      	bne.n	8001b3a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f042 0208 	orr.w	r2, r2, #8
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	e007      	b.n	8001b4a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f022 0208 	bic.w	r2, r2, #8
 8001b48:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	7f5b      	ldrb	r3, [r3, #29]
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d108      	bne.n	8001b64 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f042 0204 	orr.w	r2, r2, #4
 8001b60:	601a      	str	r2, [r3, #0]
 8001b62:	e007      	b.n	8001b74 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f022 0204 	bic.w	r2, r2, #4
 8001b72:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	689a      	ldr	r2, [r3, #8]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	431a      	orrs	r2, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	691b      	ldr	r3, [r3, #16]
 8001b82:	431a      	orrs	r2, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	695b      	ldr	r3, [r3, #20]
 8001b88:	ea42 0103 	orr.w	r1, r2, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	1e5a      	subs	r2, r3, #1
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	430a      	orrs	r2, r1
 8001b98:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	b087      	sub	sp, #28
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
 8001bba:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bc8:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001bca:	7cfb      	ldrb	r3, [r7, #19]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d003      	beq.n	8001bd8 <HAL_CAN_ConfigFilter+0x26>
 8001bd0:	7cfb      	ldrb	r3, [r7, #19]
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	f040 80aa 	bne.w	8001d2c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001bde:	f043 0201 	orr.w	r2, r3, #1
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	695b      	ldr	r3, [r3, #20]
 8001bec:	f003 031f 	and.w	r3, r3, #31
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	43db      	mvns	r3, r3
 8001c02:	401a      	ands	r2, r3
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	69db      	ldr	r3, [r3, #28]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d123      	bne.n	8001c5a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	43db      	mvns	r3, r3
 8001c1c:	401a      	ands	r2, r3
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c30:	683a      	ldr	r2, [r7, #0]
 8001c32:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001c34:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	3248      	adds	r2, #72	; 0x48
 8001c3a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c4e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c50:	6979      	ldr	r1, [r7, #20]
 8001c52:	3348      	adds	r3, #72	; 0x48
 8001c54:	00db      	lsls	r3, r3, #3
 8001c56:	440b      	add	r3, r1
 8001c58:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	69db      	ldr	r3, [r3, #28]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d122      	bne.n	8001ca8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	431a      	orrs	r2, r3
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c7e:	683a      	ldr	r2, [r7, #0]
 8001c80:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001c82:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	3248      	adds	r2, #72	; 0x48
 8001c88:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c9c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c9e:	6979      	ldr	r1, [r7, #20]
 8001ca0:	3348      	adds	r3, #72	; 0x48
 8001ca2:	00db      	lsls	r3, r3, #3
 8001ca4:	440b      	add	r3, r1
 8001ca6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d109      	bne.n	8001cc4 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	401a      	ands	r2, r3
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001cc2:	e007      	b.n	8001cd4 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	431a      	orrs	r2, r3
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	691b      	ldr	r3, [r3, #16]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d109      	bne.n	8001cf0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	401a      	ands	r2, r3
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001cee:	e007      	b.n	8001d00 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	431a      	orrs	r2, r3
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	6a1b      	ldr	r3, [r3, #32]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d107      	bne.n	8001d18 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	431a      	orrs	r2, r3
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001d1e:	f023 0201 	bic.w	r2, r3, #1
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	e006      	b.n	8001d3a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d30:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
  }
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	371c      	adds	r7, #28
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bc80      	pop	{r7}
 8001d42:	4770      	bx	lr

08001d44 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d12e      	bne.n	8001db6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2202      	movs	r2, #2
 8001d5c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f022 0201 	bic.w	r2, r2, #1
 8001d6e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001d70:	f7ff fe1a 	bl	80019a8 <HAL_GetTick>
 8001d74:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001d76:	e012      	b.n	8001d9e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d78:	f7ff fe16 	bl	80019a8 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b0a      	cmp	r3, #10
 8001d84:	d90b      	bls.n	8001d9e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2205      	movs	r2, #5
 8001d96:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e012      	b.n	8001dc4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f003 0301 	and.w	r3, r3, #1
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d1e5      	bne.n	8001d78 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001db2:	2300      	movs	r3, #0
 8001db4:	e006      	b.n	8001dc4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dba:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
  }
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3710      	adds	r7, #16
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b089      	sub	sp, #36	; 0x24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
 8001dd8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001de0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001dea:	7ffb      	ldrb	r3, [r7, #31]
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d003      	beq.n	8001df8 <HAL_CAN_AddTxMessage+0x2c>
 8001df0:	7ffb      	ldrb	r3, [r7, #31]
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	f040 80ad 	bne.w	8001f52 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d10a      	bne.n	8001e18 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d105      	bne.n	8001e18 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	f000 8095 	beq.w	8001f42 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	0e1b      	lsrs	r3, r3, #24
 8001e1c:	f003 0303 	and.w	r3, r3, #3
 8001e20:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001e22:	2201      	movs	r2, #1
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	409a      	lsls	r2, r3
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d10d      	bne.n	8001e50 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001e3e:	68f9      	ldr	r1, [r7, #12]
 8001e40:	6809      	ldr	r1, [r1, #0]
 8001e42:	431a      	orrs	r2, r3
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	3318      	adds	r3, #24
 8001e48:	011b      	lsls	r3, r3, #4
 8001e4a:	440b      	add	r3, r1
 8001e4c:	601a      	str	r2, [r3, #0]
 8001e4e:	e00f      	b.n	8001e70 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001e5a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001e60:	68f9      	ldr	r1, [r7, #12]
 8001e62:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001e64:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	3318      	adds	r3, #24
 8001e6a:	011b      	lsls	r3, r3, #4
 8001e6c:	440b      	add	r3, r1
 8001e6e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	6819      	ldr	r1, [r3, #0]
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	691a      	ldr	r2, [r3, #16]
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	3318      	adds	r3, #24
 8001e7c:	011b      	lsls	r3, r3, #4
 8001e7e:	440b      	add	r3, r1
 8001e80:	3304      	adds	r3, #4
 8001e82:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	7d1b      	ldrb	r3, [r3, #20]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d111      	bne.n	8001eb0 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	3318      	adds	r3, #24
 8001e94:	011b      	lsls	r3, r3, #4
 8001e96:	4413      	add	r3, r2
 8001e98:	3304      	adds	r3, #4
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	68fa      	ldr	r2, [r7, #12]
 8001e9e:	6811      	ldr	r1, [r2, #0]
 8001ea0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	3318      	adds	r3, #24
 8001ea8:	011b      	lsls	r3, r3, #4
 8001eaa:	440b      	add	r3, r1
 8001eac:	3304      	adds	r3, #4
 8001eae:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	3307      	adds	r3, #7
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	061a      	lsls	r2, r3, #24
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	3306      	adds	r3, #6
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	041b      	lsls	r3, r3, #16
 8001ec0:	431a      	orrs	r2, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	3305      	adds	r3, #5
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	021b      	lsls	r3, r3, #8
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	3204      	adds	r2, #4
 8001ed0:	7812      	ldrb	r2, [r2, #0]
 8001ed2:	4610      	mov	r0, r2
 8001ed4:	68fa      	ldr	r2, [r7, #12]
 8001ed6:	6811      	ldr	r1, [r2, #0]
 8001ed8:	ea43 0200 	orr.w	r2, r3, r0
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	011b      	lsls	r3, r3, #4
 8001ee0:	440b      	add	r3, r1
 8001ee2:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001ee6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	3303      	adds	r3, #3
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	061a      	lsls	r2, r3, #24
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	3302      	adds	r3, #2
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	041b      	lsls	r3, r3, #16
 8001ef8:	431a      	orrs	r2, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	3301      	adds	r3, #1
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	021b      	lsls	r3, r3, #8
 8001f02:	4313      	orrs	r3, r2
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	7812      	ldrb	r2, [r2, #0]
 8001f08:	4610      	mov	r0, r2
 8001f0a:	68fa      	ldr	r2, [r7, #12]
 8001f0c:	6811      	ldr	r1, [r2, #0]
 8001f0e:	ea43 0200 	orr.w	r2, r3, r0
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	011b      	lsls	r3, r3, #4
 8001f16:	440b      	add	r3, r1
 8001f18:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001f1c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	3318      	adds	r3, #24
 8001f26:	011b      	lsls	r3, r3, #4
 8001f28:	4413      	add	r3, r2
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	68fa      	ldr	r2, [r7, #12]
 8001f2e:	6811      	ldr	r1, [r2, #0]
 8001f30:	f043 0201 	orr.w	r2, r3, #1
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	3318      	adds	r3, #24
 8001f38:	011b      	lsls	r3, r3, #4
 8001f3a:	440b      	add	r3, r1
 8001f3c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	e00e      	b.n	8001f60 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f46:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e006      	b.n	8001f60 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f56:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
  }
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3724      	adds	r7, #36	; 0x24
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bc80      	pop	{r7}
 8001f68:	4770      	bx	lr

08001f6a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	b087      	sub	sp, #28
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	60f8      	str	r0, [r7, #12]
 8001f72:	60b9      	str	r1, [r7, #8]
 8001f74:	607a      	str	r2, [r7, #4]
 8001f76:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f7e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001f80:	7dfb      	ldrb	r3, [r7, #23]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d003      	beq.n	8001f8e <HAL_CAN_GetRxMessage+0x24>
 8001f86:	7dfb      	ldrb	r3, [r7, #23]
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	f040 8103 	bne.w	8002194 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d10e      	bne.n	8001fb2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	f003 0303 	and.w	r3, r3, #3
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d116      	bne.n	8001fd0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e0f7      	b.n	80021a2 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	f003 0303 	and.w	r3, r3, #3
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d107      	bne.n	8001fd0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e0e8      	b.n	80021a2 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	331b      	adds	r3, #27
 8001fd8:	011b      	lsls	r3, r3, #4
 8001fda:	4413      	add	r3, r2
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0204 	and.w	r2, r3, #4
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d10c      	bne.n	8002008 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	331b      	adds	r3, #27
 8001ff6:	011b      	lsls	r3, r3, #4
 8001ff8:	4413      	add	r3, r2
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	0d5b      	lsrs	r3, r3, #21
 8001ffe:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	601a      	str	r2, [r3, #0]
 8002006:	e00b      	b.n	8002020 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	331b      	adds	r3, #27
 8002010:	011b      	lsls	r3, r3, #4
 8002012:	4413      	add	r3, r2
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	08db      	lsrs	r3, r3, #3
 8002018:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	331b      	adds	r3, #27
 8002028:	011b      	lsls	r3, r3, #4
 800202a:	4413      	add	r3, r2
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0202 	and.w	r2, r3, #2
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	331b      	adds	r3, #27
 800203e:	011b      	lsls	r3, r3, #4
 8002040:	4413      	add	r3, r2
 8002042:	3304      	adds	r3, #4
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0308 	and.w	r3, r3, #8
 800204a:	2b00      	cmp	r3, #0
 800204c:	d003      	beq.n	8002056 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2208      	movs	r2, #8
 8002052:	611a      	str	r2, [r3, #16]
 8002054:	e00b      	b.n	800206e <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	331b      	adds	r3, #27
 800205e:	011b      	lsls	r3, r3, #4
 8002060:	4413      	add	r3, r2
 8002062:	3304      	adds	r3, #4
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 020f 	and.w	r2, r3, #15
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	331b      	adds	r3, #27
 8002076:	011b      	lsls	r3, r3, #4
 8002078:	4413      	add	r3, r2
 800207a:	3304      	adds	r3, #4
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	0a1b      	lsrs	r3, r3, #8
 8002080:	b2da      	uxtb	r2, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	331b      	adds	r3, #27
 800208e:	011b      	lsls	r3, r3, #4
 8002090:	4413      	add	r3, r2
 8002092:	3304      	adds	r3, #4
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	0c1b      	lsrs	r3, r3, #16
 8002098:	b29a      	uxth	r2, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	011b      	lsls	r3, r3, #4
 80020a6:	4413      	add	r3, r2
 80020a8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	b2da      	uxtb	r2, r3
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	011b      	lsls	r3, r3, #4
 80020bc:	4413      	add	r3, r2
 80020be:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	0a1a      	lsrs	r2, r3, #8
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	3301      	adds	r3, #1
 80020ca:	b2d2      	uxtb	r2, r2
 80020cc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	011b      	lsls	r3, r3, #4
 80020d6:	4413      	add	r3, r2
 80020d8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	0c1a      	lsrs	r2, r3, #16
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	3302      	adds	r3, #2
 80020e4:	b2d2      	uxtb	r2, r2
 80020e6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	011b      	lsls	r3, r3, #4
 80020f0:	4413      	add	r3, r2
 80020f2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	0e1a      	lsrs	r2, r3, #24
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	3303      	adds	r3, #3
 80020fe:	b2d2      	uxtb	r2, r2
 8002100:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	011b      	lsls	r3, r3, #4
 800210a:	4413      	add	r3, r2
 800210c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	3304      	adds	r3, #4
 8002116:	b2d2      	uxtb	r2, r2
 8002118:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	011b      	lsls	r3, r3, #4
 8002122:	4413      	add	r3, r2
 8002124:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	0a1a      	lsrs	r2, r3, #8
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	3305      	adds	r3, #5
 8002130:	b2d2      	uxtb	r2, r2
 8002132:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	011b      	lsls	r3, r3, #4
 800213c:	4413      	add	r3, r2
 800213e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	0c1a      	lsrs	r2, r3, #16
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	3306      	adds	r3, #6
 800214a:	b2d2      	uxtb	r2, r2
 800214c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	011b      	lsls	r3, r3, #4
 8002156:	4413      	add	r3, r2
 8002158:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	0e1a      	lsrs	r2, r3, #24
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	3307      	adds	r3, #7
 8002164:	b2d2      	uxtb	r2, r2
 8002166:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d108      	bne.n	8002180 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	68da      	ldr	r2, [r3, #12]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f042 0220 	orr.w	r2, r2, #32
 800217c:	60da      	str	r2, [r3, #12]
 800217e:	e007      	b.n	8002190 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	691a      	ldr	r2, [r3, #16]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f042 0220 	orr.w	r2, r2, #32
 800218e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002190:	2300      	movs	r3, #0
 8002192:	e006      	b.n	80021a2 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002198:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
  }
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	371c      	adds	r7, #28
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bc80      	pop	{r7}
 80021aa:	4770      	bx	lr

080021ac <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b085      	sub	sp, #20
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021bc:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80021be:	7bfb      	ldrb	r3, [r7, #15]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d002      	beq.n	80021ca <HAL_CAN_ActivateNotification+0x1e>
 80021c4:	7bfb      	ldrb	r3, [r7, #15]
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d109      	bne.n	80021de <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	6959      	ldr	r1, [r3, #20]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	683a      	ldr	r2, [r7, #0]
 80021d6:	430a      	orrs	r2, r1
 80021d8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80021da:	2300      	movs	r3, #0
 80021dc:	e006      	b.n	80021ec <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
  }
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3714      	adds	r7, #20
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bc80      	pop	{r7}
 80021f4:	4770      	bx	lr

080021f6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b08a      	sub	sp, #40	; 0x28
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80021fe:	2300      	movs	r3, #0
 8002200:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	695b      	ldr	r3, [r3, #20]
 8002208:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002232:	6a3b      	ldr	r3, [r7, #32]
 8002234:	f003 0301 	and.w	r3, r3, #1
 8002238:	2b00      	cmp	r3, #0
 800223a:	d07c      	beq.n	8002336 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	2b00      	cmp	r3, #0
 8002244:	d023      	beq.n	800228e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2201      	movs	r2, #1
 800224c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d003      	beq.n	8002260 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f000 f983 	bl	8002564 <HAL_CAN_TxMailbox0CompleteCallback>
 800225e:	e016      	b.n	800228e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	f003 0304 	and.w	r3, r3, #4
 8002266:	2b00      	cmp	r3, #0
 8002268:	d004      	beq.n	8002274 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800226a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002270:	627b      	str	r3, [r7, #36]	; 0x24
 8002272:	e00c      	b.n	800228e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	f003 0308 	and.w	r3, r3, #8
 800227a:	2b00      	cmp	r3, #0
 800227c:	d004      	beq.n	8002288 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800227e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002280:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002284:	627b      	str	r3, [r7, #36]	; 0x24
 8002286:	e002      	b.n	800228e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f000 f986 	bl	800259a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002294:	2b00      	cmp	r3, #0
 8002296:	d024      	beq.n	80022e2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022a0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d003      	beq.n	80022b4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f000 f962 	bl	8002576 <HAL_CAN_TxMailbox1CompleteCallback>
 80022b2:	e016      	b.n	80022e2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d004      	beq.n	80022c8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80022be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80022c4:	627b      	str	r3, [r7, #36]	; 0x24
 80022c6:	e00c      	b.n	80022e2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d004      	beq.n	80022dc <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80022d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022d8:	627b      	str	r3, [r7, #36]	; 0x24
 80022da:	e002      	b.n	80022e2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f000 f965 	bl	80025ac <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d024      	beq.n	8002336 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80022f4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d003      	beq.n	8002308 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f000 f941 	bl	8002588 <HAL_CAN_TxMailbox2CompleteCallback>
 8002306:	e016      	b.n	8002336 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d004      	beq.n	800231c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002314:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002318:	627b      	str	r3, [r7, #36]	; 0x24
 800231a:	e00c      	b.n	8002336 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d004      	beq.n	8002330 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800232c:	627b      	str	r3, [r7, #36]	; 0x24
 800232e:	e002      	b.n	8002336 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f000 f944 	bl	80025be <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002336:	6a3b      	ldr	r3, [r7, #32]
 8002338:	f003 0308 	and.w	r3, r3, #8
 800233c:	2b00      	cmp	r3, #0
 800233e:	d00c      	beq.n	800235a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	f003 0310 	and.w	r3, r3, #16
 8002346:	2b00      	cmp	r3, #0
 8002348:	d007      	beq.n	800235a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800234a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002350:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2210      	movs	r2, #16
 8002358:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800235a:	6a3b      	ldr	r3, [r7, #32]
 800235c:	f003 0304 	and.w	r3, r3, #4
 8002360:	2b00      	cmp	r3, #0
 8002362:	d00b      	beq.n	800237c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	f003 0308 	and.w	r3, r3, #8
 800236a:	2b00      	cmp	r3, #0
 800236c:	d006      	beq.n	800237c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2208      	movs	r2, #8
 8002374:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 f92a 	bl	80025d0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800237c:	6a3b      	ldr	r3, [r7, #32]
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	2b00      	cmp	r3, #0
 8002384:	d009      	beq.n	800239a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	f003 0303 	and.w	r3, r3, #3
 8002390:	2b00      	cmp	r3, #0
 8002392:	d002      	beq.n	800239a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f7fd ff87 	bl	80002a8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800239a:	6a3b      	ldr	r3, [r7, #32]
 800239c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d00c      	beq.n	80023be <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	f003 0310 	and.w	r3, r3, #16
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d007      	beq.n	80023be <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80023ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023b4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2210      	movs	r2, #16
 80023bc:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80023be:	6a3b      	ldr	r3, [r7, #32]
 80023c0:	f003 0320 	and.w	r3, r3, #32
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d00b      	beq.n	80023e0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	f003 0308 	and.w	r3, r3, #8
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d006      	beq.n	80023e0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2208      	movs	r2, #8
 80023d8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f000 f90a 	bl	80025f4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80023e0:	6a3b      	ldr	r3, [r7, #32]
 80023e2:	f003 0310 	and.w	r3, r3, #16
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d009      	beq.n	80023fe <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	691b      	ldr	r3, [r3, #16]
 80023f0:	f003 0303 	and.w	r3, r3, #3
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d002      	beq.n	80023fe <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f000 f8f2 	bl	80025e2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80023fe:	6a3b      	ldr	r3, [r7, #32]
 8002400:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d00b      	beq.n	8002420 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	f003 0310 	and.w	r3, r3, #16
 800240e:	2b00      	cmp	r3, #0
 8002410:	d006      	beq.n	8002420 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2210      	movs	r2, #16
 8002418:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 f8f3 	bl	8002606 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002420:	6a3b      	ldr	r3, [r7, #32]
 8002422:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d00b      	beq.n	8002442 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	f003 0308 	and.w	r3, r3, #8
 8002430:	2b00      	cmp	r3, #0
 8002432:	d006      	beq.n	8002442 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2208      	movs	r2, #8
 800243a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f000 f8eb 	bl	8002618 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002442:	6a3b      	ldr	r3, [r7, #32]
 8002444:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d07b      	beq.n	8002544 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	f003 0304 	and.w	r3, r3, #4
 8002452:	2b00      	cmp	r3, #0
 8002454:	d072      	beq.n	800253c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002456:	6a3b      	ldr	r3, [r7, #32]
 8002458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800245c:	2b00      	cmp	r3, #0
 800245e:	d008      	beq.n	8002472 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002466:	2b00      	cmp	r3, #0
 8002468:	d003      	beq.n	8002472 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800246a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246c:	f043 0301 	orr.w	r3, r3, #1
 8002470:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002472:	6a3b      	ldr	r3, [r7, #32]
 8002474:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002478:	2b00      	cmp	r3, #0
 800247a:	d008      	beq.n	800248e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002482:	2b00      	cmp	r3, #0
 8002484:	d003      	beq.n	800248e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002488:	f043 0302 	orr.w	r3, r3, #2
 800248c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800248e:	6a3b      	ldr	r3, [r7, #32]
 8002490:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002494:	2b00      	cmp	r3, #0
 8002496:	d008      	beq.n	80024aa <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d003      	beq.n	80024aa <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80024a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a4:	f043 0304 	orr.w	r3, r3, #4
 80024a8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80024aa:	6a3b      	ldr	r3, [r7, #32]
 80024ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d043      	beq.n	800253c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d03e      	beq.n	800253c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80024c4:	2b60      	cmp	r3, #96	; 0x60
 80024c6:	d02b      	beq.n	8002520 <HAL_CAN_IRQHandler+0x32a>
 80024c8:	2b60      	cmp	r3, #96	; 0x60
 80024ca:	d82e      	bhi.n	800252a <HAL_CAN_IRQHandler+0x334>
 80024cc:	2b50      	cmp	r3, #80	; 0x50
 80024ce:	d022      	beq.n	8002516 <HAL_CAN_IRQHandler+0x320>
 80024d0:	2b50      	cmp	r3, #80	; 0x50
 80024d2:	d82a      	bhi.n	800252a <HAL_CAN_IRQHandler+0x334>
 80024d4:	2b40      	cmp	r3, #64	; 0x40
 80024d6:	d019      	beq.n	800250c <HAL_CAN_IRQHandler+0x316>
 80024d8:	2b40      	cmp	r3, #64	; 0x40
 80024da:	d826      	bhi.n	800252a <HAL_CAN_IRQHandler+0x334>
 80024dc:	2b30      	cmp	r3, #48	; 0x30
 80024de:	d010      	beq.n	8002502 <HAL_CAN_IRQHandler+0x30c>
 80024e0:	2b30      	cmp	r3, #48	; 0x30
 80024e2:	d822      	bhi.n	800252a <HAL_CAN_IRQHandler+0x334>
 80024e4:	2b10      	cmp	r3, #16
 80024e6:	d002      	beq.n	80024ee <HAL_CAN_IRQHandler+0x2f8>
 80024e8:	2b20      	cmp	r3, #32
 80024ea:	d005      	beq.n	80024f8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80024ec:	e01d      	b.n	800252a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80024ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f0:	f043 0308 	orr.w	r3, r3, #8
 80024f4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80024f6:	e019      	b.n	800252c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80024f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fa:	f043 0310 	orr.w	r3, r3, #16
 80024fe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002500:	e014      	b.n	800252c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002504:	f043 0320 	orr.w	r3, r3, #32
 8002508:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800250a:	e00f      	b.n	800252c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800250c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002512:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002514:	e00a      	b.n	800252c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800251c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800251e:	e005      	b.n	800252c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002522:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002526:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002528:	e000      	b.n	800252c <HAL_CAN_IRQHandler+0x336>
            break;
 800252a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	699a      	ldr	r2, [r3, #24]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800253a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2204      	movs	r2, #4
 8002542:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002546:	2b00      	cmp	r3, #0
 8002548:	d008      	beq.n	800255c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800254e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002550:	431a      	orrs	r2, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f000 f867 	bl	800262a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800255c:	bf00      	nop
 800255e:	3728      	adds	r7, #40	; 0x28
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	bc80      	pop	{r7}
 8002574:	4770      	bx	lr

08002576 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002576:	b480      	push	{r7}
 8002578:	b083      	sub	sp, #12
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800257e:	bf00      	nop
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	bc80      	pop	{r7}
 8002586:	4770      	bx	lr

08002588 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002590:	bf00      	nop
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	bc80      	pop	{r7}
 8002598:	4770      	bx	lr

0800259a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800259a:	b480      	push	{r7}
 800259c:	b083      	sub	sp, #12
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80025a2:	bf00      	nop
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bc80      	pop	{r7}
 80025aa:	4770      	bx	lr

080025ac <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80025b4:	bf00      	nop
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bc80      	pop	{r7}
 80025bc:	4770      	bx	lr

080025be <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80025be:	b480      	push	{r7}
 80025c0:	b083      	sub	sp, #12
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80025c6:	bf00      	nop
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bc80      	pop	{r7}
 80025ce:	4770      	bx	lr

080025d0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80025d8:	bf00      	nop
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	bc80      	pop	{r7}
 80025e0:	4770      	bx	lr

080025e2 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80025e2:	b480      	push	{r7}
 80025e4:	b083      	sub	sp, #12
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80025ea:	bf00      	nop
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bc80      	pop	{r7}
 80025f2:	4770      	bx	lr

080025f4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80025fc:	bf00      	nop
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	bc80      	pop	{r7}
 8002604:	4770      	bx	lr

08002606 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002606:	b480      	push	{r7}
 8002608:	b083      	sub	sp, #12
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800260e:	bf00      	nop
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	bc80      	pop	{r7}
 8002616:	4770      	bx	lr

08002618 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002620:	bf00      	nop
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	bc80      	pop	{r7}
 8002628:	4770      	bx	lr

0800262a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800262a:	b480      	push	{r7}
 800262c:	b083      	sub	sp, #12
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002632:	bf00      	nop
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	bc80      	pop	{r7}
 800263a:	4770      	bx	lr

0800263c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f003 0307 	and.w	r3, r3, #7
 800264a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800264c:	4b0c      	ldr	r3, [pc, #48]	; (8002680 <__NVIC_SetPriorityGrouping+0x44>)
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002652:	68ba      	ldr	r2, [r7, #8]
 8002654:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002658:	4013      	ands	r3, r2
 800265a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002664:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002668:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800266c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800266e:	4a04      	ldr	r2, [pc, #16]	; (8002680 <__NVIC_SetPriorityGrouping+0x44>)
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	60d3      	str	r3, [r2, #12]
}
 8002674:	bf00      	nop
 8002676:	3714      	adds	r7, #20
 8002678:	46bd      	mov	sp, r7
 800267a:	bc80      	pop	{r7}
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	e000ed00 	.word	0xe000ed00

08002684 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002688:	4b04      	ldr	r3, [pc, #16]	; (800269c <__NVIC_GetPriorityGrouping+0x18>)
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	0a1b      	lsrs	r3, r3, #8
 800268e:	f003 0307 	and.w	r3, r3, #7
}
 8002692:	4618      	mov	r0, r3
 8002694:	46bd      	mov	sp, r7
 8002696:	bc80      	pop	{r7}
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	e000ed00 	.word	0xe000ed00

080026a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	4603      	mov	r3, r0
 80026a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	db0b      	blt.n	80026ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026b2:	79fb      	ldrb	r3, [r7, #7]
 80026b4:	f003 021f 	and.w	r2, r3, #31
 80026b8:	4906      	ldr	r1, [pc, #24]	; (80026d4 <__NVIC_EnableIRQ+0x34>)
 80026ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026be:	095b      	lsrs	r3, r3, #5
 80026c0:	2001      	movs	r0, #1
 80026c2:	fa00 f202 	lsl.w	r2, r0, r2
 80026c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026ca:	bf00      	nop
 80026cc:	370c      	adds	r7, #12
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bc80      	pop	{r7}
 80026d2:	4770      	bx	lr
 80026d4:	e000e100 	.word	0xe000e100

080026d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	4603      	mov	r3, r0
 80026e0:	6039      	str	r1, [r7, #0]
 80026e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	db0a      	blt.n	8002702 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	b2da      	uxtb	r2, r3
 80026f0:	490c      	ldr	r1, [pc, #48]	; (8002724 <__NVIC_SetPriority+0x4c>)
 80026f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f6:	0112      	lsls	r2, r2, #4
 80026f8:	b2d2      	uxtb	r2, r2
 80026fa:	440b      	add	r3, r1
 80026fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002700:	e00a      	b.n	8002718 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	b2da      	uxtb	r2, r3
 8002706:	4908      	ldr	r1, [pc, #32]	; (8002728 <__NVIC_SetPriority+0x50>)
 8002708:	79fb      	ldrb	r3, [r7, #7]
 800270a:	f003 030f 	and.w	r3, r3, #15
 800270e:	3b04      	subs	r3, #4
 8002710:	0112      	lsls	r2, r2, #4
 8002712:	b2d2      	uxtb	r2, r2
 8002714:	440b      	add	r3, r1
 8002716:	761a      	strb	r2, [r3, #24]
}
 8002718:	bf00      	nop
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	bc80      	pop	{r7}
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	e000e100 	.word	0xe000e100
 8002728:	e000ed00 	.word	0xe000ed00

0800272c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800272c:	b480      	push	{r7}
 800272e:	b089      	sub	sp, #36	; 0x24
 8002730:	af00      	add	r7, sp, #0
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	60b9      	str	r1, [r7, #8]
 8002736:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f003 0307 	and.w	r3, r3, #7
 800273e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	f1c3 0307 	rsb	r3, r3, #7
 8002746:	2b04      	cmp	r3, #4
 8002748:	bf28      	it	cs
 800274a:	2304      	movcs	r3, #4
 800274c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	3304      	adds	r3, #4
 8002752:	2b06      	cmp	r3, #6
 8002754:	d902      	bls.n	800275c <NVIC_EncodePriority+0x30>
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	3b03      	subs	r3, #3
 800275a:	e000      	b.n	800275e <NVIC_EncodePriority+0x32>
 800275c:	2300      	movs	r3, #0
 800275e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002760:	f04f 32ff 	mov.w	r2, #4294967295
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	fa02 f303 	lsl.w	r3, r2, r3
 800276a:	43da      	mvns	r2, r3
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	401a      	ands	r2, r3
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002774:	f04f 31ff 	mov.w	r1, #4294967295
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	fa01 f303 	lsl.w	r3, r1, r3
 800277e:	43d9      	mvns	r1, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002784:	4313      	orrs	r3, r2
         );
}
 8002786:	4618      	mov	r0, r3
 8002788:	3724      	adds	r7, #36	; 0x24
 800278a:	46bd      	mov	sp, r7
 800278c:	bc80      	pop	{r7}
 800278e:	4770      	bx	lr

08002790 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	3b01      	subs	r3, #1
 800279c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027a0:	d301      	bcc.n	80027a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027a2:	2301      	movs	r3, #1
 80027a4:	e00f      	b.n	80027c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027a6:	4a0a      	ldr	r2, [pc, #40]	; (80027d0 <SysTick_Config+0x40>)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	3b01      	subs	r3, #1
 80027ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027ae:	210f      	movs	r1, #15
 80027b0:	f04f 30ff 	mov.w	r0, #4294967295
 80027b4:	f7ff ff90 	bl	80026d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027b8:	4b05      	ldr	r3, [pc, #20]	; (80027d0 <SysTick_Config+0x40>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027be:	4b04      	ldr	r3, [pc, #16]	; (80027d0 <SysTick_Config+0x40>)
 80027c0:	2207      	movs	r2, #7
 80027c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	e000e010 	.word	0xe000e010

080027d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f7ff ff2d 	bl	800263c <__NVIC_SetPriorityGrouping>
}
 80027e2:	bf00      	nop
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b086      	sub	sp, #24
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	4603      	mov	r3, r0
 80027f2:	60b9      	str	r1, [r7, #8]
 80027f4:	607a      	str	r2, [r7, #4]
 80027f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027f8:	2300      	movs	r3, #0
 80027fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027fc:	f7ff ff42 	bl	8002684 <__NVIC_GetPriorityGrouping>
 8002800:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	68b9      	ldr	r1, [r7, #8]
 8002806:	6978      	ldr	r0, [r7, #20]
 8002808:	f7ff ff90 	bl	800272c <NVIC_EncodePriority>
 800280c:	4602      	mov	r2, r0
 800280e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002812:	4611      	mov	r1, r2
 8002814:	4618      	mov	r0, r3
 8002816:	f7ff ff5f 	bl	80026d8 <__NVIC_SetPriority>
}
 800281a:	bf00      	nop
 800281c:	3718      	adds	r7, #24
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002822:	b580      	push	{r7, lr}
 8002824:	b082      	sub	sp, #8
 8002826:	af00      	add	r7, sp, #0
 8002828:	4603      	mov	r3, r0
 800282a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800282c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff ff35 	bl	80026a0 <__NVIC_EnableIRQ>
}
 8002836:	bf00      	nop
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	b082      	sub	sp, #8
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f7ff ffa2 	bl	8002790 <SysTick_Config>
 800284c:	4603      	mov	r3, r0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002856:	b480      	push	{r7}
 8002858:	b085      	sub	sp, #20
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800285e:	2300      	movs	r3, #0
 8002860:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d008      	beq.n	8002880 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2204      	movs	r2, #4
 8002872:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e020      	b.n	80028c2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f022 020e 	bic.w	r2, r2, #14
 800288e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f022 0201 	bic.w	r2, r2, #1
 800289e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028a8:	2101      	movs	r1, #1
 80028aa:	fa01 f202 	lsl.w	r2, r1, r2
 80028ae:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80028c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3714      	adds	r7, #20
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bc80      	pop	{r7}
 80028ca:	4770      	bx	lr

080028cc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028d4:	2300      	movs	r3, #0
 80028d6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d005      	beq.n	80028f0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2204      	movs	r2, #4
 80028e8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	73fb      	strb	r3, [r7, #15]
 80028ee:	e051      	b.n	8002994 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f022 020e 	bic.w	r2, r2, #14
 80028fe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f022 0201 	bic.w	r2, r2, #1
 800290e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a22      	ldr	r2, [pc, #136]	; (80029a0 <HAL_DMA_Abort_IT+0xd4>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d029      	beq.n	800296e <HAL_DMA_Abort_IT+0xa2>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a21      	ldr	r2, [pc, #132]	; (80029a4 <HAL_DMA_Abort_IT+0xd8>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d022      	beq.n	800296a <HAL_DMA_Abort_IT+0x9e>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a1f      	ldr	r2, [pc, #124]	; (80029a8 <HAL_DMA_Abort_IT+0xdc>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d01a      	beq.n	8002964 <HAL_DMA_Abort_IT+0x98>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a1e      	ldr	r2, [pc, #120]	; (80029ac <HAL_DMA_Abort_IT+0xe0>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d012      	beq.n	800295e <HAL_DMA_Abort_IT+0x92>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a1c      	ldr	r2, [pc, #112]	; (80029b0 <HAL_DMA_Abort_IT+0xe4>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d00a      	beq.n	8002958 <HAL_DMA_Abort_IT+0x8c>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a1b      	ldr	r2, [pc, #108]	; (80029b4 <HAL_DMA_Abort_IT+0xe8>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d102      	bne.n	8002952 <HAL_DMA_Abort_IT+0x86>
 800294c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002950:	e00e      	b.n	8002970 <HAL_DMA_Abort_IT+0xa4>
 8002952:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002956:	e00b      	b.n	8002970 <HAL_DMA_Abort_IT+0xa4>
 8002958:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800295c:	e008      	b.n	8002970 <HAL_DMA_Abort_IT+0xa4>
 800295e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002962:	e005      	b.n	8002970 <HAL_DMA_Abort_IT+0xa4>
 8002964:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002968:	e002      	b.n	8002970 <HAL_DMA_Abort_IT+0xa4>
 800296a:	2310      	movs	r3, #16
 800296c:	e000      	b.n	8002970 <HAL_DMA_Abort_IT+0xa4>
 800296e:	2301      	movs	r3, #1
 8002970:	4a11      	ldr	r2, [pc, #68]	; (80029b8 <HAL_DMA_Abort_IT+0xec>)
 8002972:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002988:	2b00      	cmp	r3, #0
 800298a:	d003      	beq.n	8002994 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	4798      	blx	r3
    } 
  }
  return status;
 8002994:	7bfb      	ldrb	r3, [r7, #15]
}
 8002996:	4618      	mov	r0, r3
 8002998:	3710      	adds	r7, #16
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	40020008 	.word	0x40020008
 80029a4:	4002001c 	.word	0x4002001c
 80029a8:	40020030 	.word	0x40020030
 80029ac:	40020044 	.word	0x40020044
 80029b0:	40020058 	.word	0x40020058
 80029b4:	4002006c 	.word	0x4002006c
 80029b8:	40020000 	.word	0x40020000

080029bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029bc:	b480      	push	{r7}
 80029be:	b08b      	sub	sp, #44	; 0x2c
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029c6:	2300      	movs	r3, #0
 80029c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80029ca:	2300      	movs	r3, #0
 80029cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029ce:	e169      	b.n	8002ca4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80029d0:	2201      	movs	r2, #1
 80029d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	69fa      	ldr	r2, [r7, #28]
 80029e0:	4013      	ands	r3, r2
 80029e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	f040 8158 	bne.w	8002c9e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	4a9a      	ldr	r2, [pc, #616]	; (8002c5c <HAL_GPIO_Init+0x2a0>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d05e      	beq.n	8002ab6 <HAL_GPIO_Init+0xfa>
 80029f8:	4a98      	ldr	r2, [pc, #608]	; (8002c5c <HAL_GPIO_Init+0x2a0>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d875      	bhi.n	8002aea <HAL_GPIO_Init+0x12e>
 80029fe:	4a98      	ldr	r2, [pc, #608]	; (8002c60 <HAL_GPIO_Init+0x2a4>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d058      	beq.n	8002ab6 <HAL_GPIO_Init+0xfa>
 8002a04:	4a96      	ldr	r2, [pc, #600]	; (8002c60 <HAL_GPIO_Init+0x2a4>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d86f      	bhi.n	8002aea <HAL_GPIO_Init+0x12e>
 8002a0a:	4a96      	ldr	r2, [pc, #600]	; (8002c64 <HAL_GPIO_Init+0x2a8>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d052      	beq.n	8002ab6 <HAL_GPIO_Init+0xfa>
 8002a10:	4a94      	ldr	r2, [pc, #592]	; (8002c64 <HAL_GPIO_Init+0x2a8>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d869      	bhi.n	8002aea <HAL_GPIO_Init+0x12e>
 8002a16:	4a94      	ldr	r2, [pc, #592]	; (8002c68 <HAL_GPIO_Init+0x2ac>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d04c      	beq.n	8002ab6 <HAL_GPIO_Init+0xfa>
 8002a1c:	4a92      	ldr	r2, [pc, #584]	; (8002c68 <HAL_GPIO_Init+0x2ac>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d863      	bhi.n	8002aea <HAL_GPIO_Init+0x12e>
 8002a22:	4a92      	ldr	r2, [pc, #584]	; (8002c6c <HAL_GPIO_Init+0x2b0>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d046      	beq.n	8002ab6 <HAL_GPIO_Init+0xfa>
 8002a28:	4a90      	ldr	r2, [pc, #576]	; (8002c6c <HAL_GPIO_Init+0x2b0>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d85d      	bhi.n	8002aea <HAL_GPIO_Init+0x12e>
 8002a2e:	2b12      	cmp	r3, #18
 8002a30:	d82a      	bhi.n	8002a88 <HAL_GPIO_Init+0xcc>
 8002a32:	2b12      	cmp	r3, #18
 8002a34:	d859      	bhi.n	8002aea <HAL_GPIO_Init+0x12e>
 8002a36:	a201      	add	r2, pc, #4	; (adr r2, 8002a3c <HAL_GPIO_Init+0x80>)
 8002a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a3c:	08002ab7 	.word	0x08002ab7
 8002a40:	08002a91 	.word	0x08002a91
 8002a44:	08002aa3 	.word	0x08002aa3
 8002a48:	08002ae5 	.word	0x08002ae5
 8002a4c:	08002aeb 	.word	0x08002aeb
 8002a50:	08002aeb 	.word	0x08002aeb
 8002a54:	08002aeb 	.word	0x08002aeb
 8002a58:	08002aeb 	.word	0x08002aeb
 8002a5c:	08002aeb 	.word	0x08002aeb
 8002a60:	08002aeb 	.word	0x08002aeb
 8002a64:	08002aeb 	.word	0x08002aeb
 8002a68:	08002aeb 	.word	0x08002aeb
 8002a6c:	08002aeb 	.word	0x08002aeb
 8002a70:	08002aeb 	.word	0x08002aeb
 8002a74:	08002aeb 	.word	0x08002aeb
 8002a78:	08002aeb 	.word	0x08002aeb
 8002a7c:	08002aeb 	.word	0x08002aeb
 8002a80:	08002a99 	.word	0x08002a99
 8002a84:	08002aad 	.word	0x08002aad
 8002a88:	4a79      	ldr	r2, [pc, #484]	; (8002c70 <HAL_GPIO_Init+0x2b4>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d013      	beq.n	8002ab6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002a8e:	e02c      	b.n	8002aea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	623b      	str	r3, [r7, #32]
          break;
 8002a96:	e029      	b.n	8002aec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	3304      	adds	r3, #4
 8002a9e:	623b      	str	r3, [r7, #32]
          break;
 8002aa0:	e024      	b.n	8002aec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	3308      	adds	r3, #8
 8002aa8:	623b      	str	r3, [r7, #32]
          break;
 8002aaa:	e01f      	b.n	8002aec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	330c      	adds	r3, #12
 8002ab2:	623b      	str	r3, [r7, #32]
          break;
 8002ab4:	e01a      	b.n	8002aec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d102      	bne.n	8002ac4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002abe:	2304      	movs	r3, #4
 8002ac0:	623b      	str	r3, [r7, #32]
          break;
 8002ac2:	e013      	b.n	8002aec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d105      	bne.n	8002ad8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002acc:	2308      	movs	r3, #8
 8002ace:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	69fa      	ldr	r2, [r7, #28]
 8002ad4:	611a      	str	r2, [r3, #16]
          break;
 8002ad6:	e009      	b.n	8002aec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ad8:	2308      	movs	r3, #8
 8002ada:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	69fa      	ldr	r2, [r7, #28]
 8002ae0:	615a      	str	r2, [r3, #20]
          break;
 8002ae2:	e003      	b.n	8002aec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	623b      	str	r3, [r7, #32]
          break;
 8002ae8:	e000      	b.n	8002aec <HAL_GPIO_Init+0x130>
          break;
 8002aea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	2bff      	cmp	r3, #255	; 0xff
 8002af0:	d801      	bhi.n	8002af6 <HAL_GPIO_Init+0x13a>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	e001      	b.n	8002afa <HAL_GPIO_Init+0x13e>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	3304      	adds	r3, #4
 8002afa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	2bff      	cmp	r3, #255	; 0xff
 8002b00:	d802      	bhi.n	8002b08 <HAL_GPIO_Init+0x14c>
 8002b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	e002      	b.n	8002b0e <HAL_GPIO_Init+0x152>
 8002b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0a:	3b08      	subs	r3, #8
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	210f      	movs	r1, #15
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	fa01 f303 	lsl.w	r3, r1, r3
 8002b1c:	43db      	mvns	r3, r3
 8002b1e:	401a      	ands	r2, r3
 8002b20:	6a39      	ldr	r1, [r7, #32]
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	fa01 f303 	lsl.w	r3, r1, r3
 8002b28:	431a      	orrs	r2, r3
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	f000 80b1 	beq.w	8002c9e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b3c:	4b4d      	ldr	r3, [pc, #308]	; (8002c74 <HAL_GPIO_Init+0x2b8>)
 8002b3e:	699b      	ldr	r3, [r3, #24]
 8002b40:	4a4c      	ldr	r2, [pc, #304]	; (8002c74 <HAL_GPIO_Init+0x2b8>)
 8002b42:	f043 0301 	orr.w	r3, r3, #1
 8002b46:	6193      	str	r3, [r2, #24]
 8002b48:	4b4a      	ldr	r3, [pc, #296]	; (8002c74 <HAL_GPIO_Init+0x2b8>)
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	f003 0301 	and.w	r3, r3, #1
 8002b50:	60bb      	str	r3, [r7, #8]
 8002b52:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002b54:	4a48      	ldr	r2, [pc, #288]	; (8002c78 <HAL_GPIO_Init+0x2bc>)
 8002b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b58:	089b      	lsrs	r3, r3, #2
 8002b5a:	3302      	adds	r3, #2
 8002b5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b60:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b64:	f003 0303 	and.w	r3, r3, #3
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	220f      	movs	r2, #15
 8002b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b70:	43db      	mvns	r3, r3
 8002b72:	68fa      	ldr	r2, [r7, #12]
 8002b74:	4013      	ands	r3, r2
 8002b76:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	4a40      	ldr	r2, [pc, #256]	; (8002c7c <HAL_GPIO_Init+0x2c0>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d013      	beq.n	8002ba8 <HAL_GPIO_Init+0x1ec>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4a3f      	ldr	r2, [pc, #252]	; (8002c80 <HAL_GPIO_Init+0x2c4>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d00d      	beq.n	8002ba4 <HAL_GPIO_Init+0x1e8>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4a3e      	ldr	r2, [pc, #248]	; (8002c84 <HAL_GPIO_Init+0x2c8>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d007      	beq.n	8002ba0 <HAL_GPIO_Init+0x1e4>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	4a3d      	ldr	r2, [pc, #244]	; (8002c88 <HAL_GPIO_Init+0x2cc>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d101      	bne.n	8002b9c <HAL_GPIO_Init+0x1e0>
 8002b98:	2303      	movs	r3, #3
 8002b9a:	e006      	b.n	8002baa <HAL_GPIO_Init+0x1ee>
 8002b9c:	2304      	movs	r3, #4
 8002b9e:	e004      	b.n	8002baa <HAL_GPIO_Init+0x1ee>
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	e002      	b.n	8002baa <HAL_GPIO_Init+0x1ee>
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e000      	b.n	8002baa <HAL_GPIO_Init+0x1ee>
 8002ba8:	2300      	movs	r3, #0
 8002baa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bac:	f002 0203 	and.w	r2, r2, #3
 8002bb0:	0092      	lsls	r2, r2, #2
 8002bb2:	4093      	lsls	r3, r2
 8002bb4:	68fa      	ldr	r2, [r7, #12]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002bba:	492f      	ldr	r1, [pc, #188]	; (8002c78 <HAL_GPIO_Init+0x2bc>)
 8002bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbe:	089b      	lsrs	r3, r3, #2
 8002bc0:	3302      	adds	r3, #2
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d006      	beq.n	8002be2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002bd4:	4b2d      	ldr	r3, [pc, #180]	; (8002c8c <HAL_GPIO_Init+0x2d0>)
 8002bd6:	689a      	ldr	r2, [r3, #8]
 8002bd8:	492c      	ldr	r1, [pc, #176]	; (8002c8c <HAL_GPIO_Init+0x2d0>)
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	608b      	str	r3, [r1, #8]
 8002be0:	e006      	b.n	8002bf0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002be2:	4b2a      	ldr	r3, [pc, #168]	; (8002c8c <HAL_GPIO_Init+0x2d0>)
 8002be4:	689a      	ldr	r2, [r3, #8]
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	43db      	mvns	r3, r3
 8002bea:	4928      	ldr	r1, [pc, #160]	; (8002c8c <HAL_GPIO_Init+0x2d0>)
 8002bec:	4013      	ands	r3, r2
 8002bee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d006      	beq.n	8002c0a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002bfc:	4b23      	ldr	r3, [pc, #140]	; (8002c8c <HAL_GPIO_Init+0x2d0>)
 8002bfe:	68da      	ldr	r2, [r3, #12]
 8002c00:	4922      	ldr	r1, [pc, #136]	; (8002c8c <HAL_GPIO_Init+0x2d0>)
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	60cb      	str	r3, [r1, #12]
 8002c08:	e006      	b.n	8002c18 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c0a:	4b20      	ldr	r3, [pc, #128]	; (8002c8c <HAL_GPIO_Init+0x2d0>)
 8002c0c:	68da      	ldr	r2, [r3, #12]
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	43db      	mvns	r3, r3
 8002c12:	491e      	ldr	r1, [pc, #120]	; (8002c8c <HAL_GPIO_Init+0x2d0>)
 8002c14:	4013      	ands	r3, r2
 8002c16:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d006      	beq.n	8002c32 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002c24:	4b19      	ldr	r3, [pc, #100]	; (8002c8c <HAL_GPIO_Init+0x2d0>)
 8002c26:	685a      	ldr	r2, [r3, #4]
 8002c28:	4918      	ldr	r1, [pc, #96]	; (8002c8c <HAL_GPIO_Init+0x2d0>)
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	604b      	str	r3, [r1, #4]
 8002c30:	e006      	b.n	8002c40 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002c32:	4b16      	ldr	r3, [pc, #88]	; (8002c8c <HAL_GPIO_Init+0x2d0>)
 8002c34:	685a      	ldr	r2, [r3, #4]
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	43db      	mvns	r3, r3
 8002c3a:	4914      	ldr	r1, [pc, #80]	; (8002c8c <HAL_GPIO_Init+0x2d0>)
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d021      	beq.n	8002c90 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002c4c:	4b0f      	ldr	r3, [pc, #60]	; (8002c8c <HAL_GPIO_Init+0x2d0>)
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	490e      	ldr	r1, [pc, #56]	; (8002c8c <HAL_GPIO_Init+0x2d0>)
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	600b      	str	r3, [r1, #0]
 8002c58:	e021      	b.n	8002c9e <HAL_GPIO_Init+0x2e2>
 8002c5a:	bf00      	nop
 8002c5c:	10320000 	.word	0x10320000
 8002c60:	10310000 	.word	0x10310000
 8002c64:	10220000 	.word	0x10220000
 8002c68:	10210000 	.word	0x10210000
 8002c6c:	10120000 	.word	0x10120000
 8002c70:	10110000 	.word	0x10110000
 8002c74:	40021000 	.word	0x40021000
 8002c78:	40010000 	.word	0x40010000
 8002c7c:	40010800 	.word	0x40010800
 8002c80:	40010c00 	.word	0x40010c00
 8002c84:	40011000 	.word	0x40011000
 8002c88:	40011400 	.word	0x40011400
 8002c8c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002c90:	4b0b      	ldr	r3, [pc, #44]	; (8002cc0 <HAL_GPIO_Init+0x304>)
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	43db      	mvns	r3, r3
 8002c98:	4909      	ldr	r1, [pc, #36]	; (8002cc0 <HAL_GPIO_Init+0x304>)
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002caa:	fa22 f303 	lsr.w	r3, r2, r3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	f47f ae8e 	bne.w	80029d0 <HAL_GPIO_Init+0x14>
  }
}
 8002cb4:	bf00      	nop
 8002cb6:	bf00      	nop
 8002cb8:	372c      	adds	r7, #44	; 0x2c
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bc80      	pop	{r7}
 8002cbe:	4770      	bx	lr
 8002cc0:	40010400 	.word	0x40010400

08002cc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	460b      	mov	r3, r1
 8002cce:	807b      	strh	r3, [r7, #2]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002cd4:	787b      	ldrb	r3, [r7, #1]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d003      	beq.n	8002ce2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cda:	887a      	ldrh	r2, [r7, #2]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002ce0:	e003      	b.n	8002cea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ce2:	887b      	ldrh	r3, [r7, #2]
 8002ce4:	041a      	lsls	r2, r3, #16
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	611a      	str	r2, [r3, #16]
}
 8002cea:	bf00      	nop
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bc80      	pop	{r7}
 8002cf2:	4770      	bx	lr

08002cf4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b085      	sub	sp, #20
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d06:	887a      	ldrh	r2, [r7, #2]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	041a      	lsls	r2, r3, #16
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	43d9      	mvns	r1, r3
 8002d12:	887b      	ldrh	r3, [r7, #2]
 8002d14:	400b      	ands	r3, r1
 8002d16:	431a      	orrs	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	611a      	str	r2, [r3, #16]
}
 8002d1c:	bf00      	nop
 8002d1e:	3714      	adds	r7, #20
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bc80      	pop	{r7}
 8002d24:	4770      	bx	lr
	...

08002d28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d101      	bne.n	8002d3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e272      	b.n	8003220 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	f000 8087 	beq.w	8002e56 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d48:	4b92      	ldr	r3, [pc, #584]	; (8002f94 <HAL_RCC_OscConfig+0x26c>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f003 030c 	and.w	r3, r3, #12
 8002d50:	2b04      	cmp	r3, #4
 8002d52:	d00c      	beq.n	8002d6e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d54:	4b8f      	ldr	r3, [pc, #572]	; (8002f94 <HAL_RCC_OscConfig+0x26c>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f003 030c 	and.w	r3, r3, #12
 8002d5c:	2b08      	cmp	r3, #8
 8002d5e:	d112      	bne.n	8002d86 <HAL_RCC_OscConfig+0x5e>
 8002d60:	4b8c      	ldr	r3, [pc, #560]	; (8002f94 <HAL_RCC_OscConfig+0x26c>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d6c:	d10b      	bne.n	8002d86 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d6e:	4b89      	ldr	r3, [pc, #548]	; (8002f94 <HAL_RCC_OscConfig+0x26c>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d06c      	beq.n	8002e54 <HAL_RCC_OscConfig+0x12c>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d168      	bne.n	8002e54 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e24c      	b.n	8003220 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d8e:	d106      	bne.n	8002d9e <HAL_RCC_OscConfig+0x76>
 8002d90:	4b80      	ldr	r3, [pc, #512]	; (8002f94 <HAL_RCC_OscConfig+0x26c>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a7f      	ldr	r2, [pc, #508]	; (8002f94 <HAL_RCC_OscConfig+0x26c>)
 8002d96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d9a:	6013      	str	r3, [r2, #0]
 8002d9c:	e02e      	b.n	8002dfc <HAL_RCC_OscConfig+0xd4>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d10c      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x98>
 8002da6:	4b7b      	ldr	r3, [pc, #492]	; (8002f94 <HAL_RCC_OscConfig+0x26c>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a7a      	ldr	r2, [pc, #488]	; (8002f94 <HAL_RCC_OscConfig+0x26c>)
 8002dac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002db0:	6013      	str	r3, [r2, #0]
 8002db2:	4b78      	ldr	r3, [pc, #480]	; (8002f94 <HAL_RCC_OscConfig+0x26c>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a77      	ldr	r2, [pc, #476]	; (8002f94 <HAL_RCC_OscConfig+0x26c>)
 8002db8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dbc:	6013      	str	r3, [r2, #0]
 8002dbe:	e01d      	b.n	8002dfc <HAL_RCC_OscConfig+0xd4>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dc8:	d10c      	bne.n	8002de4 <HAL_RCC_OscConfig+0xbc>
 8002dca:	4b72      	ldr	r3, [pc, #456]	; (8002f94 <HAL_RCC_OscConfig+0x26c>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a71      	ldr	r2, [pc, #452]	; (8002f94 <HAL_RCC_OscConfig+0x26c>)
 8002dd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dd4:	6013      	str	r3, [r2, #0]
 8002dd6:	4b6f      	ldr	r3, [pc, #444]	; (8002f94 <HAL_RCC_OscConfig+0x26c>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a6e      	ldr	r2, [pc, #440]	; (8002f94 <HAL_RCC_OscConfig+0x26c>)
 8002ddc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002de0:	6013      	str	r3, [r2, #0]
 8002de2:	e00b      	b.n	8002dfc <HAL_RCC_OscConfig+0xd4>
 8002de4:	4b6b      	ldr	r3, [pc, #428]	; (8002f94 <HAL_RCC_OscConfig+0x26c>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a6a      	ldr	r2, [pc, #424]	; (8002f94 <HAL_RCC_OscConfig+0x26c>)
 8002dea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dee:	6013      	str	r3, [r2, #0]
 8002df0:	4b68      	ldr	r3, [pc, #416]	; (8002f94 <HAL_RCC_OscConfig+0x26c>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a67      	ldr	r2, [pc, #412]	; (8002f94 <HAL_RCC_OscConfig+0x26c>)
 8002df6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dfa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d013      	beq.n	8002e2c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e04:	f7fe fdd0 	bl	80019a8 <HAL_GetTick>
 8002e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e0a:	e008      	b.n	8002e1e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e0c:	f7fe fdcc 	bl	80019a8 <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b64      	cmp	r3, #100	; 0x64
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e200      	b.n	8003220 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e1e:	4b5d      	ldr	r3, [pc, #372]	; (8002f94 <HAL_RCC_OscConfig+0x26c>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d0f0      	beq.n	8002e0c <HAL_RCC_OscConfig+0xe4>
 8002e2a:	e014      	b.n	8002e56 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e2c:	f7fe fdbc 	bl	80019a8 <HAL_GetTick>
 8002e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e32:	e008      	b.n	8002e46 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e34:	f7fe fdb8 	bl	80019a8 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b64      	cmp	r3, #100	; 0x64
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e1ec      	b.n	8003220 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e46:	4b53      	ldr	r3, [pc, #332]	; (8002f94 <HAL_RCC_OscConfig+0x26c>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1f0      	bne.n	8002e34 <HAL_RCC_OscConfig+0x10c>
 8002e52:	e000      	b.n	8002e56 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d063      	beq.n	8002f2a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e62:	4b4c      	ldr	r3, [pc, #304]	; (8002f94 <HAL_RCC_OscConfig+0x26c>)
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f003 030c 	and.w	r3, r3, #12
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d00b      	beq.n	8002e86 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002e6e:	4b49      	ldr	r3, [pc, #292]	; (8002f94 <HAL_RCC_OscConfig+0x26c>)
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f003 030c 	and.w	r3, r3, #12
 8002e76:	2b08      	cmp	r3, #8
 8002e78:	d11c      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x18c>
 8002e7a:	4b46      	ldr	r3, [pc, #280]	; (8002f94 <HAL_RCC_OscConfig+0x26c>)
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d116      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e86:	4b43      	ldr	r3, [pc, #268]	; (8002f94 <HAL_RCC_OscConfig+0x26c>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d005      	beq.n	8002e9e <HAL_RCC_OscConfig+0x176>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d001      	beq.n	8002e9e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e1c0      	b.n	8003220 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e9e:	4b3d      	ldr	r3, [pc, #244]	; (8002f94 <HAL_RCC_OscConfig+0x26c>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	4939      	ldr	r1, [pc, #228]	; (8002f94 <HAL_RCC_OscConfig+0x26c>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eb2:	e03a      	b.n	8002f2a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	691b      	ldr	r3, [r3, #16]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d020      	beq.n	8002efe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ebc:	4b36      	ldr	r3, [pc, #216]	; (8002f98 <HAL_RCC_OscConfig+0x270>)
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec2:	f7fe fd71 	bl	80019a8 <HAL_GetTick>
 8002ec6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ec8:	e008      	b.n	8002edc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eca:	f7fe fd6d 	bl	80019a8 <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d901      	bls.n	8002edc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e1a1      	b.n	8003220 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002edc:	4b2d      	ldr	r3, [pc, #180]	; (8002f94 <HAL_RCC_OscConfig+0x26c>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0302 	and.w	r3, r3, #2
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d0f0      	beq.n	8002eca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ee8:	4b2a      	ldr	r3, [pc, #168]	; (8002f94 <HAL_RCC_OscConfig+0x26c>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	695b      	ldr	r3, [r3, #20]
 8002ef4:	00db      	lsls	r3, r3, #3
 8002ef6:	4927      	ldr	r1, [pc, #156]	; (8002f94 <HAL_RCC_OscConfig+0x26c>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	600b      	str	r3, [r1, #0]
 8002efc:	e015      	b.n	8002f2a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002efe:	4b26      	ldr	r3, [pc, #152]	; (8002f98 <HAL_RCC_OscConfig+0x270>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f04:	f7fe fd50 	bl	80019a8 <HAL_GetTick>
 8002f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f0a:	e008      	b.n	8002f1e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f0c:	f7fe fd4c 	bl	80019a8 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e180      	b.n	8003220 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f1e:	4b1d      	ldr	r3, [pc, #116]	; (8002f94 <HAL_RCC_OscConfig+0x26c>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d1f0      	bne.n	8002f0c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0308 	and.w	r3, r3, #8
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d03a      	beq.n	8002fac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d019      	beq.n	8002f72 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f3e:	4b17      	ldr	r3, [pc, #92]	; (8002f9c <HAL_RCC_OscConfig+0x274>)
 8002f40:	2201      	movs	r2, #1
 8002f42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f44:	f7fe fd30 	bl	80019a8 <HAL_GetTick>
 8002f48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f4a:	e008      	b.n	8002f5e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f4c:	f7fe fd2c 	bl	80019a8 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d901      	bls.n	8002f5e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e160      	b.n	8003220 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f5e:	4b0d      	ldr	r3, [pc, #52]	; (8002f94 <HAL_RCC_OscConfig+0x26c>)
 8002f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d0f0      	beq.n	8002f4c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002f6a:	2001      	movs	r0, #1
 8002f6c:	f000 face 	bl	800350c <RCC_Delay>
 8002f70:	e01c      	b.n	8002fac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f72:	4b0a      	ldr	r3, [pc, #40]	; (8002f9c <HAL_RCC_OscConfig+0x274>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f78:	f7fe fd16 	bl	80019a8 <HAL_GetTick>
 8002f7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f7e:	e00f      	b.n	8002fa0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f80:	f7fe fd12 	bl	80019a8 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d908      	bls.n	8002fa0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e146      	b.n	8003220 <HAL_RCC_OscConfig+0x4f8>
 8002f92:	bf00      	nop
 8002f94:	40021000 	.word	0x40021000
 8002f98:	42420000 	.word	0x42420000
 8002f9c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fa0:	4b92      	ldr	r3, [pc, #584]	; (80031ec <HAL_RCC_OscConfig+0x4c4>)
 8002fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d1e9      	bne.n	8002f80 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0304 	and.w	r3, r3, #4
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	f000 80a6 	beq.w	8003106 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fbe:	4b8b      	ldr	r3, [pc, #556]	; (80031ec <HAL_RCC_OscConfig+0x4c4>)
 8002fc0:	69db      	ldr	r3, [r3, #28]
 8002fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d10d      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fca:	4b88      	ldr	r3, [pc, #544]	; (80031ec <HAL_RCC_OscConfig+0x4c4>)
 8002fcc:	69db      	ldr	r3, [r3, #28]
 8002fce:	4a87      	ldr	r2, [pc, #540]	; (80031ec <HAL_RCC_OscConfig+0x4c4>)
 8002fd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fd4:	61d3      	str	r3, [r2, #28]
 8002fd6:	4b85      	ldr	r3, [pc, #532]	; (80031ec <HAL_RCC_OscConfig+0x4c4>)
 8002fd8:	69db      	ldr	r3, [r3, #28]
 8002fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fde:	60bb      	str	r3, [r7, #8]
 8002fe0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fe6:	4b82      	ldr	r3, [pc, #520]	; (80031f0 <HAL_RCC_OscConfig+0x4c8>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d118      	bne.n	8003024 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ff2:	4b7f      	ldr	r3, [pc, #508]	; (80031f0 <HAL_RCC_OscConfig+0x4c8>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a7e      	ldr	r2, [pc, #504]	; (80031f0 <HAL_RCC_OscConfig+0x4c8>)
 8002ff8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ffc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ffe:	f7fe fcd3 	bl	80019a8 <HAL_GetTick>
 8003002:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003004:	e008      	b.n	8003018 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003006:	f7fe fccf 	bl	80019a8 <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	2b64      	cmp	r3, #100	; 0x64
 8003012:	d901      	bls.n	8003018 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e103      	b.n	8003220 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003018:	4b75      	ldr	r3, [pc, #468]	; (80031f0 <HAL_RCC_OscConfig+0x4c8>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003020:	2b00      	cmp	r3, #0
 8003022:	d0f0      	beq.n	8003006 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	2b01      	cmp	r3, #1
 800302a:	d106      	bne.n	800303a <HAL_RCC_OscConfig+0x312>
 800302c:	4b6f      	ldr	r3, [pc, #444]	; (80031ec <HAL_RCC_OscConfig+0x4c4>)
 800302e:	6a1b      	ldr	r3, [r3, #32]
 8003030:	4a6e      	ldr	r2, [pc, #440]	; (80031ec <HAL_RCC_OscConfig+0x4c4>)
 8003032:	f043 0301 	orr.w	r3, r3, #1
 8003036:	6213      	str	r3, [r2, #32]
 8003038:	e02d      	b.n	8003096 <HAL_RCC_OscConfig+0x36e>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d10c      	bne.n	800305c <HAL_RCC_OscConfig+0x334>
 8003042:	4b6a      	ldr	r3, [pc, #424]	; (80031ec <HAL_RCC_OscConfig+0x4c4>)
 8003044:	6a1b      	ldr	r3, [r3, #32]
 8003046:	4a69      	ldr	r2, [pc, #420]	; (80031ec <HAL_RCC_OscConfig+0x4c4>)
 8003048:	f023 0301 	bic.w	r3, r3, #1
 800304c:	6213      	str	r3, [r2, #32]
 800304e:	4b67      	ldr	r3, [pc, #412]	; (80031ec <HAL_RCC_OscConfig+0x4c4>)
 8003050:	6a1b      	ldr	r3, [r3, #32]
 8003052:	4a66      	ldr	r2, [pc, #408]	; (80031ec <HAL_RCC_OscConfig+0x4c4>)
 8003054:	f023 0304 	bic.w	r3, r3, #4
 8003058:	6213      	str	r3, [r2, #32]
 800305a:	e01c      	b.n	8003096 <HAL_RCC_OscConfig+0x36e>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	2b05      	cmp	r3, #5
 8003062:	d10c      	bne.n	800307e <HAL_RCC_OscConfig+0x356>
 8003064:	4b61      	ldr	r3, [pc, #388]	; (80031ec <HAL_RCC_OscConfig+0x4c4>)
 8003066:	6a1b      	ldr	r3, [r3, #32]
 8003068:	4a60      	ldr	r2, [pc, #384]	; (80031ec <HAL_RCC_OscConfig+0x4c4>)
 800306a:	f043 0304 	orr.w	r3, r3, #4
 800306e:	6213      	str	r3, [r2, #32]
 8003070:	4b5e      	ldr	r3, [pc, #376]	; (80031ec <HAL_RCC_OscConfig+0x4c4>)
 8003072:	6a1b      	ldr	r3, [r3, #32]
 8003074:	4a5d      	ldr	r2, [pc, #372]	; (80031ec <HAL_RCC_OscConfig+0x4c4>)
 8003076:	f043 0301 	orr.w	r3, r3, #1
 800307a:	6213      	str	r3, [r2, #32]
 800307c:	e00b      	b.n	8003096 <HAL_RCC_OscConfig+0x36e>
 800307e:	4b5b      	ldr	r3, [pc, #364]	; (80031ec <HAL_RCC_OscConfig+0x4c4>)
 8003080:	6a1b      	ldr	r3, [r3, #32]
 8003082:	4a5a      	ldr	r2, [pc, #360]	; (80031ec <HAL_RCC_OscConfig+0x4c4>)
 8003084:	f023 0301 	bic.w	r3, r3, #1
 8003088:	6213      	str	r3, [r2, #32]
 800308a:	4b58      	ldr	r3, [pc, #352]	; (80031ec <HAL_RCC_OscConfig+0x4c4>)
 800308c:	6a1b      	ldr	r3, [r3, #32]
 800308e:	4a57      	ldr	r2, [pc, #348]	; (80031ec <HAL_RCC_OscConfig+0x4c4>)
 8003090:	f023 0304 	bic.w	r3, r3, #4
 8003094:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d015      	beq.n	80030ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800309e:	f7fe fc83 	bl	80019a8 <HAL_GetTick>
 80030a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030a4:	e00a      	b.n	80030bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030a6:	f7fe fc7f 	bl	80019a8 <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d901      	bls.n	80030bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	e0b1      	b.n	8003220 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030bc:	4b4b      	ldr	r3, [pc, #300]	; (80031ec <HAL_RCC_OscConfig+0x4c4>)
 80030be:	6a1b      	ldr	r3, [r3, #32]
 80030c0:	f003 0302 	and.w	r3, r3, #2
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d0ee      	beq.n	80030a6 <HAL_RCC_OscConfig+0x37e>
 80030c8:	e014      	b.n	80030f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030ca:	f7fe fc6d 	bl	80019a8 <HAL_GetTick>
 80030ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030d0:	e00a      	b.n	80030e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030d2:	f7fe fc69 	bl	80019a8 <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d901      	bls.n	80030e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e09b      	b.n	8003220 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030e8:	4b40      	ldr	r3, [pc, #256]	; (80031ec <HAL_RCC_OscConfig+0x4c4>)
 80030ea:	6a1b      	ldr	r3, [r3, #32]
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d1ee      	bne.n	80030d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80030f4:	7dfb      	ldrb	r3, [r7, #23]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d105      	bne.n	8003106 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030fa:	4b3c      	ldr	r3, [pc, #240]	; (80031ec <HAL_RCC_OscConfig+0x4c4>)
 80030fc:	69db      	ldr	r3, [r3, #28]
 80030fe:	4a3b      	ldr	r2, [pc, #236]	; (80031ec <HAL_RCC_OscConfig+0x4c4>)
 8003100:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003104:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	69db      	ldr	r3, [r3, #28]
 800310a:	2b00      	cmp	r3, #0
 800310c:	f000 8087 	beq.w	800321e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003110:	4b36      	ldr	r3, [pc, #216]	; (80031ec <HAL_RCC_OscConfig+0x4c4>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f003 030c 	and.w	r3, r3, #12
 8003118:	2b08      	cmp	r3, #8
 800311a:	d061      	beq.n	80031e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	69db      	ldr	r3, [r3, #28]
 8003120:	2b02      	cmp	r3, #2
 8003122:	d146      	bne.n	80031b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003124:	4b33      	ldr	r3, [pc, #204]	; (80031f4 <HAL_RCC_OscConfig+0x4cc>)
 8003126:	2200      	movs	r2, #0
 8003128:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800312a:	f7fe fc3d 	bl	80019a8 <HAL_GetTick>
 800312e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003130:	e008      	b.n	8003144 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003132:	f7fe fc39 	bl	80019a8 <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	2b02      	cmp	r3, #2
 800313e:	d901      	bls.n	8003144 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e06d      	b.n	8003220 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003144:	4b29      	ldr	r3, [pc, #164]	; (80031ec <HAL_RCC_OscConfig+0x4c4>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d1f0      	bne.n	8003132 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a1b      	ldr	r3, [r3, #32]
 8003154:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003158:	d108      	bne.n	800316c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800315a:	4b24      	ldr	r3, [pc, #144]	; (80031ec <HAL_RCC_OscConfig+0x4c4>)
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	4921      	ldr	r1, [pc, #132]	; (80031ec <HAL_RCC_OscConfig+0x4c4>)
 8003168:	4313      	orrs	r3, r2
 800316a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800316c:	4b1f      	ldr	r3, [pc, #124]	; (80031ec <HAL_RCC_OscConfig+0x4c4>)
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a19      	ldr	r1, [r3, #32]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317c:	430b      	orrs	r3, r1
 800317e:	491b      	ldr	r1, [pc, #108]	; (80031ec <HAL_RCC_OscConfig+0x4c4>)
 8003180:	4313      	orrs	r3, r2
 8003182:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003184:	4b1b      	ldr	r3, [pc, #108]	; (80031f4 <HAL_RCC_OscConfig+0x4cc>)
 8003186:	2201      	movs	r2, #1
 8003188:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800318a:	f7fe fc0d 	bl	80019a8 <HAL_GetTick>
 800318e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003190:	e008      	b.n	80031a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003192:	f7fe fc09 	bl	80019a8 <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	2b02      	cmp	r3, #2
 800319e:	d901      	bls.n	80031a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e03d      	b.n	8003220 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031a4:	4b11      	ldr	r3, [pc, #68]	; (80031ec <HAL_RCC_OscConfig+0x4c4>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d0f0      	beq.n	8003192 <HAL_RCC_OscConfig+0x46a>
 80031b0:	e035      	b.n	800321e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031b2:	4b10      	ldr	r3, [pc, #64]	; (80031f4 <HAL_RCC_OscConfig+0x4cc>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b8:	f7fe fbf6 	bl	80019a8 <HAL_GetTick>
 80031bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031be:	e008      	b.n	80031d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031c0:	f7fe fbf2 	bl	80019a8 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e026      	b.n	8003220 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031d2:	4b06      	ldr	r3, [pc, #24]	; (80031ec <HAL_RCC_OscConfig+0x4c4>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d1f0      	bne.n	80031c0 <HAL_RCC_OscConfig+0x498>
 80031de:	e01e      	b.n	800321e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	69db      	ldr	r3, [r3, #28]
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d107      	bne.n	80031f8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e019      	b.n	8003220 <HAL_RCC_OscConfig+0x4f8>
 80031ec:	40021000 	.word	0x40021000
 80031f0:	40007000 	.word	0x40007000
 80031f4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031f8:	4b0b      	ldr	r3, [pc, #44]	; (8003228 <HAL_RCC_OscConfig+0x500>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a1b      	ldr	r3, [r3, #32]
 8003208:	429a      	cmp	r2, r3
 800320a:	d106      	bne.n	800321a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003216:	429a      	cmp	r2, r3
 8003218:	d001      	beq.n	800321e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e000      	b.n	8003220 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800321e:	2300      	movs	r3, #0
}
 8003220:	4618      	mov	r0, r3
 8003222:	3718      	adds	r7, #24
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	40021000 	.word	0x40021000

0800322c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d101      	bne.n	8003240 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e0d0      	b.n	80033e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003240:	4b6a      	ldr	r3, [pc, #424]	; (80033ec <HAL_RCC_ClockConfig+0x1c0>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0307 	and.w	r3, r3, #7
 8003248:	683a      	ldr	r2, [r7, #0]
 800324a:	429a      	cmp	r2, r3
 800324c:	d910      	bls.n	8003270 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800324e:	4b67      	ldr	r3, [pc, #412]	; (80033ec <HAL_RCC_ClockConfig+0x1c0>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f023 0207 	bic.w	r2, r3, #7
 8003256:	4965      	ldr	r1, [pc, #404]	; (80033ec <HAL_RCC_ClockConfig+0x1c0>)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	4313      	orrs	r3, r2
 800325c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800325e:	4b63      	ldr	r3, [pc, #396]	; (80033ec <HAL_RCC_ClockConfig+0x1c0>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0307 	and.w	r3, r3, #7
 8003266:	683a      	ldr	r2, [r7, #0]
 8003268:	429a      	cmp	r2, r3
 800326a:	d001      	beq.n	8003270 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e0b8      	b.n	80033e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0302 	and.w	r3, r3, #2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d020      	beq.n	80032be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0304 	and.w	r3, r3, #4
 8003284:	2b00      	cmp	r3, #0
 8003286:	d005      	beq.n	8003294 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003288:	4b59      	ldr	r3, [pc, #356]	; (80033f0 <HAL_RCC_ClockConfig+0x1c4>)
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	4a58      	ldr	r2, [pc, #352]	; (80033f0 <HAL_RCC_ClockConfig+0x1c4>)
 800328e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003292:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0308 	and.w	r3, r3, #8
 800329c:	2b00      	cmp	r3, #0
 800329e:	d005      	beq.n	80032ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032a0:	4b53      	ldr	r3, [pc, #332]	; (80033f0 <HAL_RCC_ClockConfig+0x1c4>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	4a52      	ldr	r2, [pc, #328]	; (80033f0 <HAL_RCC_ClockConfig+0x1c4>)
 80032a6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80032aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032ac:	4b50      	ldr	r3, [pc, #320]	; (80033f0 <HAL_RCC_ClockConfig+0x1c4>)
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	494d      	ldr	r1, [pc, #308]	; (80033f0 <HAL_RCC_ClockConfig+0x1c4>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d040      	beq.n	800334c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d107      	bne.n	80032e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032d2:	4b47      	ldr	r3, [pc, #284]	; (80033f0 <HAL_RCC_ClockConfig+0x1c4>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d115      	bne.n	800330a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e07f      	b.n	80033e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d107      	bne.n	80032fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032ea:	4b41      	ldr	r3, [pc, #260]	; (80033f0 <HAL_RCC_ClockConfig+0x1c4>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d109      	bne.n	800330a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e073      	b.n	80033e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032fa:	4b3d      	ldr	r3, [pc, #244]	; (80033f0 <HAL_RCC_ClockConfig+0x1c4>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	2b00      	cmp	r3, #0
 8003304:	d101      	bne.n	800330a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e06b      	b.n	80033e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800330a:	4b39      	ldr	r3, [pc, #228]	; (80033f0 <HAL_RCC_ClockConfig+0x1c4>)
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f023 0203 	bic.w	r2, r3, #3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	4936      	ldr	r1, [pc, #216]	; (80033f0 <HAL_RCC_ClockConfig+0x1c4>)
 8003318:	4313      	orrs	r3, r2
 800331a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800331c:	f7fe fb44 	bl	80019a8 <HAL_GetTick>
 8003320:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003322:	e00a      	b.n	800333a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003324:	f7fe fb40 	bl	80019a8 <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003332:	4293      	cmp	r3, r2
 8003334:	d901      	bls.n	800333a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e053      	b.n	80033e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800333a:	4b2d      	ldr	r3, [pc, #180]	; (80033f0 <HAL_RCC_ClockConfig+0x1c4>)
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f003 020c 	and.w	r2, r3, #12
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	429a      	cmp	r2, r3
 800334a:	d1eb      	bne.n	8003324 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800334c:	4b27      	ldr	r3, [pc, #156]	; (80033ec <HAL_RCC_ClockConfig+0x1c0>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0307 	and.w	r3, r3, #7
 8003354:	683a      	ldr	r2, [r7, #0]
 8003356:	429a      	cmp	r2, r3
 8003358:	d210      	bcs.n	800337c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800335a:	4b24      	ldr	r3, [pc, #144]	; (80033ec <HAL_RCC_ClockConfig+0x1c0>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f023 0207 	bic.w	r2, r3, #7
 8003362:	4922      	ldr	r1, [pc, #136]	; (80033ec <HAL_RCC_ClockConfig+0x1c0>)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	4313      	orrs	r3, r2
 8003368:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800336a:	4b20      	ldr	r3, [pc, #128]	; (80033ec <HAL_RCC_ClockConfig+0x1c0>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0307 	and.w	r3, r3, #7
 8003372:	683a      	ldr	r2, [r7, #0]
 8003374:	429a      	cmp	r2, r3
 8003376:	d001      	beq.n	800337c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e032      	b.n	80033e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0304 	and.w	r3, r3, #4
 8003384:	2b00      	cmp	r3, #0
 8003386:	d008      	beq.n	800339a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003388:	4b19      	ldr	r3, [pc, #100]	; (80033f0 <HAL_RCC_ClockConfig+0x1c4>)
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	4916      	ldr	r1, [pc, #88]	; (80033f0 <HAL_RCC_ClockConfig+0x1c4>)
 8003396:	4313      	orrs	r3, r2
 8003398:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0308 	and.w	r3, r3, #8
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d009      	beq.n	80033ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80033a6:	4b12      	ldr	r3, [pc, #72]	; (80033f0 <HAL_RCC_ClockConfig+0x1c4>)
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	00db      	lsls	r3, r3, #3
 80033b4:	490e      	ldr	r1, [pc, #56]	; (80033f0 <HAL_RCC_ClockConfig+0x1c4>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80033ba:	f000 f821 	bl	8003400 <HAL_RCC_GetSysClockFreq>
 80033be:	4602      	mov	r2, r0
 80033c0:	4b0b      	ldr	r3, [pc, #44]	; (80033f0 <HAL_RCC_ClockConfig+0x1c4>)
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	091b      	lsrs	r3, r3, #4
 80033c6:	f003 030f 	and.w	r3, r3, #15
 80033ca:	490a      	ldr	r1, [pc, #40]	; (80033f4 <HAL_RCC_ClockConfig+0x1c8>)
 80033cc:	5ccb      	ldrb	r3, [r1, r3]
 80033ce:	fa22 f303 	lsr.w	r3, r2, r3
 80033d2:	4a09      	ldr	r2, [pc, #36]	; (80033f8 <HAL_RCC_ClockConfig+0x1cc>)
 80033d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80033d6:	4b09      	ldr	r3, [pc, #36]	; (80033fc <HAL_RCC_ClockConfig+0x1d0>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4618      	mov	r0, r3
 80033dc:	f7fe faa2 	bl	8001924 <HAL_InitTick>

  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3710      	adds	r7, #16
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	40022000 	.word	0x40022000
 80033f0:	40021000 	.word	0x40021000
 80033f4:	08004c24 	.word	0x08004c24
 80033f8:	20000000 	.word	0x20000000
 80033fc:	20000004 	.word	0x20000004

08003400 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003400:	b480      	push	{r7}
 8003402:	b087      	sub	sp, #28
 8003404:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003406:	2300      	movs	r3, #0
 8003408:	60fb      	str	r3, [r7, #12]
 800340a:	2300      	movs	r3, #0
 800340c:	60bb      	str	r3, [r7, #8]
 800340e:	2300      	movs	r3, #0
 8003410:	617b      	str	r3, [r7, #20]
 8003412:	2300      	movs	r3, #0
 8003414:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003416:	2300      	movs	r3, #0
 8003418:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800341a:	4b1e      	ldr	r3, [pc, #120]	; (8003494 <HAL_RCC_GetSysClockFreq+0x94>)
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f003 030c 	and.w	r3, r3, #12
 8003426:	2b04      	cmp	r3, #4
 8003428:	d002      	beq.n	8003430 <HAL_RCC_GetSysClockFreq+0x30>
 800342a:	2b08      	cmp	r3, #8
 800342c:	d003      	beq.n	8003436 <HAL_RCC_GetSysClockFreq+0x36>
 800342e:	e027      	b.n	8003480 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003430:	4b19      	ldr	r3, [pc, #100]	; (8003498 <HAL_RCC_GetSysClockFreq+0x98>)
 8003432:	613b      	str	r3, [r7, #16]
      break;
 8003434:	e027      	b.n	8003486 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	0c9b      	lsrs	r3, r3, #18
 800343a:	f003 030f 	and.w	r3, r3, #15
 800343e:	4a17      	ldr	r2, [pc, #92]	; (800349c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003440:	5cd3      	ldrb	r3, [r2, r3]
 8003442:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d010      	beq.n	8003470 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800344e:	4b11      	ldr	r3, [pc, #68]	; (8003494 <HAL_RCC_GetSysClockFreq+0x94>)
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	0c5b      	lsrs	r3, r3, #17
 8003454:	f003 0301 	and.w	r3, r3, #1
 8003458:	4a11      	ldr	r2, [pc, #68]	; (80034a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800345a:	5cd3      	ldrb	r3, [r2, r3]
 800345c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a0d      	ldr	r2, [pc, #52]	; (8003498 <HAL_RCC_GetSysClockFreq+0x98>)
 8003462:	fb03 f202 	mul.w	r2, r3, r2
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	fbb2 f3f3 	udiv	r3, r2, r3
 800346c:	617b      	str	r3, [r7, #20]
 800346e:	e004      	b.n	800347a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	4a0c      	ldr	r2, [pc, #48]	; (80034a4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003474:	fb02 f303 	mul.w	r3, r2, r3
 8003478:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	613b      	str	r3, [r7, #16]
      break;
 800347e:	e002      	b.n	8003486 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003480:	4b05      	ldr	r3, [pc, #20]	; (8003498 <HAL_RCC_GetSysClockFreq+0x98>)
 8003482:	613b      	str	r3, [r7, #16]
      break;
 8003484:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003486:	693b      	ldr	r3, [r7, #16]
}
 8003488:	4618      	mov	r0, r3
 800348a:	371c      	adds	r7, #28
 800348c:	46bd      	mov	sp, r7
 800348e:	bc80      	pop	{r7}
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	40021000 	.word	0x40021000
 8003498:	007a1200 	.word	0x007a1200
 800349c:	08004c3c 	.word	0x08004c3c
 80034a0:	08004c4c 	.word	0x08004c4c
 80034a4:	003d0900 	.word	0x003d0900

080034a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034a8:	b480      	push	{r7}
 80034aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034ac:	4b02      	ldr	r3, [pc, #8]	; (80034b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80034ae:	681b      	ldr	r3, [r3, #0]
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bc80      	pop	{r7}
 80034b6:	4770      	bx	lr
 80034b8:	20000000 	.word	0x20000000

080034bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034c0:	f7ff fff2 	bl	80034a8 <HAL_RCC_GetHCLKFreq>
 80034c4:	4602      	mov	r2, r0
 80034c6:	4b05      	ldr	r3, [pc, #20]	; (80034dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	0a1b      	lsrs	r3, r3, #8
 80034cc:	f003 0307 	and.w	r3, r3, #7
 80034d0:	4903      	ldr	r1, [pc, #12]	; (80034e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034d2:	5ccb      	ldrb	r3, [r1, r3]
 80034d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034d8:	4618      	mov	r0, r3
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	40021000 	.word	0x40021000
 80034e0:	08004c34 	.word	0x08004c34

080034e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034e8:	f7ff ffde 	bl	80034a8 <HAL_RCC_GetHCLKFreq>
 80034ec:	4602      	mov	r2, r0
 80034ee:	4b05      	ldr	r3, [pc, #20]	; (8003504 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	0adb      	lsrs	r3, r3, #11
 80034f4:	f003 0307 	and.w	r3, r3, #7
 80034f8:	4903      	ldr	r1, [pc, #12]	; (8003508 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034fa:	5ccb      	ldrb	r3, [r1, r3]
 80034fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003500:	4618      	mov	r0, r3
 8003502:	bd80      	pop	{r7, pc}
 8003504:	40021000 	.word	0x40021000
 8003508:	08004c34 	.word	0x08004c34

0800350c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800350c:	b480      	push	{r7}
 800350e:	b085      	sub	sp, #20
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003514:	4b0a      	ldr	r3, [pc, #40]	; (8003540 <RCC_Delay+0x34>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a0a      	ldr	r2, [pc, #40]	; (8003544 <RCC_Delay+0x38>)
 800351a:	fba2 2303 	umull	r2, r3, r2, r3
 800351e:	0a5b      	lsrs	r3, r3, #9
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	fb02 f303 	mul.w	r3, r2, r3
 8003526:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003528:	bf00      	nop
  }
  while (Delay --);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	1e5a      	subs	r2, r3, #1
 800352e:	60fa      	str	r2, [r7, #12]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d1f9      	bne.n	8003528 <RCC_Delay+0x1c>
}
 8003534:	bf00      	nop
 8003536:	bf00      	nop
 8003538:	3714      	adds	r7, #20
 800353a:	46bd      	mov	sp, r7
 800353c:	bc80      	pop	{r7}
 800353e:	4770      	bx	lr
 8003540:	20000000 	.word	0x20000000
 8003544:	10624dd3 	.word	0x10624dd3

08003548 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d101      	bne.n	800355a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e041      	b.n	80035de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003560:	b2db      	uxtb	r3, r3
 8003562:	2b00      	cmp	r3, #0
 8003564:	d106      	bne.n	8003574 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f7fe f8b4 	bl	80016dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2202      	movs	r2, #2
 8003578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	3304      	adds	r3, #4
 8003584:	4619      	mov	r1, r3
 8003586:	4610      	mov	r0, r2
 8003588:	f000 faa2 	bl	8003ad0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3708      	adds	r7, #8
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
	...

080035e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d001      	beq.n	8003600 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e03a      	b.n	8003676 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2202      	movs	r2, #2
 8003604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68da      	ldr	r2, [r3, #12]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f042 0201 	orr.w	r2, r2, #1
 8003616:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a18      	ldr	r2, [pc, #96]	; (8003680 <HAL_TIM_Base_Start_IT+0x98>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d00e      	beq.n	8003640 <HAL_TIM_Base_Start_IT+0x58>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800362a:	d009      	beq.n	8003640 <HAL_TIM_Base_Start_IT+0x58>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a14      	ldr	r2, [pc, #80]	; (8003684 <HAL_TIM_Base_Start_IT+0x9c>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d004      	beq.n	8003640 <HAL_TIM_Base_Start_IT+0x58>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a13      	ldr	r2, [pc, #76]	; (8003688 <HAL_TIM_Base_Start_IT+0xa0>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d111      	bne.n	8003664 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f003 0307 	and.w	r3, r3, #7
 800364a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2b06      	cmp	r3, #6
 8003650:	d010      	beq.n	8003674 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f042 0201 	orr.w	r2, r2, #1
 8003660:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003662:	e007      	b.n	8003674 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f042 0201 	orr.w	r2, r2, #1
 8003672:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	3714      	adds	r7, #20
 800367a:	46bd      	mov	sp, r7
 800367c:	bc80      	pop	{r7}
 800367e:	4770      	bx	lr
 8003680:	40012c00 	.word	0x40012c00
 8003684:	40000400 	.word	0x40000400
 8003688:	40000800 	.word	0x40000800

0800368c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68da      	ldr	r2, [r3, #12]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f022 0201 	bic.w	r2, r2, #1
 80036a2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	6a1a      	ldr	r2, [r3, #32]
 80036aa:	f241 1311 	movw	r3, #4369	; 0x1111
 80036ae:	4013      	ands	r3, r2
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d10f      	bne.n	80036d4 <HAL_TIM_Base_Stop_IT+0x48>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	6a1a      	ldr	r2, [r3, #32]
 80036ba:	f240 4344 	movw	r3, #1092	; 0x444
 80036be:	4013      	ands	r3, r2
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d107      	bne.n	80036d4 <HAL_TIM_Base_Stop_IT+0x48>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f022 0201 	bic.w	r2, r2, #1
 80036d2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	370c      	adds	r7, #12
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bc80      	pop	{r7}
 80036e6:	4770      	bx	lr

080036e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d122      	bne.n	8003744 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	f003 0302 	and.w	r3, r3, #2
 8003708:	2b02      	cmp	r3, #2
 800370a:	d11b      	bne.n	8003744 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f06f 0202 	mvn.w	r2, #2
 8003714:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2201      	movs	r2, #1
 800371a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	f003 0303 	and.w	r3, r3, #3
 8003726:	2b00      	cmp	r3, #0
 8003728:	d003      	beq.n	8003732 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 f9b4 	bl	8003a98 <HAL_TIM_IC_CaptureCallback>
 8003730:	e005      	b.n	800373e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 f9a7 	bl	8003a86 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f000 f9b6 	bl	8003aaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	f003 0304 	and.w	r3, r3, #4
 800374e:	2b04      	cmp	r3, #4
 8003750:	d122      	bne.n	8003798 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	f003 0304 	and.w	r3, r3, #4
 800375c:	2b04      	cmp	r3, #4
 800375e:	d11b      	bne.n	8003798 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f06f 0204 	mvn.w	r2, #4
 8003768:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2202      	movs	r2, #2
 800376e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800377a:	2b00      	cmp	r3, #0
 800377c:	d003      	beq.n	8003786 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 f98a 	bl	8003a98 <HAL_TIM_IC_CaptureCallback>
 8003784:	e005      	b.n	8003792 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 f97d 	bl	8003a86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f000 f98c 	bl	8003aaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	f003 0308 	and.w	r3, r3, #8
 80037a2:	2b08      	cmp	r3, #8
 80037a4:	d122      	bne.n	80037ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	f003 0308 	and.w	r3, r3, #8
 80037b0:	2b08      	cmp	r3, #8
 80037b2:	d11b      	bne.n	80037ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f06f 0208 	mvn.w	r2, #8
 80037bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2204      	movs	r2, #4
 80037c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	69db      	ldr	r3, [r3, #28]
 80037ca:	f003 0303 	and.w	r3, r3, #3
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d003      	beq.n	80037da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 f960 	bl	8003a98 <HAL_TIM_IC_CaptureCallback>
 80037d8:	e005      	b.n	80037e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 f953 	bl	8003a86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f000 f962 	bl	8003aaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	f003 0310 	and.w	r3, r3, #16
 80037f6:	2b10      	cmp	r3, #16
 80037f8:	d122      	bne.n	8003840 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	f003 0310 	and.w	r3, r3, #16
 8003804:	2b10      	cmp	r3, #16
 8003806:	d11b      	bne.n	8003840 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f06f 0210 	mvn.w	r2, #16
 8003810:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2208      	movs	r2, #8
 8003816:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	69db      	ldr	r3, [r3, #28]
 800381e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003822:	2b00      	cmp	r3, #0
 8003824:	d003      	beq.n	800382e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 f936 	bl	8003a98 <HAL_TIM_IC_CaptureCallback>
 800382c:	e005      	b.n	800383a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 f929 	bl	8003a86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f000 f938 	bl	8003aaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	f003 0301 	and.w	r3, r3, #1
 800384a:	2b01      	cmp	r3, #1
 800384c:	d10e      	bne.n	800386c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	f003 0301 	and.w	r3, r3, #1
 8003858:	2b01      	cmp	r3, #1
 800385a:	d107      	bne.n	800386c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f06f 0201 	mvn.w	r2, #1
 8003864:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f7fd fe48 	bl	80014fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003876:	2b80      	cmp	r3, #128	; 0x80
 8003878:	d10e      	bne.n	8003898 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003884:	2b80      	cmp	r3, #128	; 0x80
 8003886:	d107      	bne.n	8003898 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003890:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 fa7b 	bl	8003d8e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038a2:	2b40      	cmp	r3, #64	; 0x40
 80038a4:	d10e      	bne.n	80038c4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038b0:	2b40      	cmp	r3, #64	; 0x40
 80038b2:	d107      	bne.n	80038c4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80038bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 f8fc 	bl	8003abc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	f003 0320 	and.w	r3, r3, #32
 80038ce:	2b20      	cmp	r3, #32
 80038d0:	d10e      	bne.n	80038f0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	f003 0320 	and.w	r3, r3, #32
 80038dc:	2b20      	cmp	r3, #32
 80038de:	d107      	bne.n	80038f0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f06f 0220 	mvn.w	r2, #32
 80038e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 fa46 	bl	8003d7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038f0:	bf00      	nop
 80038f2:	3708      	adds	r7, #8
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003902:	2300      	movs	r3, #0
 8003904:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800390c:	2b01      	cmp	r3, #1
 800390e:	d101      	bne.n	8003914 <HAL_TIM_ConfigClockSource+0x1c>
 8003910:	2302      	movs	r3, #2
 8003912:	e0b4      	b.n	8003a7e <HAL_TIM_ConfigClockSource+0x186>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2202      	movs	r2, #2
 8003920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003932:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800393a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68ba      	ldr	r2, [r7, #8]
 8003942:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800394c:	d03e      	beq.n	80039cc <HAL_TIM_ConfigClockSource+0xd4>
 800394e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003952:	f200 8087 	bhi.w	8003a64 <HAL_TIM_ConfigClockSource+0x16c>
 8003956:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800395a:	f000 8086 	beq.w	8003a6a <HAL_TIM_ConfigClockSource+0x172>
 800395e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003962:	d87f      	bhi.n	8003a64 <HAL_TIM_ConfigClockSource+0x16c>
 8003964:	2b70      	cmp	r3, #112	; 0x70
 8003966:	d01a      	beq.n	800399e <HAL_TIM_ConfigClockSource+0xa6>
 8003968:	2b70      	cmp	r3, #112	; 0x70
 800396a:	d87b      	bhi.n	8003a64 <HAL_TIM_ConfigClockSource+0x16c>
 800396c:	2b60      	cmp	r3, #96	; 0x60
 800396e:	d050      	beq.n	8003a12 <HAL_TIM_ConfigClockSource+0x11a>
 8003970:	2b60      	cmp	r3, #96	; 0x60
 8003972:	d877      	bhi.n	8003a64 <HAL_TIM_ConfigClockSource+0x16c>
 8003974:	2b50      	cmp	r3, #80	; 0x50
 8003976:	d03c      	beq.n	80039f2 <HAL_TIM_ConfigClockSource+0xfa>
 8003978:	2b50      	cmp	r3, #80	; 0x50
 800397a:	d873      	bhi.n	8003a64 <HAL_TIM_ConfigClockSource+0x16c>
 800397c:	2b40      	cmp	r3, #64	; 0x40
 800397e:	d058      	beq.n	8003a32 <HAL_TIM_ConfigClockSource+0x13a>
 8003980:	2b40      	cmp	r3, #64	; 0x40
 8003982:	d86f      	bhi.n	8003a64 <HAL_TIM_ConfigClockSource+0x16c>
 8003984:	2b30      	cmp	r3, #48	; 0x30
 8003986:	d064      	beq.n	8003a52 <HAL_TIM_ConfigClockSource+0x15a>
 8003988:	2b30      	cmp	r3, #48	; 0x30
 800398a:	d86b      	bhi.n	8003a64 <HAL_TIM_ConfigClockSource+0x16c>
 800398c:	2b20      	cmp	r3, #32
 800398e:	d060      	beq.n	8003a52 <HAL_TIM_ConfigClockSource+0x15a>
 8003990:	2b20      	cmp	r3, #32
 8003992:	d867      	bhi.n	8003a64 <HAL_TIM_ConfigClockSource+0x16c>
 8003994:	2b00      	cmp	r3, #0
 8003996:	d05c      	beq.n	8003a52 <HAL_TIM_ConfigClockSource+0x15a>
 8003998:	2b10      	cmp	r3, #16
 800399a:	d05a      	beq.n	8003a52 <HAL_TIM_ConfigClockSource+0x15a>
 800399c:	e062      	b.n	8003a64 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80039ae:	f000 f968 	bl	8003c82 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80039c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68ba      	ldr	r2, [r7, #8]
 80039c8:	609a      	str	r2, [r3, #8]
      break;
 80039ca:	e04f      	b.n	8003a6c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80039dc:	f000 f951 	bl	8003c82 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	689a      	ldr	r2, [r3, #8]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039ee:	609a      	str	r2, [r3, #8]
      break;
 80039f0:	e03c      	b.n	8003a6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039fe:	461a      	mov	r2, r3
 8003a00:	f000 f8c8 	bl	8003b94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2150      	movs	r1, #80	; 0x50
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f000 f91f 	bl	8003c4e <TIM_ITRx_SetConfig>
      break;
 8003a10:	e02c      	b.n	8003a6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a1e:	461a      	mov	r2, r3
 8003a20:	f000 f8e6 	bl	8003bf0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2160      	movs	r1, #96	; 0x60
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f000 f90f 	bl	8003c4e <TIM_ITRx_SetConfig>
      break;
 8003a30:	e01c      	b.n	8003a6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a3e:	461a      	mov	r2, r3
 8003a40:	f000 f8a8 	bl	8003b94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2140      	movs	r1, #64	; 0x40
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f000 f8ff 	bl	8003c4e <TIM_ITRx_SetConfig>
      break;
 8003a50:	e00c      	b.n	8003a6c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	4610      	mov	r0, r2
 8003a5e:	f000 f8f6 	bl	8003c4e <TIM_ITRx_SetConfig>
      break;
 8003a62:	e003      	b.n	8003a6c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	73fb      	strb	r3, [r7, #15]
      break;
 8003a68:	e000      	b.n	8003a6c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003a6a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3710      	adds	r7, #16
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}

08003a86 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a86:	b480      	push	{r7}
 8003a88:	b083      	sub	sp, #12
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a8e:	bf00      	nop
 8003a90:	370c      	adds	r7, #12
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bc80      	pop	{r7}
 8003a96:	4770      	bx	lr

08003a98 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003aa0:	bf00      	nop
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bc80      	pop	{r7}
 8003aa8:	4770      	bx	lr

08003aaa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003aaa:	b480      	push	{r7}
 8003aac:	b083      	sub	sp, #12
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ab2:	bf00      	nop
 8003ab4:	370c      	adds	r7, #12
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bc80      	pop	{r7}
 8003aba:	4770      	bx	lr

08003abc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ac4:	bf00      	nop
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bc80      	pop	{r7}
 8003acc:	4770      	bx	lr
	...

08003ad0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b085      	sub	sp, #20
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4a29      	ldr	r2, [pc, #164]	; (8003b88 <TIM_Base_SetConfig+0xb8>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d00b      	beq.n	8003b00 <TIM_Base_SetConfig+0x30>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aee:	d007      	beq.n	8003b00 <TIM_Base_SetConfig+0x30>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	4a26      	ldr	r2, [pc, #152]	; (8003b8c <TIM_Base_SetConfig+0xbc>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d003      	beq.n	8003b00 <TIM_Base_SetConfig+0x30>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4a25      	ldr	r2, [pc, #148]	; (8003b90 <TIM_Base_SetConfig+0xc0>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d108      	bne.n	8003b12 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	68fa      	ldr	r2, [r7, #12]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a1c      	ldr	r2, [pc, #112]	; (8003b88 <TIM_Base_SetConfig+0xb8>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d00b      	beq.n	8003b32 <TIM_Base_SetConfig+0x62>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b20:	d007      	beq.n	8003b32 <TIM_Base_SetConfig+0x62>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a19      	ldr	r2, [pc, #100]	; (8003b8c <TIM_Base_SetConfig+0xbc>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d003      	beq.n	8003b32 <TIM_Base_SetConfig+0x62>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a18      	ldr	r2, [pc, #96]	; (8003b90 <TIM_Base_SetConfig+0xc0>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d108      	bne.n	8003b44 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	68fa      	ldr	r2, [r7, #12]
 8003b56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	689a      	ldr	r2, [r3, #8]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4a07      	ldr	r2, [pc, #28]	; (8003b88 <TIM_Base_SetConfig+0xb8>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d103      	bne.n	8003b78 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	691a      	ldr	r2, [r3, #16]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	615a      	str	r2, [r3, #20]
}
 8003b7e:	bf00      	nop
 8003b80:	3714      	adds	r7, #20
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bc80      	pop	{r7}
 8003b86:	4770      	bx	lr
 8003b88:	40012c00 	.word	0x40012c00
 8003b8c:	40000400 	.word	0x40000400
 8003b90:	40000800 	.word	0x40000800

08003b94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b087      	sub	sp, #28
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6a1b      	ldr	r3, [r3, #32]
 8003ba4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6a1b      	ldr	r3, [r3, #32]
 8003baa:	f023 0201 	bic.w	r2, r3, #1
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	011b      	lsls	r3, r3, #4
 8003bc4:	693a      	ldr	r2, [r7, #16]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	f023 030a 	bic.w	r3, r3, #10
 8003bd0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003bd2:	697a      	ldr	r2, [r7, #20]
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	693a      	ldr	r2, [r7, #16]
 8003bde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	697a      	ldr	r2, [r7, #20]
 8003be4:	621a      	str	r2, [r3, #32]
}
 8003be6:	bf00      	nop
 8003be8:	371c      	adds	r7, #28
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bc80      	pop	{r7}
 8003bee:	4770      	bx	lr

08003bf0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b087      	sub	sp, #28
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6a1b      	ldr	r3, [r3, #32]
 8003c00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6a1b      	ldr	r3, [r3, #32]
 8003c06:	f023 0210 	bic.w	r2, r3, #16
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	699b      	ldr	r3, [r3, #24]
 8003c12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	031b      	lsls	r3, r3, #12
 8003c20:	693a      	ldr	r2, [r7, #16]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c2c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	011b      	lsls	r3, r3, #4
 8003c32:	697a      	ldr	r2, [r7, #20]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	693a      	ldr	r2, [r7, #16]
 8003c3c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	697a      	ldr	r2, [r7, #20]
 8003c42:	621a      	str	r2, [r3, #32]
}
 8003c44:	bf00      	nop
 8003c46:	371c      	adds	r7, #28
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bc80      	pop	{r7}
 8003c4c:	4770      	bx	lr

08003c4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c4e:	b480      	push	{r7}
 8003c50:	b085      	sub	sp, #20
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
 8003c56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c66:	683a      	ldr	r2, [r7, #0]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	f043 0307 	orr.w	r3, r3, #7
 8003c70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	68fa      	ldr	r2, [r7, #12]
 8003c76:	609a      	str	r2, [r3, #8]
}
 8003c78:	bf00      	nop
 8003c7a:	3714      	adds	r7, #20
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bc80      	pop	{r7}
 8003c80:	4770      	bx	lr

08003c82 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c82:	b480      	push	{r7}
 8003c84:	b087      	sub	sp, #28
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	60f8      	str	r0, [r7, #12]
 8003c8a:	60b9      	str	r1, [r7, #8]
 8003c8c:	607a      	str	r2, [r7, #4]
 8003c8e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c9c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	021a      	lsls	r2, r3, #8
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	431a      	orrs	r2, r3
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	697a      	ldr	r2, [r7, #20]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	697a      	ldr	r2, [r7, #20]
 8003cb4:	609a      	str	r2, [r3, #8]
}
 8003cb6:	bf00      	nop
 8003cb8:	371c      	adds	r7, #28
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bc80      	pop	{r7}
 8003cbe:	4770      	bx	lr

08003cc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b085      	sub	sp, #20
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d101      	bne.n	8003cd8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003cd4:	2302      	movs	r3, #2
 8003cd6:	e046      	b.n	8003d66 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2202      	movs	r2, #2
 8003ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cfe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68fa      	ldr	r2, [r7, #12]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a16      	ldr	r2, [pc, #88]	; (8003d70 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d00e      	beq.n	8003d3a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d24:	d009      	beq.n	8003d3a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a12      	ldr	r2, [pc, #72]	; (8003d74 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d004      	beq.n	8003d3a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a10      	ldr	r2, [pc, #64]	; (8003d78 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d10c      	bne.n	8003d54 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	68ba      	ldr	r2, [r7, #8]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68ba      	ldr	r2, [r7, #8]
 8003d52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3714      	adds	r7, #20
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bc80      	pop	{r7}
 8003d6e:	4770      	bx	lr
 8003d70:	40012c00 	.word	0x40012c00
 8003d74:	40000400 	.word	0x40000400
 8003d78:	40000800 	.word	0x40000800

08003d7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d84:	bf00      	nop
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bc80      	pop	{r7}
 8003d8c:	4770      	bx	lr

08003d8e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d8e:	b480      	push	{r7}
 8003d90:	b083      	sub	sp, #12
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d96:	bf00      	nop
 8003d98:	370c      	adds	r7, #12
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bc80      	pop	{r7}
 8003d9e:	4770      	bx	lr

08003da0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d101      	bne.n	8003db2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e042      	b.n	8003e38 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d106      	bne.n	8003dcc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f7fd fcc8 	bl	800175c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2224      	movs	r2, #36	; 0x24
 8003dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	68da      	ldr	r2, [r3, #12]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003de2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f000 fe57 	bl	8004a98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	691a      	ldr	r2, [r3, #16]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003df8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	695a      	ldr	r2, [r3, #20]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	68da      	ldr	r2, [r3, #12]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2220      	movs	r2, #32
 8003e24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2220      	movs	r2, #32
 8003e2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003e36:	2300      	movs	r3, #0
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3708      	adds	r7, #8
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b08a      	sub	sp, #40	; 0x28
 8003e44:	af02      	add	r7, sp, #8
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	60b9      	str	r1, [r7, #8]
 8003e4a:	603b      	str	r3, [r7, #0]
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e50:	2300      	movs	r3, #0
 8003e52:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	2b20      	cmp	r3, #32
 8003e5e:	d16d      	bne.n	8003f3c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d002      	beq.n	8003e6c <HAL_UART_Transmit+0x2c>
 8003e66:	88fb      	ldrh	r3, [r7, #6]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d101      	bne.n	8003e70 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e066      	b.n	8003f3e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2221      	movs	r2, #33	; 0x21
 8003e7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e7e:	f7fd fd93 	bl	80019a8 <HAL_GetTick>
 8003e82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	88fa      	ldrh	r2, [r7, #6]
 8003e88:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	88fa      	ldrh	r2, [r7, #6]
 8003e8e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e98:	d108      	bne.n	8003eac <HAL_UART_Transmit+0x6c>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d104      	bne.n	8003eac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	61bb      	str	r3, [r7, #24]
 8003eaa:	e003      	b.n	8003eb4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003eb4:	e02a      	b.n	8003f0c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	9300      	str	r3, [sp, #0]
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	2180      	movs	r1, #128	; 0x80
 8003ec0:	68f8      	ldr	r0, [r7, #12]
 8003ec2:	f000 fba6 	bl	8004612 <UART_WaitOnFlagUntilTimeout>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d001      	beq.n	8003ed0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e036      	b.n	8003f3e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d10b      	bne.n	8003eee <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	881b      	ldrh	r3, [r3, #0]
 8003eda:	461a      	mov	r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ee4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	3302      	adds	r3, #2
 8003eea:	61bb      	str	r3, [r7, #24]
 8003eec:	e007      	b.n	8003efe <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	781a      	ldrb	r2, [r3, #0]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	3301      	adds	r3, #1
 8003efc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	3b01      	subs	r3, #1
 8003f06:	b29a      	uxth	r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1cf      	bne.n	8003eb6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	9300      	str	r3, [sp, #0]
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	2140      	movs	r1, #64	; 0x40
 8003f20:	68f8      	ldr	r0, [r7, #12]
 8003f22:	f000 fb76 	bl	8004612 <UART_WaitOnFlagUntilTimeout>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d001      	beq.n	8003f30 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e006      	b.n	8003f3e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2220      	movs	r2, #32
 8003f34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	e000      	b.n	8003f3e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003f3c:	2302      	movs	r3, #2
  }
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3720      	adds	r7, #32
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}

08003f46 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f46:	b580      	push	{r7, lr}
 8003f48:	b08a      	sub	sp, #40	; 0x28
 8003f4a:	af02      	add	r7, sp, #8
 8003f4c:	60f8      	str	r0, [r7, #12]
 8003f4e:	60b9      	str	r1, [r7, #8]
 8003f50:	603b      	str	r3, [r7, #0]
 8003f52:	4613      	mov	r3, r2
 8003f54:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f56:	2300      	movs	r3, #0
 8003f58:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	2b20      	cmp	r3, #32
 8003f64:	d17c      	bne.n	8004060 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d002      	beq.n	8003f72 <HAL_UART_Receive+0x2c>
 8003f6c:	88fb      	ldrh	r3, [r7, #6]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d101      	bne.n	8003f76 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e075      	b.n	8004062 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2222      	movs	r2, #34	; 0x22
 8003f80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2200      	movs	r2, #0
 8003f88:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f8a:	f7fd fd0d 	bl	80019a8 <HAL_GetTick>
 8003f8e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	88fa      	ldrh	r2, [r7, #6]
 8003f94:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	88fa      	ldrh	r2, [r7, #6]
 8003f9a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fa4:	d108      	bne.n	8003fb8 <HAL_UART_Receive+0x72>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d104      	bne.n	8003fb8 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	61bb      	str	r3, [r7, #24]
 8003fb6:	e003      	b.n	8003fc0 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003fc0:	e043      	b.n	800404a <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	9300      	str	r3, [sp, #0]
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	2120      	movs	r1, #32
 8003fcc:	68f8      	ldr	r0, [r7, #12]
 8003fce:	f000 fb20 	bl	8004612 <UART_WaitOnFlagUntilTimeout>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d001      	beq.n	8003fdc <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e042      	b.n	8004062 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d10c      	bne.n	8003ffc <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fee:	b29a      	uxth	r2, r3
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	3302      	adds	r3, #2
 8003ff8:	61bb      	str	r3, [r7, #24]
 8003ffa:	e01f      	b.n	800403c <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004004:	d007      	beq.n	8004016 <HAL_UART_Receive+0xd0>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d10a      	bne.n	8004024 <HAL_UART_Receive+0xde>
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d106      	bne.n	8004024 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	b2da      	uxtb	r2, r3
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	701a      	strb	r2, [r3, #0]
 8004022:	e008      	b.n	8004036 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	b2db      	uxtb	r3, r3
 800402c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004030:	b2da      	uxtb	r2, r3
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	3301      	adds	r3, #1
 800403a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004040:	b29b      	uxth	r3, r3
 8004042:	3b01      	subs	r3, #1
 8004044:	b29a      	uxth	r2, r3
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800404e:	b29b      	uxth	r3, r3
 8004050:	2b00      	cmp	r3, #0
 8004052:	d1b6      	bne.n	8003fc2 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2220      	movs	r2, #32
 8004058:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 800405c:	2300      	movs	r3, #0
 800405e:	e000      	b.n	8004062 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004060:	2302      	movs	r3, #2
  }
}
 8004062:	4618      	mov	r0, r3
 8004064:	3720      	adds	r7, #32
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}

0800406a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800406a:	b580      	push	{r7, lr}
 800406c:	b084      	sub	sp, #16
 800406e:	af00      	add	r7, sp, #0
 8004070:	60f8      	str	r0, [r7, #12]
 8004072:	60b9      	str	r1, [r7, #8]
 8004074:	4613      	mov	r3, r2
 8004076:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800407e:	b2db      	uxtb	r3, r3
 8004080:	2b20      	cmp	r3, #32
 8004082:	d112      	bne.n	80040aa <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d002      	beq.n	8004090 <HAL_UART_Receive_IT+0x26>
 800408a:	88fb      	ldrh	r3, [r7, #6]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d101      	bne.n	8004094 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e00b      	b.n	80040ac <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2200      	movs	r2, #0
 8004098:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800409a:	88fb      	ldrh	r3, [r7, #6]
 800409c:	461a      	mov	r2, r3
 800409e:	68b9      	ldr	r1, [r7, #8]
 80040a0:	68f8      	ldr	r0, [r7, #12]
 80040a2:	f000 fb24 	bl	80046ee <UART_Start_Receive_IT>
 80040a6:	4603      	mov	r3, r0
 80040a8:	e000      	b.n	80040ac <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80040aa:	2302      	movs	r3, #2
  }
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3710      	adds	r7, #16
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b0ba      	sub	sp, #232	; 0xe8
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80040da:	2300      	movs	r3, #0
 80040dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80040e0:	2300      	movs	r3, #0
 80040e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80040e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040ea:	f003 030f 	and.w	r3, r3, #15
 80040ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80040f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d10f      	bne.n	800411a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80040fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040fe:	f003 0320 	and.w	r3, r3, #32
 8004102:	2b00      	cmp	r3, #0
 8004104:	d009      	beq.n	800411a <HAL_UART_IRQHandler+0x66>
 8004106:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800410a:	f003 0320 	and.w	r3, r3, #32
 800410e:	2b00      	cmp	r3, #0
 8004110:	d003      	beq.n	800411a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 fc01 	bl	800491a <UART_Receive_IT>
      return;
 8004118:	e25b      	b.n	80045d2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800411a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800411e:	2b00      	cmp	r3, #0
 8004120:	f000 80de 	beq.w	80042e0 <HAL_UART_IRQHandler+0x22c>
 8004124:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004128:	f003 0301 	and.w	r3, r3, #1
 800412c:	2b00      	cmp	r3, #0
 800412e:	d106      	bne.n	800413e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004130:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004134:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004138:	2b00      	cmp	r3, #0
 800413a:	f000 80d1 	beq.w	80042e0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800413e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004142:	f003 0301 	and.w	r3, r3, #1
 8004146:	2b00      	cmp	r3, #0
 8004148:	d00b      	beq.n	8004162 <HAL_UART_IRQHandler+0xae>
 800414a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800414e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004152:	2b00      	cmp	r3, #0
 8004154:	d005      	beq.n	8004162 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800415a:	f043 0201 	orr.w	r2, r3, #1
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004166:	f003 0304 	and.w	r3, r3, #4
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00b      	beq.n	8004186 <HAL_UART_IRQHandler+0xd2>
 800416e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004172:	f003 0301 	and.w	r3, r3, #1
 8004176:	2b00      	cmp	r3, #0
 8004178:	d005      	beq.n	8004186 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800417e:	f043 0202 	orr.w	r2, r3, #2
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004186:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800418a:	f003 0302 	and.w	r3, r3, #2
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00b      	beq.n	80041aa <HAL_UART_IRQHandler+0xf6>
 8004192:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004196:	f003 0301 	and.w	r3, r3, #1
 800419a:	2b00      	cmp	r3, #0
 800419c:	d005      	beq.n	80041aa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041a2:	f043 0204 	orr.w	r2, r3, #4
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80041aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041ae:	f003 0308 	and.w	r3, r3, #8
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d011      	beq.n	80041da <HAL_UART_IRQHandler+0x126>
 80041b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041ba:	f003 0320 	and.w	r3, r3, #32
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d105      	bne.n	80041ce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80041c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041c6:	f003 0301 	and.w	r3, r3, #1
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d005      	beq.n	80041da <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041d2:	f043 0208 	orr.w	r2, r3, #8
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041de:	2b00      	cmp	r3, #0
 80041e0:	f000 81f2 	beq.w	80045c8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80041e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041e8:	f003 0320 	and.w	r3, r3, #32
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d008      	beq.n	8004202 <HAL_UART_IRQHandler+0x14e>
 80041f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041f4:	f003 0320 	and.w	r3, r3, #32
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d002      	beq.n	8004202 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f000 fb8c 	bl	800491a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	695b      	ldr	r3, [r3, #20]
 8004208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800420c:	2b00      	cmp	r3, #0
 800420e:	bf14      	ite	ne
 8004210:	2301      	movne	r3, #1
 8004212:	2300      	moveq	r3, #0
 8004214:	b2db      	uxtb	r3, r3
 8004216:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800421e:	f003 0308 	and.w	r3, r3, #8
 8004222:	2b00      	cmp	r3, #0
 8004224:	d103      	bne.n	800422e <HAL_UART_IRQHandler+0x17a>
 8004226:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800422a:	2b00      	cmp	r3, #0
 800422c:	d04f      	beq.n	80042ce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 fa96 	bl	8004760 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	695b      	ldr	r3, [r3, #20]
 800423a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800423e:	2b00      	cmp	r3, #0
 8004240:	d041      	beq.n	80042c6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	3314      	adds	r3, #20
 8004248:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800424c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004250:	e853 3f00 	ldrex	r3, [r3]
 8004254:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004258:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800425c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004260:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	3314      	adds	r3, #20
 800426a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800426e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004272:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004276:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800427a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800427e:	e841 2300 	strex	r3, r2, [r1]
 8004282:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004286:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1d9      	bne.n	8004242 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004292:	2b00      	cmp	r3, #0
 8004294:	d013      	beq.n	80042be <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800429a:	4a7e      	ldr	r2, [pc, #504]	; (8004494 <HAL_UART_IRQHandler+0x3e0>)
 800429c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042a2:	4618      	mov	r0, r3
 80042a4:	f7fe fb12 	bl	80028cc <HAL_DMA_Abort_IT>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d016      	beq.n	80042dc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80042b8:	4610      	mov	r0, r2
 80042ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042bc:	e00e      	b.n	80042dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f000 f993 	bl	80045ea <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042c4:	e00a      	b.n	80042dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 f98f 	bl	80045ea <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042cc:	e006      	b.n	80042dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 f98b 	bl	80045ea <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80042da:	e175      	b.n	80045c8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042dc:	bf00      	nop
    return;
 80042de:	e173      	b.n	80045c8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	f040 814f 	bne.w	8004588 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80042ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042ee:	f003 0310 	and.w	r3, r3, #16
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	f000 8148 	beq.w	8004588 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80042f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042fc:	f003 0310 	and.w	r3, r3, #16
 8004300:	2b00      	cmp	r3, #0
 8004302:	f000 8141 	beq.w	8004588 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004306:	2300      	movs	r3, #0
 8004308:	60bb      	str	r3, [r7, #8]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	60bb      	str	r3, [r7, #8]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	60bb      	str	r3, [r7, #8]
 800431a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004326:	2b00      	cmp	r3, #0
 8004328:	f000 80b6 	beq.w	8004498 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004338:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800433c:	2b00      	cmp	r3, #0
 800433e:	f000 8145 	beq.w	80045cc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004346:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800434a:	429a      	cmp	r2, r3
 800434c:	f080 813e 	bcs.w	80045cc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004356:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	2b20      	cmp	r3, #32
 8004360:	f000 8088 	beq.w	8004474 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	330c      	adds	r3, #12
 800436a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800436e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004372:	e853 3f00 	ldrex	r3, [r3]
 8004376:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800437a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800437e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004382:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	330c      	adds	r3, #12
 800438c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004390:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004394:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004398:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800439c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80043a0:	e841 2300 	strex	r3, r2, [r1]
 80043a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80043a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d1d9      	bne.n	8004364 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	3314      	adds	r3, #20
 80043b6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043ba:	e853 3f00 	ldrex	r3, [r3]
 80043be:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80043c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043c2:	f023 0301 	bic.w	r3, r3, #1
 80043c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	3314      	adds	r3, #20
 80043d0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80043d4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80043d8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043da:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80043dc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80043e0:	e841 2300 	strex	r3, r2, [r1]
 80043e4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80043e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d1e1      	bne.n	80043b0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	3314      	adds	r3, #20
 80043f2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043f6:	e853 3f00 	ldrex	r3, [r3]
 80043fa:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80043fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004402:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	3314      	adds	r3, #20
 800440c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004410:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004412:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004414:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004416:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004418:	e841 2300 	strex	r3, r2, [r1]
 800441c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800441e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004420:	2b00      	cmp	r3, #0
 8004422:	d1e3      	bne.n	80043ec <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2220      	movs	r2, #32
 8004428:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	330c      	adds	r3, #12
 8004438:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800443a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800443c:	e853 3f00 	ldrex	r3, [r3]
 8004440:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004442:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004444:	f023 0310 	bic.w	r3, r3, #16
 8004448:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	330c      	adds	r3, #12
 8004452:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004456:	65ba      	str	r2, [r7, #88]	; 0x58
 8004458:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800445a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800445c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800445e:	e841 2300 	strex	r3, r2, [r1]
 8004462:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004464:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004466:	2b00      	cmp	r3, #0
 8004468:	d1e3      	bne.n	8004432 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800446e:	4618      	mov	r0, r3
 8004470:	f7fe f9f1 	bl	8002856 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2202      	movs	r2, #2
 8004478:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004482:	b29b      	uxth	r3, r3
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	b29b      	uxth	r3, r3
 8004488:	4619      	mov	r1, r3
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 f8b6 	bl	80045fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004490:	e09c      	b.n	80045cc <HAL_UART_IRQHandler+0x518>
 8004492:	bf00      	nop
 8004494:	08004825 	.word	0x08004825
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	1ad3      	subs	r3, r2, r3
 80044a4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	f000 808e 	beq.w	80045d0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80044b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	f000 8089 	beq.w	80045d0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	330c      	adds	r3, #12
 80044c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c8:	e853 3f00 	ldrex	r3, [r3]
 80044cc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80044ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	330c      	adds	r3, #12
 80044de:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80044e2:	647a      	str	r2, [r7, #68]	; 0x44
 80044e4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80044e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044ea:	e841 2300 	strex	r3, r2, [r1]
 80044ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80044f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d1e3      	bne.n	80044be <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	3314      	adds	r3, #20
 80044fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004500:	e853 3f00 	ldrex	r3, [r3]
 8004504:	623b      	str	r3, [r7, #32]
   return(result);
 8004506:	6a3b      	ldr	r3, [r7, #32]
 8004508:	f023 0301 	bic.w	r3, r3, #1
 800450c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	3314      	adds	r3, #20
 8004516:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800451a:	633a      	str	r2, [r7, #48]	; 0x30
 800451c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800451e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004520:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004522:	e841 2300 	strex	r3, r2, [r1]
 8004526:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800452a:	2b00      	cmp	r3, #0
 800452c:	d1e3      	bne.n	80044f6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2220      	movs	r2, #32
 8004532:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	330c      	adds	r3, #12
 8004542:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	e853 3f00 	ldrex	r3, [r3]
 800454a:	60fb      	str	r3, [r7, #12]
   return(result);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f023 0310 	bic.w	r3, r3, #16
 8004552:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	330c      	adds	r3, #12
 800455c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004560:	61fa      	str	r2, [r7, #28]
 8004562:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004564:	69b9      	ldr	r1, [r7, #24]
 8004566:	69fa      	ldr	r2, [r7, #28]
 8004568:	e841 2300 	strex	r3, r2, [r1]
 800456c:	617b      	str	r3, [r7, #20]
   return(result);
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d1e3      	bne.n	800453c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2202      	movs	r2, #2
 8004578:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800457a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800457e:	4619      	mov	r1, r3
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f000 f83b 	bl	80045fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004586:	e023      	b.n	80045d0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004588:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800458c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004590:	2b00      	cmp	r3, #0
 8004592:	d009      	beq.n	80045a8 <HAL_UART_IRQHandler+0x4f4>
 8004594:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800459c:	2b00      	cmp	r3, #0
 800459e:	d003      	beq.n	80045a8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f000 f953 	bl	800484c <UART_Transmit_IT>
    return;
 80045a6:	e014      	b.n	80045d2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80045a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d00e      	beq.n	80045d2 <HAL_UART_IRQHandler+0x51e>
 80045b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d008      	beq.n	80045d2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f000 f992 	bl	80048ea <UART_EndTransmit_IT>
    return;
 80045c6:	e004      	b.n	80045d2 <HAL_UART_IRQHandler+0x51e>
    return;
 80045c8:	bf00      	nop
 80045ca:	e002      	b.n	80045d2 <HAL_UART_IRQHandler+0x51e>
      return;
 80045cc:	bf00      	nop
 80045ce:	e000      	b.n	80045d2 <HAL_UART_IRQHandler+0x51e>
      return;
 80045d0:	bf00      	nop
  }
}
 80045d2:	37e8      	adds	r7, #232	; 0xe8
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80045e0:	bf00      	nop
 80045e2:	370c      	adds	r7, #12
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bc80      	pop	{r7}
 80045e8:	4770      	bx	lr

080045ea <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80045ea:	b480      	push	{r7}
 80045ec:	b083      	sub	sp, #12
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80045f2:	bf00      	nop
 80045f4:	370c      	adds	r7, #12
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bc80      	pop	{r7}
 80045fa:	4770      	bx	lr

080045fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	460b      	mov	r3, r1
 8004606:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004608:	bf00      	nop
 800460a:	370c      	adds	r7, #12
 800460c:	46bd      	mov	sp, r7
 800460e:	bc80      	pop	{r7}
 8004610:	4770      	bx	lr

08004612 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004612:	b580      	push	{r7, lr}
 8004614:	b090      	sub	sp, #64	; 0x40
 8004616:	af00      	add	r7, sp, #0
 8004618:	60f8      	str	r0, [r7, #12]
 800461a:	60b9      	str	r1, [r7, #8]
 800461c:	603b      	str	r3, [r7, #0]
 800461e:	4613      	mov	r3, r2
 8004620:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004622:	e050      	b.n	80046c6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004624:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800462a:	d04c      	beq.n	80046c6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800462c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800462e:	2b00      	cmp	r3, #0
 8004630:	d007      	beq.n	8004642 <UART_WaitOnFlagUntilTimeout+0x30>
 8004632:	f7fd f9b9 	bl	80019a8 <HAL_GetTick>
 8004636:	4602      	mov	r2, r0
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800463e:	429a      	cmp	r2, r3
 8004640:	d241      	bcs.n	80046c6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	330c      	adds	r3, #12
 8004648:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800464a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800464c:	e853 3f00 	ldrex	r3, [r3]
 8004650:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004654:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004658:	63fb      	str	r3, [r7, #60]	; 0x3c
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	330c      	adds	r3, #12
 8004660:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004662:	637a      	str	r2, [r7, #52]	; 0x34
 8004664:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004666:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004668:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800466a:	e841 2300 	strex	r3, r2, [r1]
 800466e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004672:	2b00      	cmp	r3, #0
 8004674:	d1e5      	bne.n	8004642 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	3314      	adds	r3, #20
 800467c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	e853 3f00 	ldrex	r3, [r3]
 8004684:	613b      	str	r3, [r7, #16]
   return(result);
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	f023 0301 	bic.w	r3, r3, #1
 800468c:	63bb      	str	r3, [r7, #56]	; 0x38
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	3314      	adds	r3, #20
 8004694:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004696:	623a      	str	r2, [r7, #32]
 8004698:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800469a:	69f9      	ldr	r1, [r7, #28]
 800469c:	6a3a      	ldr	r2, [r7, #32]
 800469e:	e841 2300 	strex	r3, r2, [r1]
 80046a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d1e5      	bne.n	8004676 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2220      	movs	r2, #32
 80046ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2220      	movs	r2, #32
 80046b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e00f      	b.n	80046e6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	4013      	ands	r3, r2
 80046d0:	68ba      	ldr	r2, [r7, #8]
 80046d2:	429a      	cmp	r2, r3
 80046d4:	bf0c      	ite	eq
 80046d6:	2301      	moveq	r3, #1
 80046d8:	2300      	movne	r3, #0
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	461a      	mov	r2, r3
 80046de:	79fb      	ldrb	r3, [r7, #7]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d09f      	beq.n	8004624 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80046e4:	2300      	movs	r3, #0
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3740      	adds	r7, #64	; 0x40
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}

080046ee <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80046ee:	b480      	push	{r7}
 80046f0:	b085      	sub	sp, #20
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	60f8      	str	r0, [r7, #12]
 80046f6:	60b9      	str	r1, [r7, #8]
 80046f8:	4613      	mov	r3, r2
 80046fa:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	68ba      	ldr	r2, [r7, #8]
 8004700:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	88fa      	ldrh	r2, [r7, #6]
 8004706:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	88fa      	ldrh	r2, [r7, #6]
 800470c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2200      	movs	r2, #0
 8004712:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2222      	movs	r2, #34	; 0x22
 8004718:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	691b      	ldr	r3, [r3, #16]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d007      	beq.n	8004734 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	68da      	ldr	r2, [r3, #12]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004732:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	695a      	ldr	r2, [r3, #20]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f042 0201 	orr.w	r2, r2, #1
 8004742:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68da      	ldr	r2, [r3, #12]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f042 0220 	orr.w	r2, r2, #32
 8004752:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3714      	adds	r7, #20
 800475a:	46bd      	mov	sp, r7
 800475c:	bc80      	pop	{r7}
 800475e:	4770      	bx	lr

08004760 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004760:	b480      	push	{r7}
 8004762:	b095      	sub	sp, #84	; 0x54
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	330c      	adds	r3, #12
 800476e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004772:	e853 3f00 	ldrex	r3, [r3]
 8004776:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800477a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800477e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	330c      	adds	r3, #12
 8004786:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004788:	643a      	str	r2, [r7, #64]	; 0x40
 800478a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800478c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800478e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004790:	e841 2300 	strex	r3, r2, [r1]
 8004794:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004798:	2b00      	cmp	r3, #0
 800479a:	d1e5      	bne.n	8004768 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	3314      	adds	r3, #20
 80047a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a4:	6a3b      	ldr	r3, [r7, #32]
 80047a6:	e853 3f00 	ldrex	r3, [r3]
 80047aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	f023 0301 	bic.w	r3, r3, #1
 80047b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	3314      	adds	r3, #20
 80047ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80047be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047c4:	e841 2300 	strex	r3, r2, [r1]
 80047c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80047ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d1e5      	bne.n	800479c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d119      	bne.n	800480c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	330c      	adds	r3, #12
 80047de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	e853 3f00 	ldrex	r3, [r3]
 80047e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	f023 0310 	bic.w	r3, r3, #16
 80047ee:	647b      	str	r3, [r7, #68]	; 0x44
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	330c      	adds	r3, #12
 80047f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047f8:	61ba      	str	r2, [r7, #24]
 80047fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047fc:	6979      	ldr	r1, [r7, #20]
 80047fe:	69ba      	ldr	r2, [r7, #24]
 8004800:	e841 2300 	strex	r3, r2, [r1]
 8004804:	613b      	str	r3, [r7, #16]
   return(result);
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d1e5      	bne.n	80047d8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2220      	movs	r2, #32
 8004810:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	631a      	str	r2, [r3, #48]	; 0x30
}
 800481a:	bf00      	nop
 800481c:	3754      	adds	r7, #84	; 0x54
 800481e:	46bd      	mov	sp, r7
 8004820:	bc80      	pop	{r7}
 8004822:	4770      	bx	lr

08004824 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004830:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2200      	movs	r2, #0
 8004836:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2200      	movs	r2, #0
 800483c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800483e:	68f8      	ldr	r0, [r7, #12]
 8004840:	f7ff fed3 	bl	80045ea <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004844:	bf00      	nop
 8004846:	3710      	adds	r7, #16
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}

0800484c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800484c:	b480      	push	{r7}
 800484e:	b085      	sub	sp, #20
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800485a:	b2db      	uxtb	r3, r3
 800485c:	2b21      	cmp	r3, #33	; 0x21
 800485e:	d13e      	bne.n	80048de <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004868:	d114      	bne.n	8004894 <UART_Transmit_IT+0x48>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d110      	bne.n	8004894 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a1b      	ldr	r3, [r3, #32]
 8004876:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	881b      	ldrh	r3, [r3, #0]
 800487c:	461a      	mov	r2, r3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004886:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6a1b      	ldr	r3, [r3, #32]
 800488c:	1c9a      	adds	r2, r3, #2
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	621a      	str	r2, [r3, #32]
 8004892:	e008      	b.n	80048a6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a1b      	ldr	r3, [r3, #32]
 8004898:	1c59      	adds	r1, r3, #1
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	6211      	str	r1, [r2, #32]
 800489e:	781a      	ldrb	r2, [r3, #0]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	3b01      	subs	r3, #1
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	4619      	mov	r1, r3
 80048b4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d10f      	bne.n	80048da <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	68da      	ldr	r2, [r3, #12]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048c8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68da      	ldr	r2, [r3, #12]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048d8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80048da:	2300      	movs	r3, #0
 80048dc:	e000      	b.n	80048e0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80048de:	2302      	movs	r3, #2
  }
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3714      	adds	r7, #20
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bc80      	pop	{r7}
 80048e8:	4770      	bx	lr

080048ea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80048ea:	b580      	push	{r7, lr}
 80048ec:	b082      	sub	sp, #8
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	68da      	ldr	r2, [r3, #12]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004900:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2220      	movs	r2, #32
 8004906:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f7ff fe64 	bl	80045d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004910:	2300      	movs	r3, #0
}
 8004912:	4618      	mov	r0, r3
 8004914:	3708      	adds	r7, #8
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}

0800491a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800491a:	b580      	push	{r7, lr}
 800491c:	b08c      	sub	sp, #48	; 0x30
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004928:	b2db      	uxtb	r3, r3
 800492a:	2b22      	cmp	r3, #34	; 0x22
 800492c:	f040 80ae 	bne.w	8004a8c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004938:	d117      	bne.n	800496a <UART_Receive_IT+0x50>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d113      	bne.n	800496a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004942:	2300      	movs	r3, #0
 8004944:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800494a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	b29b      	uxth	r3, r3
 8004954:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004958:	b29a      	uxth	r2, r3
 800495a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800495c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004962:	1c9a      	adds	r2, r3, #2
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	629a      	str	r2, [r3, #40]	; 0x28
 8004968:	e026      	b.n	80049b8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800496e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004970:	2300      	movs	r3, #0
 8004972:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800497c:	d007      	beq.n	800498e <UART_Receive_IT+0x74>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d10a      	bne.n	800499c <UART_Receive_IT+0x82>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d106      	bne.n	800499c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	b2da      	uxtb	r2, r3
 8004996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004998:	701a      	strb	r2, [r3, #0]
 800499a:	e008      	b.n	80049ae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049a8:	b2da      	uxtb	r2, r3
 80049aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b2:	1c5a      	adds	r2, r3, #1
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80049bc:	b29b      	uxth	r3, r3
 80049be:	3b01      	subs	r3, #1
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	4619      	mov	r1, r3
 80049c6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d15d      	bne.n	8004a88 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	68da      	ldr	r2, [r3, #12]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f022 0220 	bic.w	r2, r2, #32
 80049da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	68da      	ldr	r2, [r3, #12]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80049ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	695a      	ldr	r2, [r3, #20]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f022 0201 	bic.w	r2, r2, #1
 80049fa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2220      	movs	r2, #32
 8004a00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d135      	bne.n	8004a7e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	330c      	adds	r3, #12
 8004a1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	e853 3f00 	ldrex	r3, [r3]
 8004a26:	613b      	str	r3, [r7, #16]
   return(result);
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	f023 0310 	bic.w	r3, r3, #16
 8004a2e:	627b      	str	r3, [r7, #36]	; 0x24
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	330c      	adds	r3, #12
 8004a36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a38:	623a      	str	r2, [r7, #32]
 8004a3a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a3c:	69f9      	ldr	r1, [r7, #28]
 8004a3e:	6a3a      	ldr	r2, [r7, #32]
 8004a40:	e841 2300 	strex	r3, r2, [r1]
 8004a44:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d1e5      	bne.n	8004a18 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0310 	and.w	r3, r3, #16
 8004a56:	2b10      	cmp	r3, #16
 8004a58:	d10a      	bne.n	8004a70 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	60fb      	str	r3, [r7, #12]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	60fb      	str	r3, [r7, #12]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	60fb      	str	r3, [r7, #12]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004a74:	4619      	mov	r1, r3
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f7ff fdc0 	bl	80045fc <HAL_UARTEx_RxEventCallback>
 8004a7c:	e002      	b.n	8004a84 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f7fc fcd0 	bl	8001424 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004a84:	2300      	movs	r3, #0
 8004a86:	e002      	b.n	8004a8e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	e000      	b.n	8004a8e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004a8c:	2302      	movs	r3, #2
  }
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3730      	adds	r7, #48	; 0x30
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
	...

08004a98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	68da      	ldr	r2, [r3, #12]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	430a      	orrs	r2, r1
 8004ab4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	689a      	ldr	r2, [r3, #8]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	691b      	ldr	r3, [r3, #16]
 8004abe:	431a      	orrs	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	695b      	ldr	r3, [r3, #20]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004ad2:	f023 030c 	bic.w	r3, r3, #12
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	6812      	ldr	r2, [r2, #0]
 8004ada:	68b9      	ldr	r1, [r7, #8]
 8004adc:	430b      	orrs	r3, r1
 8004ade:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	695b      	ldr	r3, [r3, #20]
 8004ae6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	699a      	ldr	r2, [r3, #24]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	430a      	orrs	r2, r1
 8004af4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a2c      	ldr	r2, [pc, #176]	; (8004bac <UART_SetConfig+0x114>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d103      	bne.n	8004b08 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004b00:	f7fe fcf0 	bl	80034e4 <HAL_RCC_GetPCLK2Freq>
 8004b04:	60f8      	str	r0, [r7, #12]
 8004b06:	e002      	b.n	8004b0e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004b08:	f7fe fcd8 	bl	80034bc <HAL_RCC_GetPCLK1Freq>
 8004b0c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b0e:	68fa      	ldr	r2, [r7, #12]
 8004b10:	4613      	mov	r3, r2
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	4413      	add	r3, r2
 8004b16:	009a      	lsls	r2, r3, #2
 8004b18:	441a      	add	r2, r3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b24:	4a22      	ldr	r2, [pc, #136]	; (8004bb0 <UART_SetConfig+0x118>)
 8004b26:	fba2 2303 	umull	r2, r3, r2, r3
 8004b2a:	095b      	lsrs	r3, r3, #5
 8004b2c:	0119      	lsls	r1, r3, #4
 8004b2e:	68fa      	ldr	r2, [r7, #12]
 8004b30:	4613      	mov	r3, r2
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	4413      	add	r3, r2
 8004b36:	009a      	lsls	r2, r3, #2
 8004b38:	441a      	add	r2, r3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b44:	4b1a      	ldr	r3, [pc, #104]	; (8004bb0 <UART_SetConfig+0x118>)
 8004b46:	fba3 0302 	umull	r0, r3, r3, r2
 8004b4a:	095b      	lsrs	r3, r3, #5
 8004b4c:	2064      	movs	r0, #100	; 0x64
 8004b4e:	fb00 f303 	mul.w	r3, r0, r3
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	011b      	lsls	r3, r3, #4
 8004b56:	3332      	adds	r3, #50	; 0x32
 8004b58:	4a15      	ldr	r2, [pc, #84]	; (8004bb0 <UART_SetConfig+0x118>)
 8004b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b5e:	095b      	lsrs	r3, r3, #5
 8004b60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b64:	4419      	add	r1, r3
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	4613      	mov	r3, r2
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	4413      	add	r3, r2
 8004b6e:	009a      	lsls	r2, r3, #2
 8004b70:	441a      	add	r2, r3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b7c:	4b0c      	ldr	r3, [pc, #48]	; (8004bb0 <UART_SetConfig+0x118>)
 8004b7e:	fba3 0302 	umull	r0, r3, r3, r2
 8004b82:	095b      	lsrs	r3, r3, #5
 8004b84:	2064      	movs	r0, #100	; 0x64
 8004b86:	fb00 f303 	mul.w	r3, r0, r3
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	011b      	lsls	r3, r3, #4
 8004b8e:	3332      	adds	r3, #50	; 0x32
 8004b90:	4a07      	ldr	r2, [pc, #28]	; (8004bb0 <UART_SetConfig+0x118>)
 8004b92:	fba2 2303 	umull	r2, r3, r2, r3
 8004b96:	095b      	lsrs	r3, r3, #5
 8004b98:	f003 020f 	and.w	r2, r3, #15
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	440a      	add	r2, r1
 8004ba2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004ba4:	bf00      	nop
 8004ba6:	3710      	adds	r7, #16
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	40013800 	.word	0x40013800
 8004bb0:	51eb851f 	.word	0x51eb851f

08004bb4 <memset>:
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	4402      	add	r2, r0
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d100      	bne.n	8004bbe <memset+0xa>
 8004bbc:	4770      	bx	lr
 8004bbe:	f803 1b01 	strb.w	r1, [r3], #1
 8004bc2:	e7f9      	b.n	8004bb8 <memset+0x4>

08004bc4 <__libc_init_array>:
 8004bc4:	b570      	push	{r4, r5, r6, lr}
 8004bc6:	2600      	movs	r6, #0
 8004bc8:	4d0c      	ldr	r5, [pc, #48]	; (8004bfc <__libc_init_array+0x38>)
 8004bca:	4c0d      	ldr	r4, [pc, #52]	; (8004c00 <__libc_init_array+0x3c>)
 8004bcc:	1b64      	subs	r4, r4, r5
 8004bce:	10a4      	asrs	r4, r4, #2
 8004bd0:	42a6      	cmp	r6, r4
 8004bd2:	d109      	bne.n	8004be8 <__libc_init_array+0x24>
 8004bd4:	f000 f81a 	bl	8004c0c <_init>
 8004bd8:	2600      	movs	r6, #0
 8004bda:	4d0a      	ldr	r5, [pc, #40]	; (8004c04 <__libc_init_array+0x40>)
 8004bdc:	4c0a      	ldr	r4, [pc, #40]	; (8004c08 <__libc_init_array+0x44>)
 8004bde:	1b64      	subs	r4, r4, r5
 8004be0:	10a4      	asrs	r4, r4, #2
 8004be2:	42a6      	cmp	r6, r4
 8004be4:	d105      	bne.n	8004bf2 <__libc_init_array+0x2e>
 8004be6:	bd70      	pop	{r4, r5, r6, pc}
 8004be8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bec:	4798      	blx	r3
 8004bee:	3601      	adds	r6, #1
 8004bf0:	e7ee      	b.n	8004bd0 <__libc_init_array+0xc>
 8004bf2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bf6:	4798      	blx	r3
 8004bf8:	3601      	adds	r6, #1
 8004bfa:	e7f2      	b.n	8004be2 <__libc_init_array+0x1e>
 8004bfc:	08004c50 	.word	0x08004c50
 8004c00:	08004c50 	.word	0x08004c50
 8004c04:	08004c50 	.word	0x08004c50
 8004c08:	08004c54 	.word	0x08004c54

08004c0c <_init>:
 8004c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c0e:	bf00      	nop
 8004c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c12:	bc08      	pop	{r3}
 8004c14:	469e      	mov	lr, r3
 8004c16:	4770      	bx	lr

08004c18 <_fini>:
 8004c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c1a:	bf00      	nop
 8004c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c1e:	bc08      	pop	{r3}
 8004c20:	469e      	mov	lr, r3
 8004c22:	4770      	bx	lr
